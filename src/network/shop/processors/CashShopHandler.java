package network.shop.processors;

import constants.GameConstants;
import constants.QuestExConstants;
import constants.ServerConstants;
import database.DBConfig;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import logging.LoggingManager;
import logging.entry.ConsumeLogType;
import logging.entry.ItemLog;
import network.center.Center;
import network.center.CharacterTransfer;
import network.decode.PacketDecoder;
import network.game.GameServer;
import network.login.LoginServer;
import network.models.CField;
import network.models.CSPacket;
import network.models.CWvsContext;
import network.shop.CashItemFactory;
import network.shop.CashItemInfo;
import network.shop.CashShop;
import network.shop.CashShopServer;
import objects.item.Equip;
import objects.item.Item;
import objects.item.MapleInventory;
import objects.item.MapleInventoryManipulator;
import objects.item.MapleInventoryType;
import objects.quest.MapleQuest;
import objects.quest.MapleQuestStatus;
import objects.users.MapleCharacter;
import objects.users.MapleCharacterUtil;
import objects.users.MapleClient;
import objects.users.enchant.ItemFlag;
import objects.utils.AdminClient;
import objects.utils.FileoutputUtil;
import objects.utils.Randomizer;
import objects.utils.Triple;

public class CashShopHandler {
   static int[] extremeList = new int[]{
      1109000,
      1009017,
      1009018,
      1009019,
      1009020,
      1009021,
      1009022,
      1009023,
      1009024,
      1009025,
      1009026,
      1009027,
      1009028,
      1009029,
      1009030,
      1009031,
      1009032,
      1009033,
      1009034,
      1009035,
      1009036,
      1009037,
      1009038,
      1009039,
      1009040,
      1009041,
      1009042,
      1009043,
      1009044,
      1009045,
      1009046,
      1009047,
      1009048,
      1009049,
      1009050,
      1009051,
      1009052,
      1009053,
      1009054,
      1009055,
      1009056,
      1009057,
      1009058,
      1009059,
      1009060,
      1009061,
      1009062,
      1009063,
      1009064,
      1009065,
      1009066,
      1009067,
      1009068,
      1009069,
      1009070,
      1009071,
      1009072,
      1009073,
      1009074,
      1009078,
      1009079,
      1009080,
      1009081,
      1009082,
      1709000,
      1709001,
      1709002,
      1709003,
      1709004,
      1709005,
      1709006,
      1709007,
      1709008,
      1709009,
      1709010,
      1709011,
      1709012,
      1709013,
      1709014,
      1709015,
      1709016,
      1709017,
      1709018,
      1079000,
      1079001,
      1079002,
      1079003,
      1079004,
      1079005,
      1059000,
      1059001,
      1059002,
      1059003,
      1059004,
      1059005,
      1059006,
      1059007,
      1059008,
      1059009,
      1059010,
      1059011,
      1059012,
      1059013,
      1059014,
      1059015,
      1059016,
      1059017,
      1059018,
      1059019,
      1059020,
      1059021,
      1059022,
      1059023,
      1059024,
      1059027,
      1059028,
      1059029,
      1059030,
      1059031,
      1059032,
      1059033,
      1059034,
      1059035,
      1059036,
      1059037,
      1059038,
      1059039,
      1059040,
      1059041,
      1059042,
      1059043,
      1059044,
      1059045,
      1059046,
      1059047,
      1059048,
      1059049,
      1009000,
      1009001,
      1009002,
      1009003,
      1009004,
      1009005,
      1009006,
      1009007,
      1009008,
      1009009,
      1009010,
      1009011,
      1009012,
      1009013,
      1009014,
      1009015,
      1009016
   };
   static int[][] jinList = new int[][]{
      {
            1007000,
            1007001,
            1007002,
            1007003,
            1007004,
            1007005,
            1007006,
            1007007,
            1007008,
            1007009,
            1007010,
            1007011,
            1007012,
            1007013,
            1007014,
            1007015,
            1007016,
            1007017,
            1007018,
            1007019,
            1007020,
            1007021,
            1007022,
            1007023,
            1007024,
            1007025,
            1007026,
            1007027,
            1007028,
            1007029,
            1007030,
            1007031,
            1007032,
            1007033,
            1007034,
            1007035,
            1007036,
            1007037,
            1007038,
            1007039,
            1007040,
            1007041,
            1007042,
            1007043,
            1007044,
            1007045,
            1007046,
            1007047,
            1007048,
            1007049,
            1007050,
            1007051,
            1007052,
            1007053,
            1007054,
            1007055,
            1007056,
            1007057,
            1007058,
            1007059,
            1007060,
            1007061,
            1007062,
            1007063,
            1007064,
            1007065,
            1007066,
            1007067,
            1007068,
            1007069,
            1007070,
            1007071,
            1007072,
            1007073,
            1007074,
            1007075,
            1007076,
            1007077,
            1007078,
            1007079,
            1007080,
            1007081,
            1007082,
            1007083,
            1007084,
            1007085,
            1007086,
            1007087,
            1007088,
            1007089,
            1007090,
            1007091,
            1007092,
            1007093,
            1007094,
            1007095,
            1007096,
            1007097,
            1007098,
            1007099,
            1007100,
            1007101,
            1007102,
            1007103,
            1007104,
            1007105,
            1007106,
            1007107,
            1007108,
            1007109,
            1007110,
            1007111,
            1007112,
            1007113,
            1007114,
            1007115,
            1007116,
            1007117,
            1007118,
            1007119,
            1007120,
            1007121,
            1007122,
            1007123,
            1007124,
            1007125,
            1007126,
            1007127,
            1007128,
            1007129,
            1007130,
            1007131,
            1007132,
            1007133,
            1007134,
            1007135,
            1007136,
            1007137,
            1007138,
            1007139,
            1007140,
            1007141,
            1007142,
            1007143,
            1007144,
            1007145,
            1007146,
            1007147,
            1007148,
            1007149,
            1007150,
            1007151,
            1007152,
            1007153,
            1007154,
            1007155,
            1007156,
            1007157,
            1007158,
            1007159,
            1007160,
            1007161,
            1007162,
            1007163,
            1007164,
            1007165,
            1007166,
            1007167,
            1007168,
            1007169,
            1007170,
            1007171,
            1007172,
            1007173,
            1007174,
            1007175,
            1007176,
            1007177,
            1007178,
            1007179,
            1007180,
            1007181,
            1007182,
            1007183,
            1007184,
            1007185,
            1007186,
            1007187,
            1007188,
            1007189,
            1007190,
            1007191,
            1007192,
            1007193,
            1007194,
            1007195,
            1007196,
            1007197,
            1007198,
            1007199,
            1007200,
            1007201,
            1007202,
            1007203,
            1007204,
            1007205,
            1007206,
            1007207,
            1007208,
            1007209,
            1007210,
            1007211,
            1007212,
            1007213,
            1007214,
            1007215,
            1007216,
            1007217,
            1007218,
            1007219,
            1007220,
            1007221,
            1007222,
            1007223,
            1007224,
            1007225,
            1007226,
            1007227,
            1007228,
            1007229
      },
      {
            1056000,
            1056001,
            1056002,
            1056003,
            1056004,
            1056005,
            1056006,
            1056007,
            1056008,
            1056009,
            1056010,
            1056011,
            1056012,
            1056013,
            1056014,
            1056015,
            1056016,
            1056017,
            1056018,
            1056019,
            1056020,
            1056021,
            1056022,
            1056023,
            1056024,
            1056025,
            1056026,
            1056027,
            1056028,
            1056029,
            1056030,
            1056031,
            1056032,
            1056033,
            1056034,
            1056035,
            1056036,
            1056037,
            1056038,
            1056039,
            1056040,
            1056041,
            1056042,
            1056043,
            1056044,
            1056045,
            1056046,
            1056047,
            1056048,
            1056049,
            1056050,
            1056051,
            1056052,
            1056053,
            1056054,
            1056055,
            1056056,
            1056057,
            1056058,
            1056059,
            1056060,
            1056061,
            1056062,
            1056063,
            1056064,
            1056065,
            1056066,
            1056067,
            1056068,
            1056069,
            1056070,
            1056071,
            1056072,
            1056073,
            1056074,
            1056075,
            1056076,
            1056077,
            1056078,
            1056079,
            1056080,
            1056081,
            1056082,
            1056083,
            1056084,
            1057000,
            1057001,
            1057002,
            1057003,
            1057004,
            1057005,
            1057006,
            1057007,
            1057008,
            1057009,
            1057010,
            1057011,
            1057012,
            1057013,
            1057014,
            1057015,
            1057016,
            1057017,
            1057018,
            1057019,
            1058000,
            1058001,
            1058002,
            1058003,
            1058004,
            1058005,
            1058006,
            1058007,
            1058008,
            1058009,
            1058010,
            1058011,
            1058012,
            1058013,
            1058014,
            1058015,
            1058016,
            1058017,
            1058018,
            1058019,
            1058020,
            1058021,
            1058022,
            1058023,
            1058024,
            1058025,
            1058026,
            1058027,
            1058028,
            1058029,
            1058030,
            1058031,
            1058032,
            1058033,
            1058034,
            1058035,
            1058036,
            1058037,
            1058038,
            1058039,
            1058040,
            1058041,
            1058042,
            1058043,
            1058044,
            1058045,
            1058046,
            1058047,
            1058048,
            1058049,
            1058050,
            1058051,
            1058052,
            1058053,
            1058054,
            1058055,
            1058056,
            1058057,
            1058058,
            1058059,
            1058060,
            1058061,
            1058062,
            1058063,
            1058064,
            1058065,
            1058066,
            1058067,
            1058068,
            1058069,
            1058070,
            1058071,
            1058072,
            1058073,
            1058074,
            1058075,
            1058076,
            1058077,
            1058078,
            1058079,
            1058080,
            1058081,
            1058082,
            1058083,
            1058084
      },
      {1045000, 1045001, 1045002, 1045003, 1045004},
      {
            1704000,
            1704001,
            1704002,
            1704003,
            1704004,
            1704005,
            1704006,
            1704007,
            1704008,
            1704009,
            1704010,
            1704011,
            1704012,
            1704013,
            1704014,
            1705000,
            1705001,
            1705002,
            1705003,
            1705004,
            1705005,
            1705006,
            1705007,
            1705008,
            1705009,
            1705010,
            1705011,
            1705012,
            1705013,
            1705014,
            1705015,
            1705016,
            1705017,
            1705018,
            1705019,
            1705020,
            1705021,
            1705022,
            1705023,
            1705024,
            1705025,
            1705026,
            1705027,
            1705028,
            1705029,
            1705030,
            1705031,
            1705032,
            1705033,
            1705034,
            1705035,
            1705036,
            1705037,
            1705038,
            1705039,
            1705040,
            1705041,
            1705042,
            1705043,
            1705044,
            1705045,
            1705046,
            1705047,
            1705048,
            1705049,
            1705050,
            1705051,
            1705052,
            1705053,
            1705054,
            1705055,
            1705056,
            1705057,
            1705058,
            1705059,
            1705060,
            1705061,
            1705062,
            1705063,
            1705064,
            1705065,
            1705066,
            1705067,
            1705068,
            1705069,
            1705070,
            1705071,
            1705072,
            1705073,
            1705074,
            1705075,
            1705076,
            1705077,
            1705078,
            1705079,
            1705080,
            1705081,
            1705082,
            1705083,
            1705084,
            1705085,
            1705086,
            1705087,
            1705088,
            1705089
      },
      {
            1104000,
            1104001,
            1104002,
            1104003,
            1104004,
            1104005,
            1104006,
            1104007,
            1104008,
            1104009,
            1104010,
            1104011,
            1104012,
            1104013,
            1104014,
            1104015,
            1104016,
            1104017,
            1104018,
            1104019,
            1104020,
            1104021,
            1104022,
            1104023,
            1104024,
            1104035,
            1104036,
            1104037,
            1104038,
            1104039
      },
      {1084000, 1084001, 1084002, 1084003, 1084004, 1084005, 1084006, 1084007, 1084008},
      {1075000, 1075001, 1075002, 1075003, 1075004, 1075005, 1075006, 1075007, 1075008, 1075009, 1075010, 1075011, 1075012, 1075013, 1075014},
      {1012850, 1012851, 1012852, 1012853, 1012854, 1012855, 1012856, 1012857, 1012858, 1012859, 1012860, 1012861, 1012862, 1012863, 1012864},
      {1112917, 1032999, 1132399, 1114401, 1672077, 1032998, 1112921, 1114402, 1032219, 1022286}
   };
   static int[][] royalList = new int[][]{
      {
            1007000,
            1007001,
            1007002,
            1007003,
            1007004,
            1007005,
            1007006,
            1007007,
            1007008,
            1007009,
            1007010,
            1007011,
            1007012,
            1007013,
            1007014,
            1007015,
            1007016,
            1007017,
            1007018,
            1007019,
            1007020,
            1007021,
            1007022,
            1007023,
            1007024,
            1007025,
            1007026,
            1007027,
            1007028,
            1007029,
            1007030,
            1007031,
            1007032,
            1007033,
            1007034,
            1007035,
            1007036,
            1007037,
            1007038,
            1007039,
            1007040,
            1007041,
            1007042,
            1007043,
            1007044,
            1007045,
            1007046,
            1007047,
            1007048,
            1007049,
            1007050,
            1007051,
            1007052,
            1007053,
            1007054,
            1007055,
            1007056,
            1007057,
            1007058,
            1007059,
            1007060,
            1007061,
            1007062,
            1007063,
            1007064,
            1007065,
            1007066,
            1007067,
            1007068,
            1007069,
            1007070,
            1007071,
            1007072,
            1007073,
            1007074,
            1007075,
            1007076,
            1007077,
            1007078,
            1007079,
            1007080,
            1007081,
            1007082,
            1007083,
            1007084,
            1007085,
            1007086,
            1007087,
            1007088,
            1007089,
            1007090,
            1007091,
            1007092,
            1007093,
            1007094,
            1007095,
            1007096,
            1007097,
            1007098,
            1007099,
            1007100,
            1007101,
            1007102,
            1007103,
            1007104,
            1007105,
            1007106,
            1007107,
            1007108,
            1007109,
            1007110,
            1007111,
            1007112,
            1007113,
            1007114,
            1007115,
            1007116,
            1007117,
            1007118,
            1007119,
            1007120,
            1007121,
            1007122,
            1007123,
            1007124,
            1007125,
            1007126,
            1007127,
            1007128,
            1007129,
            1007130,
            1007131,
            1007132,
            1007133,
            1007134,
            1007135,
            1007136,
            1007137,
            1007138,
            1007139,
            1007140,
            1007141,
            1007142,
            1007143,
            1007144,
            1007145,
            1007146,
            1007147,
            1007148,
            1007149,
            1007150,
            1007151,
            1007152,
            1007153,
            1007154,
            1007155,
            1007156,
            1007157,
            1007158,
            1007159,
            1007160,
            1007161,
            1007162,
            1007163,
            1007164,
            1007165,
            1007166,
            1007167,
            1007168,
            1007169,
            1007170,
            1007171,
            1007172,
            1007173,
            1007174,
            1007175,
            1007176,
            1007177,
            1007178,
            1007179,
            1007180,
            1007181,
            1007182,
            1007183,
            1007184,
            1007185,
            1007186,
            1007187,
            1007188,
            1007189,
            1007190,
            1007191,
            1007192,
            1007193,
            1007194,
            1007195,
            1007196,
            1007197,
            1007198,
            1007199,
            1007200,
            1007201,
            1007202,
            1007203,
            1007204,
            1007205,
            1007206,
            1007207,
            1007208,
            1007209,
            1007210,
            1007211,
            1007212,
            1007213,
            1007214,
            1007215,
            1007216
      },
      {
            1056000,
            1056001,
            1056002,
            1056003,
            1056004,
            1056005,
            1056006,
            1056007,
            1056008,
            1056009,
            1056010,
            1056011,
            1056012,
            1056013,
            1056014,
            1056015,
            1056016,
            1056017,
            1056018,
            1056019,
            1056020,
            1056021,
            1056022,
            1056023,
            1056024,
            1056025,
            1056026,
            1056027,
            1056028,
            1056029,
            1056030,
            1056031,
            1056032,
            1056033,
            1056034,
            1056035,
            1056036,
            1056037,
            1056038,
            1056039,
            1056040,
            1056041,
            1056042,
            1056043,
            1056044,
            1056045,
            1056046,
            1056047,
            1056048,
            1056049,
            1056050,
            1056051,
            1056052,
            1056053,
            1056054,
            1056055,
            1056056,
            1056057,
            1056058,
            1056059,
            1056060,
            1056061,
            1056062,
            1056063,
            1056064,
            1056065,
            1056066,
            1056067,
            1056068,
            1056069,
            1056070,
            1056071,
            1056072,
            1056073,
            1056074,
            1056075,
            1056076,
            1056077,
            1056078,
            1056079,
            1056080,
            1056081,
            1056082,
            1056083,
            1056084,
            1056085,
            1056086,
            1056087,
            1056088,
            1056089,
            1056090,
            1056091,
            1056092,
            1056093,
            1056094,
            1056095,
            1056096,
            1056097,
            1057000,
            1057001,
            1057002,
            1057003,
            1057004,
            1057005,
            1057006,
            1057007,
            1057008,
            1057009,
            1057010,
            1057011,
            1057012,
            1057013,
            1057014,
            1057015,
            1057016,
            1057017,
            1057018,
            1057019,
            1057020,
            1058000,
            1058001,
            1058002,
            1058003,
            1058004,
            1058005,
            1058006,
            1058007,
            1058008,
            1058009,
            1058010,
            1058011,
            1058012,
            1058013,
            1058014,
            1058015,
            1058016,
            1058017,
            1058018,
            1058019,
            1058020,
            1058021,
            1058022,
            1058023,
            1058024,
            1058025,
            1058026,
            1058027,
            1058028,
            1058029,
            1058030,
            1058031,
            1058032,
            1058033,
            1058034,
            1058035,
            1058036,
            1058037,
            1058038,
            1058039,
            1058040,
            1058041,
            1058042,
            1058043,
            1058044,
            1058045,
            1058046,
            1058047,
            1058048,
            1058049,
            1058050,
            1058051,
            1058052,
            1058053,
            1058054,
            1058055,
            1058056,
            1058057,
            1058058,
            1058059,
            1058060,
            1058061,
            1058062,
            1058063,
            1058064,
            1058065,
            1058066,
            1058067,
            1058068,
            1058069,
            1058070,
            1058071,
            1058072,
            1058073,
            1058074,
            1058075,
            1058076,
            1058077,
            1058078,
            1058079,
            1058080,
            1058081,
            1058082,
            1058083,
            1058084,
            1058085,
            1058086,
            1058087,
            1058088,
            1058089,
            1058090,
            1058091,
            1058092,
            1058093,
            1058094,
            1058095,
            1058096,
            1058097
      },
      new int[0],
      {
            1705000,
            1705001,
            1705002,
            1705003,
            1705004,
            1705005,
            1705006,
            1705007,
            1705008,
            1705009,
            1705010,
            1705011,
            1705012,
            1705013,
            1705014,
            1705015,
            1705016,
            1705017,
            1705018,
            1705019,
            1705020,
            1705021,
            1705022,
            1705023,
            1705024,
            1705025,
            1705026,
            1705027,
            1705028,
            1705029,
            1705030,
            1705031,
            1705032,
            1705033,
            1705034,
            1705035,
            1705036,
            1705037,
            1705038,
            1705039,
            1705040,
            1705041,
            1705042,
            1705043,
            1705044,
            1705045,
            1705046,
            1705047,
            1705048,
            1705049,
            1705050,
            1705051,
            1705052,
            1705053,
            1705054,
            1705055,
            1705056,
            1705057,
            1705058,
            1705059,
            1705060,
            1705061,
            1705062,
            1705063,
            1705064,
            1705065,
            1705066,
            1705067,
            1705068,
            1705069,
            1705070,
            1705071,
            1705072,
            1705073,
            1705074,
            1705075,
            1705076,
            1705077,
            1705078,
            1705079,
            1705080,
            1705081,
            1705082,
            1705083,
            1705084,
            1705085,
            1705086,
            1705087,
            1705088,
            1705089,
            1705090,
            1705091,
            1705092,
            1705093,
            1705094,
            1705095,
            1705096,
            1705097,
            1705098,
            1705099,
            1705100,
            1705101,
            1705102,
            1705103,
            1705104,
            1705105,
            1705106,
            1705107,
            1705108,
            1705109,
            1705110,
            1705111,
            1705112,
            1705113,
            1705114,
            1705115,
            1705116,
            1705117,
            1705118,
            1705119,
            1705120,
            1705121,
            1705122,
            1705123,
            1705124,
            1705125,
            1705126,
            1705127,
            1705128,
            1705129,
            1705130,
            1705131,
            1705132,
            1705133,
            1705134,
            1705135,
            1705136,
            1705137,
            1705138,
            1705139,
            1705140,
            1705141,
            1705142,
            1705143,
            1705144,
            1705145,
            1705146,
            1705147,
            1705148,
            1705149,
            1705150,
            1705151,
            1705152,
            1705153
      },
      {
            1104000,
            1104001,
            1104002,
            1104003,
            1104004,
            1104005,
            1104006,
            1104007,
            1104008,
            1104009,
            1104010,
            1104011,
            1104012,
            1104013,
            1104014,
            1104015,
            1104016,
            1104017,
            1104018,
            1104019,
            1104020,
            1104021,
            1104022,
            1104023,
            1104024,
            1104025,
            1104026,
            1104027,
            1104028,
            1104029,
            1104030,
            1104031,
            1104032,
            1104033,
            1104034,
            1104035,
            1104036,
            1104037,
            1104038,
            1104039,
            1104040,
            1104041
      },
      new int[0],
      {1075000, 1075001, 1075002, 1075003, 1075004, 1075005, 1075006, 1075007, 1075008, 1075009, 1075010, 1075011, 1075012, 1075013},
      {
            1022500,
            1022501,
            1022502,
            1022503,
            1022504,
            1022505,
            1022506,
            1012900,
            1012901,
            1012902,
            1012903,
            1012904,
            1012905,
            1012906,
            1012907,
            1012908,
            1012909,
            1012910,
            1012911,
            1012912,
            1012913,
            1012914,
            1012915,
            1012916,
            1012917,
            1012918,
            1012919,
            1012920,
            1119019,
            1118017,
            1118016,
            1118015,
            1118014,
            1118013,
            1118012,
            1118011,
            1118010,
            1118004,
            1118003,
            1118002,
            1118001,
            1118000,
            1119018,
            1119017,
            1119016,
            1119015,
            1119014,
            1119013,
            1119012,
            1119011,
            1119010,
            1119004,
            1119003,
            1119002,
            1119001,
            1119000,
            1118019,
            1118018
      },
      {1114401, 1112916}
   };

   public static void LeaveCS(PacketDecoder slea, MapleClient c, MapleCharacter chr) {
      CashShopServer.getPlayerStorage().deregisterPlayer(chr);
      c.updateLoginState(1, c.getSessionIPAddress());

      try {
         Center.ChannelChange_Data(new CharacterTransfer(chr), chr.getId(), c.getChannel());
         c.getSession().writeAndFlush(CField.getChannelChange(c, Integer.parseInt(GameServer.getInstance(c.getChannel()).getIP().split(":")[1])));
      } finally {
         String s = c.getSessionIPAddress();
         LoginServer.addIPAuth(s.substring(s.indexOf(47) + 1, s.length()));
         chr.saveToDB(true, true);
         c.setPlayer(null);
         c.setReceiving(false);
      }
   }

   public static void EnterCS(int playerid, MapleClient c, boolean noGame) {
      CharacterTransfer transfer = CashShopServer.getPlayerStorage().getPendingCharacter(playerid);
      MapleCharacter chr = MapleCharacter.ReconstructChr(transfer, c, false);
      c.setPlayer(chr);
      c.setAccID(chr.getAccountID());
      if (c.CheckIPAddress()) {
         int state = c.getLoginState();
         boolean allowLogin = true;
         if (!allowLogin) {
            c.setPlayer(null);
         } else if (noGame) {
            c.updateLoginState(0, c.getSessionIPAddress());
            c.clearInformation();
            c.disconnect(false);
         } else {
            c.updateLoginState(2, c.getSessionIPAddress());
            CashShopServer.getPlayerStorage().registerPlayer(chr);
            c.getSession().writeAndFlush(CSPacket.stageSetCashShop(c));
            c.sendPing();
            CSUpdate(c);
            c.getSession().writeAndFlush(CSPacket.getCSInventory(c));
            if (ServerConstants.useAdminClient) {
               AdminClient.updatePlayerList();
            }
         }
      }
   }

   public static void CSUpdate(MapleClient c) {
      doCSPackets(c);
   }

   public static void CouponCode(String code, MapleClient c) {
      if (code.length() > 0) {
         Triple<Boolean, Integer, Integer> info = null;
         info = MapleCharacterUtil.getNXCodeInfo(code);
         if (info != null && info.left) {
            int type = info.mid;
            int item = info.right;
            if (type <= 4) {
               MapleCharacterUtil.setNXCodeUsed(c.getPlayer().getName(), code);
            } else if (type <= 8) {
               c.getPlayer().getOneInfoQuest(QuestExConstants.JinQuestExAccount.getQuestID(), "usedCSCoupon");
            }

            Map<Integer, Item> itemz = new HashMap<>();
            int maplePoints = 0;
            int mesos = 0;
            switch (type) {
               case 1:
               case 2:
                  c.getPlayer().modifyCSPoints(type, item, false);
                  maplePoints = item;
                  break;
               case 3:
                  CashItemInfo itez = CashItemFactory.getInstance().getItem(item, false);
                  if (itez == null) {
                     c.getSession().writeAndFlush(CSPacket.sendCSFail(0));
                     return;
                  }

                  byte slot = MapleInventoryManipulator.addId(
                     c, itez.getId(), (short)1, "", "Cash shop: coupon code on " + FileoutputUtil.CurrentReadable_Date()
                  );
                  if (slot <= -1) {
                     c.getSession().writeAndFlush(CSPacket.sendCSFail(0));
                     return;
                  }

                  itemz.put(item, c.getPlayer().getInventory(GameConstants.getInventoryType(item)).getItem(slot));
                  break;
               case 4:
                  c.getPlayer().gainMeso(item, false);
                  mesos = item;
            }

            c.getSession().writeAndFlush(CSPacket.showCouponRedeemedItem(itemz, mesos, maplePoints, c));
         } else if (info == null) {
            c.getPlayer().dropMessage(1, "존재하지 않는 쿠폰 번호입니다.");
         } else {
            c.getPlayer().dropMessage(1, "이미 사용된 쿠폰 번호 입니다.");
         }
      }
   }

   public static final void BuyCashItem(PacketDecoder slea, MapleClient c, MapleCharacter chr) {
      int action = slea.readByte();
      if (action == 0) {
         slea.skip(2);
         CouponCode(slea.readMapleAsciiString(), c);
      } else if (action == 68) {
         CashItemInfo item = CashItemFactory.getInstance().getItem(slea.readInt(), false);
         if (item != null && chr.getMeso() >= item.getPrice()) {
            if (!item.genderEquals(c.getPlayer().getGender())) {
               c.getSession().writeAndFlush(CSPacket.sendCSFail(166));
               doCSPackets(c);
               return;
            }

            if (c.getPlayer().getCashInventory().getItemsSize() >= 100) {
               c.getSession().writeAndFlush(CSPacket.sendCSFail(177));
               doCSPackets(c);
               return;
            }

            int itemID = item.getId();
            if (itemID == 1112916
               || itemID == 1112917
               || itemID / 1000 == 5533
               || itemID >= 1009000 && itemID <= 1009016
               || itemID == 5060048
               || itemID == 5068300
               || itemID == 5680157
               || itemID == 5680159
               || itemID == 5069100
               || itemID == 5069000
               || itemID == 5069001
               || itemID >= 9100000
                  && itemID <= 9109999
                  && (itemID < 9103072 || itemID > 9103074)
                  && itemID != 9103083
                  && itemID != 9102849
                  && itemID != 9102850
                  && (itemID < 9103330 || itemID > 9103333)
                  && (itemID < 9103783 || itemID > 9103786)
                  && itemID != 9104024
                  && itemID != 9104026
                  && itemID != 9102888
                  && itemID != 9102889
               || itemID == 5680196
               || itemID == 5680197
               || itemID == 5250500
               || itemID == 5680184
               || itemID == 5680185
               || itemID == 5450008
               || itemID == 5450006
               || itemID == 5450005
               || itemID == 5450004
               || itemID == 5044002
               || itemID == 5044001
               || itemID == 5044000
               || itemID == 5450007
               || itemID == 5450009
               || itemID == 5041001
               || itemID == 5450000
               || itemID == 5500000
               || itemID == 5500006
               || itemID == 5500005
               || itemID == 5521000
               || itemID == 5500002
               || itemID == 5500001
               || itemID == 5501001
               || itemID == 5501002
               || itemID == 5041000
               || itemID == 5502017
               || itemID == 5502009
               || itemID == 5502007
               || itemID == 5502006
               || itemID == 5041000
               || itemID == 5040000
               || itemID == 5062402
               || itemID == 5062400
               || itemID == 5150165
               || itemID == 5150114
               || itemID == 5150132
               || itemID == 5000484
               || itemID == 5000485
               || itemID == 5000486
               || itemID == 5000490
               || itemID == 9102849
               || itemID == 9102850
               || itemID == 5064000
               || itemID == 5064100
               || itemID == 5064300
               || itemID == 5050100
               || itemID == 5051001
               || itemID == 5064400
               || itemID == 5050000
               || itemID == 5050003
               || itemID == 5050004
               || itemID == 5050002
               || itemID == 5050001
               || itemID == 5502003
               || itemID == 5502002
               || itemID == 5502001
               || itemID == 5502000
               || itemID == 5072000
               || itemID == 5076000
               || itemID == 5390001
               || itemID == 5390002
               || itemID == 5072000
               || itemID == 5076000
               || itemID == 5077000
               || itemID == 5390001
               || itemID == 5390002
               || itemID == 5080001
               || itemID == 5071000
               || itemID == 5090000
               || itemID == 5330000
               || itemID == 5120006
               || itemID == 5121008
               || itemID == 5122000
               || itemID == 5121008
               || itemID == 5120006
               || itemID == 5120001
               || itemID == 5120002
               || itemID == 5121014
               || itemID == 2023177
               || itemID == 5680154
               || itemID == 2023179
               || itemID == 2023176
               || itemID == 2023178
               || itemID == 5152235
               || itemID == 5152091
               || itemID == 5152020
               || itemID == 5151035
               || itemID == 5151036
               || itemID == 5153015
               || itemID == 1142442
               || itemID == 1142443
               || itemID == 5530776
               || itemID == 5680222
               || itemID == 5680531
               || itemID == 5152107
               || itemID == 5152106
               || itemID == 5152105
               || itemID == 5152104
               || itemID == 5152103
               || itemID == 5152102
               || itemID == 5152101
               || itemID == 5152100
               || itemID == 5689000
               || itemID == 5190010
               || itemID == 5190011
               || itemID == 5190004
               || itemID == 5190001
               || itemID == 5190003
               || itemID == 5190006
               || itemID == 5191004
               || itemID == 5190000
               || itemID == 5190002
               || itemID == 5062010) {
               c.getPlayer().dropMessage(1, "해당 아이템은 캐시샵에서 구매가 불가능합니다.");
               doCSPackets(c);
               return;
            }

            boolean check = true;

            for (int[] r : jinList) {
               for (int jl : r) {
                  if (itemID == jl) {
                     check = false;
                     break;
                  }
               }
            }

            for (int[] r : royalList) {
               for (int jlx : r) {
                  if (itemID == jlx) {
                     check = false;
                     break;
                  }
               }
            }

            for (int jlxx : extremeList) {
               if (itemID == jlxx) {
                  check = false;
                  break;
               }
            }

            if (!check) {
               c.getPlayer().dropMessage(1, "해당 아이템은 캐시샵에서 구매가 불가능합니다.");
               doCSPackets(c);
               return;
            }

            for (int i : GameConstants.cashBlock) {
               if (item.getId() == i) {
                  c.getPlayer().dropMessage(1, "해당 아이템은 캐시샵에서 구매가 불가능합니다.");
                  doCSPackets(c);
                  return;
               }
            }

            if (item.getId() >= 1009000 && item.getId() <= 1009016 || item.getId() == 1114000) {
               c.getPlayer().dropMessage(1, "해당 아이템은 캐시샵에서 구매가 불가능합니다.");
               doCSPackets(c);
               return;
            }

            Item itemz = chr.getCashInventory().toItem(item);
            if (itemz != null && itemz.getUniqueId() > 0L && itemz.getItemId() == item.getId() && itemz.getQuantity() == item.getCount()) {
               chr.gainMeso(-item.getPrice(), false);
               chr.getCashInventory().addToInventory(itemz);
               StringBuilder sb = new StringBuilder();
               sb.append("캐시샵 아이템 메소 구매 (캐릭터 : ");
               sb.append(c.getPlayer().getName());
               sb.append(", 계정 : ");
               sb.append(c.getPlayer().getClient().getAccountName());
               sb.append(", 가격 : ");
               sb.append(item.getPrice());
               sb.append(" 메소)");
               LoggingManager.putLog(
                  new ItemLog(
                     c.getPlayer(),
                     c.getChannel(),
                     item.getId(),
                     item.getCount(),
                     c.getPlayer().getMapId(),
                     ConsumeLogType.CashShopMesoBuy.getType(),
                     0L,
                     0L,
                     sb
                  )
               );
               c.getSession().writeAndFlush(CSPacket.showBoughtCSItem(itemz, item.getSN(), c.getAccID()));
            } else {
               c.getSession().writeAndFlush(CSPacket.sendCSFail(0));
            }
         } else {
            c.getSession().writeAndFlush(CSPacket.sendCSFail(0));
         }
      } else if (action != 3) {
         if (action == 5) {
            chr.clearWishlist();
            if (slea.available() < 40L) {
               c.getSession().writeAndFlush(CSPacket.sendCSFail(0));
               doCSPackets(c);
               return;
            }

            int[] wishlist = new int[12];

            for (int ix = 0; ix < 12; ix++) {
               wishlist[ix] = slea.readInt();
            }

            chr.setWishlist(wishlist);
            c.getSession().writeAndFlush(CSPacket.sendWishList(chr, true));
         } else if (action == 6) {
            int toCharge = slea.readByte() + 1;
            int sn = slea.readInt();
            CashItemInfo item = CashItemFactory.getInstance().getItem(sn, false);
            if (item != null) {
               int incCount = 4;
               int price = item.getPrice();
               int type = 0;
               switch (item.getId()) {
                  case 9111000:
                     type = 1;
                     incCount = 8;
                     break;
                  case 9111004:
                     type = 1;
                     break;
                  case 9112000:
                     type = 2;
                     incCount = 8;
                     break;
                  case 9112004:
                     type = 2;
                     break;
                  case 9113000:
                     type = 3;
                     incCount = 8;
                     break;
                  case 9113004:
                     type = 3;
                     break;
                  case 9114000:
                     type = 4;
                     incCount = 8;
                     break;
                  case 9114004:
                     type = 4;
               }

               MapleInventoryType t = MapleInventoryType.getByType((byte)type);
               if (chr.getCSPoints(toCharge) >= price && chr.getInventory(t).getSlotLimit() < 128 - (incCount - 1)) {
                  chr.modifyCSPoints(toCharge, -price, false);
                  chr.getInventory(t).addSlot((byte)incCount);
                  chr.send(CSPacket.incSlotCountDone((byte)type, chr.getInventory(t).getSlotLimit()));
               } else {
                  chr.dropMessage(1, "슬롯을 더 이상 늘릴 수 없습니다.");
               }
            }
         } else if (action == 7) {
            int toCharge = slea.readByte() + 1;
            int sn = slea.readInt();
            CashItemInfo item = CashItemFactory.getInstance().getItem(sn, false);
            if (item != null) {
               int incSlot = 4;
               if (item.getId() == 9110000) {
                  incSlot = 8;
               }

               int price = item.getPrice();
               if (chr.getCSPoints(toCharge) >= price && chr.getStorage().getSlots() <= 128 - incSlot) {
                  chr.modifyCSPoints(toCharge, -price, false);
                  chr.getStorage().increaseSlots((byte)incSlot);
                  chr.send(CSPacket.incTrunkSlotCountDone((short)chr.getStorage().getSlots()));
               } else {
                  chr.dropMessage(1, "슬롯을 더 이상 늘릴 수 없습니다.");
               }
            }
         } else if (action == 8) {
            chr.dropMessage(1, "캐릭터 슬롯 늘리기는 캐시샵에서 구매할 수 없습니다.");
         } else if (action == 9) {
            int toCharge = slea.readByte() + 1;
            int sn = slea.readInt();
            CashItemInfo item = CashItemFactory.getInstance().getItem(sn, false);
            if (item == null || c.getPlayer().getCSPoints(toCharge) < item.getPrice() || item.getId() / 10000 != 555) {
               c.getSession().writeAndFlush(CSPacket.sendCSFail(0));
               doCSPackets(c);
               return;
            }

            MapleQuestStatus marr = c.getPlayer().getQuestNoAdd(MapleQuest.getInstance(122700));
            if (marr != null && marr.getCustomData() != null && Long.parseLong(marr.getCustomData()) >= System.currentTimeMillis()) {
               chr.dropMessage(1, "이미 펜던트 늘리기가 적용중입니다.");
               doCSPackets(c);
            } else {
               long days = 0L;
               if (item.getId() == 5550000) {
                  days = 30L;
               } else if (item.getId() == 5550001) {
                  days = 7L;
               }

               c.getPlayer()
                  .getQuestIfNullAdd(MapleQuest.getInstance(122700))
                  .setCustomData(String.valueOf(System.currentTimeMillis() + days * 24L * 60L * 60000L));
               chr.modifyCSPoints(toCharge, -item.getPrice(), false);
               c.getSession().writeAndFlush(CSPacket.buyPendantSlot((short)days));
            }
         } else if (action == 13) {
            Item itemx = c.getPlayer().getCashInventory().findByCashId(slea.readInt());
            if (itemx != null && itemx.getQuantity() > 0 && MapleInventoryManipulator.checkSpace(c, itemx.getItemId(), itemx.getQuantity(), itemx.getOwner())) {
               Item item_ = itemx.copy();
               short pos = MapleInventoryManipulator.addbyItem(c, item_, true);
               if (pos >= 0) {
                  if (item_.getPet() != null) {
                     item_.getPet().setInventoryPosition(pos);
                     c.getPlayer().addPet(item_.getPet());
                  }

                  c.getPlayer().getCashInventory().removeFromInventory(itemx);
                  c.getSession().writeAndFlush(CSPacket.confirmFromCSInventory(itemx, pos));
               } else {
                  c.getSession().writeAndFlush(CSPacket.sendCSFail(177));
               }
            } else {
               c.getSession().writeAndFlush(CSPacket.sendCSFail(177));
            }
         } else if (action == 14) {
            Item itemx = null;
            MapleInventory inv = null;
            short slot = -1;
            int uniqueid = slea.readInt();

            for (MapleInventory iv : c.getPlayer().getInventorys()) {
               itemx = iv.findByUniqueId(uniqueid);
               if (itemx != null) {
                  slot = itemx.getPosition();
                  inv = iv;
                  break;
               }
            }

            if (itemx != null) {
               if (itemx.getPet() != null) {
                  if (itemx.getPet().getWonderGrade() > 0 && itemx.getExpiration() - System.currentTimeMillis() < 864000000L) {
                     c.getPlayer().dropMessage(1, "해당 아이템은 이동할 수 없습니다.");
                     doCSPackets(c);
                     return;
                  }

                  if (itemx.getItemId() == 5002239) {
                     c.getPlayer().dropMessage(1, "해당 아이템은 이동할 수 없습니다.");
                     doCSPackets(c);
                     return;
                  }
               }

               c.getPlayer().getCashInventory().addToInventory(itemx);
               c.getSession().writeAndFlush(CSPacket.confirmToCSInventory(itemx, c.getAccID(), -1));
               if (itemx.getPet() != null) {
                  c.getPlayer().removePet(itemx.getPet(), false);
               }

               inv.removeSlot(slot);
            } else {
               c.getSession().writeAndFlush(CSPacket.sendCSFail(177));
            }
         } else if (action == 34) {
            int toChargex = slea.readByte() + 1;
            CashItemInfo itemx = CashItemFactory.getInstance().getItem(slea.readInt(), false);
            List<Integer> ccc = null;
            if (itemx != null) {
               ccc = CashItemFactory.getInstance().getPackageItems(itemx.getId());
            }

            if (itemx == null || ccc == null || c.getPlayer().getCSPoints(toChargex) < itemx.getPrice()) {
               c.getSession().writeAndFlush(CSPacket.sendCSFail(3));
               doCSPackets(c);
               return;
            }

            if (!itemx.genderEquals(c.getPlayer().getGender())) {
               c.getSession().writeAndFlush(CSPacket.sendCSFail(11));
               doCSPackets(c);
               return;
            }

            if (c.getPlayer().getCashInventory().getItemsSize() >= 100 - ccc.size()) {
               c.getSession().writeAndFlush(CSPacket.sendCSFail(24));
               doCSPackets(c);
               return;
            }

            for (int iz : GameConstants.cashBlock) {
               if (itemx.getId() == iz) {
                  c.getPlayer().dropMessage(1, GameConstants.getCashBlockedMsg(itemx.getId()));
                  doCSPackets(c);
                  return;
               }
            }

            Map<Integer, Item> ccz = new HashMap<>();

            for (int ix : ccc) {
               CashItemInfo cii = CashItemFactory.getInstance().getSimpleItem(ix);
               if (cii != null) {
                  Item itemz = c.getPlayer().getCashInventory().toItem(cii);
                  if (itemz != null && itemz.getUniqueId() > 0L) {
                     for (int izx : GameConstants.cashBlock) {
                        if (itemz.getItemId() == izx) {
                           c.getPlayer().dropMessage(1, GameConstants.getCashBlockedMsg(itemx.getId()));
                           doCSPackets(c);
                           return;
                        }
                     }

                     ccz.put(ix, itemz);
                  }
               }
            }

            StringBuilder sb = new StringBuilder();
            sb.append("캐시샵 패키지 아이템 캐시 구매 (캐릭터 : ");
            sb.append(c.getPlayer().getName());
            sb.append(", 계정 : ");
            sb.append(c.getPlayer().getClient().getAccountName());
            sb.append(", 가격 : ");
            sb.append(itemx.getPrice());
            sb.append(" 캐시(type:");
            sb.append(toChargex);
            sb.append(", 아이템 리스트 : ");

            for (Item itemsa : ccz.values()) {
               c.getPlayer().getCashInventory().addToInventory(itemsa);
               sb.append("[");
               sb.append(itemsa.getItemId());
               sb.append("]");
            }

            sb.append(")");
            LoggingManager.putLog(
               new ItemLog(
                  c.getPlayer(),
                  c.getChannel(),
                  itemx.getId(),
                  itemx.getCount(),
                  c.getPlayer().getMapId(),
                  ConsumeLogType.CashShopCashBuy.getType(),
                  0L,
                  0L,
                  sb
               )
            );
            chr.modifyCSPoints(toChargex, -itemx.getPrice(), false);
            c.getSession().writeAndFlush(CSPacket.showBoughtCSPackage(ccz, c.getAccID()));
         } else if (action == 51) {
            int snx = slea.readInt();
            int purchasedCount = 0;
            c.getSession().writeAndFlush(CSPacket.updatePurchaseRecord(snx, purchasedCount));
         } else if (action == 64) {
            long uniqueid = slea.readLong();
            CashShop csinv = chr.getCashInventory();
            Item itemxx = csinv.findByCashId((int)uniqueid);
            if (itemxx == null) {
               c.getPlayer().dropMessage(1, "오류가 발생했습니다! 해당 캐시아이템을 발견하지 못했습니다. GM에게 문의해 주세요.");
               c.getSession().writeAndFlush(CSPacket.showNXMapleTokens(chr));
               return;
            }

            CashItemInfo.CSRand oreward = CSPacket.csrand.get(itemxx.getItemId());
            if (oreward == null) {
               c.getSession().writeAndFlush(CSPacket.showNXMapleTokens(chr));
               return;
            }

            int reward = 0;
            int rewardsn = oreward.items[Randomizer.nextInt(oreward.items.length)];
            CashItemInfo rewarditemstat = CashItemFactory.getInstance().getItem(rewardsn, true);
            if (rewarditemstat != null) {
               reward = rewarditemstat.getId();
            }

            if (reward != 0) {
               Item tem = null;
               if (GameConstants.isEquip(reward)) {
                  Equip equip = new Equip(reward, (short)1, (byte)0);
                  tem = equip.copy();
               }

               if (chr.getCashInventory() == null || itemxx == null) {
                  c.getSession().writeAndFlush(CWvsContext.serverNotice(1, "캐시아이템을 구매하는 도중에 오류가 발생하였습니다!"));
                  return;
               }

               if (tem == null) {
                  c.getSession().writeAndFlush(CWvsContext.serverNotice(1, "캐시아이템을 구매하는 도중에 오류가 발생하였습니다!"));
                  return;
               }

               short pos = MapleInventoryManipulator.addbyItem(c, tem, true);
               if (pos == -1) {
                  c.getPlayer().dropMessage(1, "아이템을 넣을 공간이 부족합니다.");
                  c.getSession().writeAndFlush(CSPacket.showNXMapleTokens(chr));
                  return;
               }

               c.getPlayer().getCashInventory().removeFromInventory(itemxx);
               c.getSession().writeAndFlush(CSPacket.sendRandomBox(uniqueid, tem, pos));
            } else {
               c.getSession().writeAndFlush(CWvsContext.serverNotice(1, "정의되지 않은 상자입니다."));
            }
         } else {
            System.out.println("New Action: " + action + " Remaining: " + slea.toString());
            c.getSession().writeAndFlush(CSPacket.sendCSFail(0));
         }
      } else {
         int toChargexx = slea.readByte() + 1;
         slea.skip(1);
         slea.skip(1);
         CashItemInfo itemxxx = CashItemFactory.getInstance().getItem(slea.readInt(), false);
         if (itemxxx != null && chr.getCSPoints(toChargexx) >= itemxxx.getPrice()) {
            if (c.getPlayer().getCashInventory().getItemsSize() >= 128) {
               c.getSession().writeAndFlush(CSPacket.sendCSFail(177));
               doCSPackets(c);
               return;
            }

            int itemIDx = itemxxx.getId();
            if (itemIDx == 1119216
               || itemIDx == 1112917
               || itemIDx / 1000 == 5533
               || itemIDx >= 1009000 && itemIDx <= 1009016
               || itemIDx == 5060048
               || itemIDx == 5068300
               || itemIDx == 5680157
               || itemIDx == 5680159
               || itemIDx == 5069100
               || itemIDx == 5069000
               || itemIDx == 5069001
               || itemIDx >= 9100000
                  && itemIDx <= 9109999
                  && (itemIDx < 9103072 || itemIDx > 9103074)
                  && itemIDx != 9103083
                  && itemIDx != 9102849
                  && itemIDx != 9102850
                  && (itemIDx < 9103330 || itemIDx > 9103333)
                  && (itemIDx < 9103783 || itemIDx > 9103786)
                  && itemIDx != 9104024
                  && itemIDx != 9104026
                  && itemIDx != 9102888
                  && itemIDx != 9102889
               || itemIDx == 5680196
               || itemIDx == 5680197
               || itemIDx == 5250500
               || itemIDx == 5680184
               || itemIDx == 5680185
               || itemIDx == 5450008
               || itemIDx == 5450006
               || itemIDx == 5450005
               || itemIDx == 5450004
               || itemIDx == 5044002
               || itemIDx == 5044001
               || itemIDx == 5044000
               || itemIDx == 5450007
               || itemIDx == 5450009
               || itemIDx == 5041001
               || itemIDx == 5450000
               || itemIDx == 5500000
               || itemIDx == 5500006
               || itemIDx == 5500005
               || itemIDx == 5521000
               || itemIDx == 5500002
               || itemIDx == 5500001
               || itemIDx == 5501001
               || itemIDx == 5501002
               || itemIDx == 5041000
               || itemIDx == 5502017
               || itemIDx == 5502009
               || itemIDx == 5502007
               || itemIDx == 5502006
               || itemIDx == 5041000
               || itemIDx == 5040000
               || itemIDx == 5062402
               || itemIDx == 5062400
               || itemIDx == 5150165
               || itemIDx == 5150114
               || itemIDx == 5150132
               || itemIDx == 5000484
               || itemIDx == 5000485
               || itemIDx == 5000486
               || itemIDx == 5000490
               || itemIDx == 9102849
               || itemIDx == 9102850
               || itemIDx == 5064000
               || itemIDx == 5064100
               || itemIDx == 5064300
               || itemIDx == 5050100
               || itemIDx == 5051001
               || itemIDx == 5064400
               || itemIDx == 5050000
               || itemIDx == 5050003
               || itemIDx == 5050004
               || itemIDx == 5050002
               || itemIDx == 5050001
               || itemIDx == 5502003
               || itemIDx == 5502002
               || itemIDx == 5502001
               || itemIDx == 5502000
               || itemIDx == 5072000
               || itemIDx == 5076000
               || itemIDx == 5390001
               || itemIDx == 5390002
               || itemIDx == 5072000
               || itemIDx == 5076000
               || itemIDx == 5077000
               || itemIDx == 5390001
               || itemIDx == 5390002
               || itemIDx == 5080001
               || itemIDx == 5071000
               || itemIDx == 5090000
               || itemIDx == 5330000
               || itemIDx == 5120006
               || itemIDx == 5121008
               || itemIDx == 5122000
               || itemIDx == 5121008
               || itemIDx == 5120006
               || itemIDx == 5120001
               || itemIDx == 5120002
               || itemIDx == 5121014
               || itemIDx == 2023177
               || itemIDx == 5680154
               || itemIDx == 2023179
               || itemIDx == 2023176
               || itemIDx == 2023178
               || itemIDx == 5152235
               || itemIDx == 5152091
               || itemIDx == 5152020
               || itemIDx == 5151035
               || itemIDx == 5151036
               || itemIDx == 5153015
               || itemIDx == 1142442
               || itemIDx == 1142443
               || itemIDx == 5530776
               || itemIDx == 5680222
               || itemIDx == 5680531
               || itemIDx == 5152107
               || itemIDx == 5152106
               || itemIDx == 5152105
               || itemIDx == 5152104
               || itemIDx == 5152103
               || itemIDx == 5152102
               || itemIDx == 5152101
               || itemIDx == 5152100
               || itemIDx == 5689000
               || itemIDx == 5190010
               || itemIDx == 5190011
               || itemIDx == 5190004
               || itemIDx == 5190001
               || itemIDx == 5190003
               || itemIDx == 5190006
               || itemIDx == 5191004
               || itemIDx == 5190000
               || itemIDx == 5190002) {
               c.getPlayer().dropMessage(1, "해당 아이템은 캐시샵에서 구매가 불가능합니다.");
               doCSPackets(c);
               return;
            }

            boolean check = true;

            for (int[] r : jinList) {
               for (int jlxxx : r) {
                  if (itemIDx == jlxxx) {
                     check = false;
                     break;
                  }
               }
            }

            for (int[] r : royalList) {
               for (int jlxxxx : r) {
                  if (itemIDx == jlxxxx) {
                     check = false;
                     break;
                  }
               }
            }

            for (int jlxxxxx : extremeList) {
               if (itemIDx == jlxxxxx) {
                  check = false;
                  break;
               }
            }

            if (!check) {
               c.getPlayer().dropMessage(1, "해당 아이템은 캐시샵에서 구매가 불가능합니다.");
               doCSPackets(c);
               return;
            }

            for (int ixx : GameConstants.cashBlock) {
               if (itemxxx.getId() == ixx) {
                  c.getPlayer().dropMessage(1, "해당 아이템은 캐시샵에서 구매가 불가능합니다.");
                  doCSPackets(c);
                  return;
               }
            }

            if (itemxxx.getId() >= 1009000 && itemxxx.getId() <= 1009016 || itemxxx.getId() == 1114000) {
               c.getPlayer().dropMessage(1, "해당 아이템은 캐시샵에서 구매가 불가능합니다.");
               doCSPackets(c);
               return;
            }

            chr.modifyCSPoints(toChargexx, -itemxxx.getPrice(), false);
            Item itemz = chr.getCashInventory().toItem(itemxxx);
            if (itemz != null && itemz.getUniqueId() > 0L && itemz.getItemId() == itemxxx.getId() && itemz.getQuantity() == itemxxx.getCount()) {
               if (toChargexx == 1 && itemz.getType() == 1) {
                  itemz.setFlag((short)ItemFlag.KARMA_EQ.getValue());
               } else if (toChargexx == 1 && itemz.getType() != 1) {
                  itemz.setFlag((short)ItemFlag.CHARM_EQUIPPED.getValue());
               }

               chr.getCashInventory().addToInventory(itemz);
               if (itemxxx.getPrice() > 0) {
                  StringBuilder sb = new StringBuilder();
                  sb.append("캐시샵 아이템 캐시 구매 (캐릭터 : ");
                  sb.append(c.getPlayer().getName());
                  sb.append(", 계정 : ");
                  sb.append(c.getPlayer().getClient().getAccountName());
                  sb.append(", 가격 : ");
                  sb.append(itemxxx.getPrice());
                  sb.append(" 캐시(type:");
                  sb.append(toChargexx);
                  sb.append(")");
                  LoggingManager.putLog(
                     new ItemLog(
                        c.getPlayer(),
                        c.getChannel(),
                        itemxxx.getId(),
                        itemxxx.getCount(),
                        c.getPlayer().getMapId(),
                        ConsumeLogType.CashShopCashBuy.getType(),
                        0L,
                        0L,
                        sb
                     )
                  );
               }

               c.getSession().writeAndFlush(CSPacket.showBoughtCSItem(itemz, itemxxx.getSN(), c.getAccID()));
            } else {
               c.getSession().writeAndFlush(CSPacket.sendCSFail(0));
            }
         } else {
            c.getSession().writeAndFlush(CSPacket.sendCSFail(0));
         }
      }

      c.getSession().writeAndFlush(CSPacket.showNXMapleTokens(c.getPlayer()));
   }

   public static final void doCSPackets(MapleClient c) {
      c.getSession().writeAndFlush(CSPacket.showNXMapleTokens(c.getPlayer()));
      c.getPlayer().getCashInventory().checkExpire(c);
   }

   public static void NxCharge(MapleClient c) {
      if (DBConfig.isGanglim) {
         c.getSession().writeAndFlush(CWvsContext.serverNotice(1, "포인트 충전은\r\n[상점] - [소비 상점] 메이플 포인트를 이용해주세요."));
      } else {
         c.getSession().writeAndFlush(CWvsContext.serverNotice(1, "현재 사용할 수 없는 기능입니다."));
      }

      c.getSession().writeAndFlush(CSPacket.sendCSFail(0));
      c.getSession().writeAndFlush(CSPacket.showNXMapleTokens(c.getPlayer()));
   }
}
