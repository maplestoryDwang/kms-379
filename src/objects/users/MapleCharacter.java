package objects.users;

import com.google.common.collect.UnmodifiableIterator;
import constants.ArcaneStoryQuests;
import constants.AutoHottimeEntry;
import constants.AutoHottimeManager;
import constants.DailyQuests;
import constants.GameConstants;
import constants.HexaMatrixConstants;
import constants.QuestExConstants;
import constants.ServerConstants;
import constants.StoryQuests;
import constants.WeeklyQuests;
import constants.devtempConstants.MapleDailyGiftInfo;
import constants.devtempConstants.MapleFishing;
import database.DBConfig;
import database.DBConnection;
import database.loader.CharacterLoader;
import database.loader.CharacterSaveFlag;
import database.loader.CharacterSaveFlag2;
import database.loader.ItemLoader;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.image.BufferedImage;
import java.io.Serializable;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Savepoint;
import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.EnumMap;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.Timer;
import java.util.Map.Entry;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.stream.Collectors;
import logging.LoggingManager;
import logging.entry.CabinetLog;
import logging.entry.CabinetLogType;
import logging.entry.CustomLog;
import logging.entry.MacroLog;
import logging.entry.TransferFieldLog;
import network.SendPacketOpcode;
import network.Start;
import network.center.AccountIdChannelPair;
import network.center.Center;
import network.center.CharacterTransfer;
import network.center.PlayerBuffStorage;
import network.decode.PacketDecoder;
import network.encode.PacketEncoder;
import network.game.GameServer;
import network.game.processors.HyperHandler;
import network.login.LoginInformationProvider;
import network.models.CField;
import network.models.CSPacket;
import network.models.CWvsContext;
import network.models.GuildContents;
import network.models.MobPacket;
import network.models.PacketHelper;
import network.models.PetPacket;
import network.models.PlayerShopPacket;
import network.shop.CashShop;
import objects.androids.Android;
import objects.context.ExpIncreaseInfo;
import objects.context.ReportLogEntry;
import objects.context.friend.Friend;
import objects.context.guild.Guild;
import objects.context.guild.GuildCharacter;
import objects.context.guild.GuildContentsType;
import objects.context.messenger.Messenger;
import objects.context.messenger.MessengerCharacter;
import objects.context.party.Party;
import objects.context.party.PartyMemberEntry;
import objects.context.party.PartyOperation;
import objects.effect.EffectHeader;
import objects.effect.NormalEffect;
import objects.effect.child.ChangeJob;
import objects.effect.child.HPHeal;
import objects.effect.child.PostSkillAffected;
import objects.effect.child.SkillEffect;
import objects.effect.child.SpecialSkillEffect;
import objects.effect.child.UseCharmEffect;
import objects.fields.AllowedDirectionFieldMan;
import objects.fields.AnimatedMapleMapObject;
import objects.fields.CustomChair;
import objects.fields.Event_PyramidSubway;
import objects.fields.Field;
import objects.fields.FieldLimitType;
import objects.fields.ForceAtom;
import objects.fields.HundredBingo;
import objects.fields.MapleFoothold;
import objects.fields.MapleMapFactory;
import objects.fields.MapleMapObject;
import objects.fields.MapleMapObjectType;
import objects.fields.Portal;
import objects.fields.RandomPortal;
import objects.fields.RandomPortalGameType;
import objects.fields.SavedLocationType;
import objects.fields.SecondAtom;
import objects.fields.child.demian.Field_Demian;
import objects.fields.child.jinhillah.Field_JinHillah;
import objects.fields.child.moonbridge.Field_FerociousBattlefield;
import objects.fields.child.muto.HungryMuto;
import objects.fields.child.papulatus.Field_Papulatus;
import objects.fields.child.union.Field_Union;
import objects.fields.child.union.MapleUnion;
import objects.fields.child.union.MapleUnionConstants;
import objects.fields.child.union.MapleUnionData;
import objects.fields.child.union.MapleUnionEntry;
import objects.fields.child.union.UnionCardData;
import objects.fields.child.union.UnionRankData;
import objects.fields.child.yutagolden.Field_YutaGolden;
import objects.fields.fieldset.instance.HellBlackHeavenBoss;
import objects.fields.fieldset.instance.HellDemianBoss;
import objects.fields.fieldset.instance.HellDunkelBoss;
import objects.fields.fieldset.instance.HellLucidBoss;
import objects.fields.fieldset.instance.HellWillBoss;
import objects.fields.gameobject.AffectedArea;
import objects.fields.gameobject.Dragon;
import objects.fields.gameobject.Extractor;
import objects.fields.gameobject.OpenGate;
import objects.fields.gameobject.TownPortal;
import objects.fields.gameobject.lifes.MapleLifeFactory;
import objects.fields.gameobject.lifes.MapleMonster;
import objects.fields.gameobject.lifes.MapleNPC;
import objects.fields.gameobject.lifes.MobTemporaryStatEffect;
import objects.fields.gameobject.lifes.MobTemporaryStatFlag;
import objects.fields.gameobject.lifes.Spawns;
import objects.fields.gameobject.lifes.mobskills.AffectedOtherSkill;
import objects.fields.gameobject.lifes.mobskills.MobSkillFactory;
import objects.fields.gameobject.lifes.mobskills.MobSkillID;
import objects.fields.gameobject.lifes.mobskills.MobSkillInfo;
import objects.fields.gameobject.lifes.mobskills.MobSkillStat;
import objects.item.BlackRebirthFlame;
import objects.item.CustomItem;
import objects.item.DamageSkinSaveData;
import objects.item.DamageSkinSaveInfo;
import objects.item.Equip;
import objects.item.IntensePowerCrystal;
import objects.item.IntensePowerCrystalData;
import objects.item.InventoryOperation;
import objects.item.Item;
import objects.item.ItemPot;
import objects.item.MapleInventory;
import objects.item.MapleInventoryIdentifier;
import objects.item.MapleInventoryManipulator;
import objects.item.MapleInventoryType;
import objects.item.MapleItemInformationProvider;
import objects.item.MapleMount;
import objects.item.MaplePet;
import objects.item.MapleRing;
import objects.item.MapleWeaponType;
import objects.item.StructSetItem;
import objects.movepath.LifeMovementFragment;
import objects.quest.MapleQuest;
import objects.quest.MapleQuestStatus;
import objects.quest.MobQuest;
import objects.quest.QuestEx;
import objects.quest.WeeklyQuest;
import objects.shop.IMaplePlayerShop;
import objects.shop.MapleShop;
import objects.summoned.SummonMoveAbility;
import objects.summoned.Summoned;
import objects.users.achievement.Achievement;
import objects.users.achievement.AchievementEntry;
import objects.users.achievement.AchievementFactory;
import objects.users.achievement.AchievementGrade;
import objects.users.achievement.AchievementInsigniaEntry;
import objects.users.achievement.AchievementMissionStatus;
import objects.users.enchant.BonusStat;
import objects.users.enchant.BonusStatPlaceType;
import objects.users.enchant.EquipEnchantScroll;
import objects.users.enchant.InnocentFlag;
import objects.users.enchant.ItemFlag;
import objects.users.enchant.ItemStateFlag;
import objects.users.enchant.skilloption.SkillOption;
import objects.users.enchant.skilloption.SocketEntry;
import objects.users.extra.ExtraAbilityGrade;
import objects.users.extra.ExtraAbilityOption;
import objects.users.extra.ExtraAbilityStatEntry;
import objects.users.jobs.BasicJob;
import objects.users.jobs.CommonJob;
import objects.users.jobs.adventure.magician.DefaultMagician;
import objects.users.jobs.nova.Kain;
import objects.users.jobs.resistance.WildHunterInfo;
import objects.users.looks.mannequin.Mannequin;
import objects.users.looks.mannequin.MannequinType;
import objects.users.looks.zero.ZeroInfo;
import objects.users.potential.CharacterPotentialHolder;
import objects.users.skills.CrystalGate;
import objects.users.skills.DarkLigntningEntry;
import objects.users.skills.ExtraSkillInfo;
import objects.users.skills.IndieTemporaryStatEntry;
import objects.users.skills.JupiterThunder;
import objects.users.skills.KainStackSkill;
import objects.users.skills.LinkSkill;
import objects.users.skills.LinkSkillEntry;
import objects.users.skills.PsychicArea;
import objects.users.skills.PsychicLock;
import objects.users.skills.SecondAtomData;
import objects.users.skills.Skill;
import objects.users.skills.SkillAlarm;
import objects.users.skills.SkillEncode;
import objects.users.skills.SkillEntry;
import objects.users.skills.SkillFactory;
import objects.users.skills.SkillMacro;
import objects.users.skills.VCore;
import objects.users.skills.VCoreData;
import objects.users.skills.VMatrixSlot;
import objects.users.skills.VSpecialCoreOption;
import objects.users.skills.WeaponvVrietyFlag;
import objects.users.stats.Flag992;
import objects.users.stats.HexaCore;
import objects.users.stats.HyperStat;
import objects.users.stats.SecondaryStat;
import objects.users.stats.SecondaryStatEffect;
import objects.users.stats.SecondaryStatFlag;
import objects.users.stats.SecondaryStatManager;
import objects.users.stone.ImprintedStoneOption;
import objects.utils.Annotation;
import objects.utils.ArrayMap;
import objects.utils.CurrentTime;
import objects.utils.FileoutputUtil;
import objects.utils.HexTool;
import objects.utils.Pair;
import objects.utils.Randomizer;
import objects.utils.Rect;
import objects.utils.StringUtil;
import objects.utils.Triple;
import scripting.EventInstanceManager;
import scripting.NPCScriptManager;
import scripting.newscripting.ScriptEngineNPC;
import scripting.newscripting.ScriptManager;
import security.anticheat.CheatTracker;
import security.anticheat.ReportType;

public class MapleCharacter extends AnimatedMapleMapObject implements Serializable {
   private static final long serialVersionUID = 845748950829L;
   private short job;
   public int smashStack;
   public int arcaneAim = 0;
   public int bosstier = 0;
   private int tier = 0;
   private SecondaryStat secondaryStat = new SecondaryStat(this);
   private List<Integer> dreamsEscapeCount = new ArrayList<>();
   private transient Field map;
   private String name;
   private String chalktext;
   private String BlessOfFairy_Origin;
   private String BlessOfEmpress_Origin;
   private String teleportname;
   private long exp;
   private long meso;
   private long lastCombo;
   private long lastfametime;
   private long keydown_skill;
   private long nextConsume;
   private long pqStartTime;
   private long lastBerserkTime;
   private long lastRecoveryTime;
   private long lastSummonTime;
   private long mapChangeTime;
   private long lastFairyTime;
   private long lastExceedTime;
   private long lastHPTime;
   private long lastMPTime;
   private long lastDOTTime;
   private long monsterComboTime = 0L;
   private long createDate;
   private long lastLoggedinDate;
   private long todayLoggedinDate;
   private byte gmLevel;
   private byte gender;
   private byte secondgender;
   private byte initialSpawnPoint;
   private byte secondSkinColor;
   private byte guildrank = 5;
   private byte allianceRank = 5;
   private byte cardStack;
   private byte runningStack;
   private byte wolfscore;
   private byte sheepscore;
   private byte pandoraBoxFever;
   private byte world;
   private byte fairyExp;
   private byte subcategory;
   private byte blessOfDarkness;
   private byte zeroequip = 0;
   private byte energybuff;
   private short level;
   private short mulung_energy;
   private short combo;
   private short force;
   private short availableCP;
   private short fatigue;
   private short totalCP;
   private short hpApUsed;
   private short remainingAp;
   private short scrolledPosition;
   private short xenonSurplus;
   private short exceed;
   private short exceedAttack;
   private short soulCount;
   private short monsterCombo = 0;
   private short linkedZeroSlot = 0;
   private short forcingItem = 0;
   private int multiKillCount;
   private int accountid;
   private int id;
   private int hair;
   private int basecolor = -1;
   private int addcolor;
   private int baseprob;
   private int secondhair;
   private int face;
   private int secondface;
   private int secondBaseColor = -1;
   private int secondAddColor;
   private int secondBaseProb;
   private int demonMarking;
   private int mapid;
   private int fame;
   private int pvpExp;
   private int pvpPoints;
   private int totalWins;
   private int totalLosses;
   private int guildid = 0;
   private int fallcounter;
   private int maplepoints;
   private int nxcredit;
   private int acash;
   private int chair;
   private int itemEffect;
   private int points;
   private int realCash;
   private int extremeRealCash;
   private int getExtremeRealCash;
   private int extremeLevelPoint;
   private int itcafetime;
   private int rank = 1;
   private int rankMove = 0;
   private int jobRank = 1;
   private int jobRankMove = 0;
   private int marriageId;
   private int marriageItemId;
   private int dotHP;
   private int innerExp;
   private int innerLevel;
   private int coconutteam;
   private int followid;
   private int battleshipHP;
   private int challenge;
   private int guildContribution = 0;
   private int todayContribution = 0;
   private int storageNpc = 0;
   private int TouchedRune;
   private int skinColor;
   private int faceBaseColor;
   private int faceAddColor;
   private int faceBaseProb;
   private int secondFaceBaseColor;
   private int secondFaceAddColor;
   private int secondFaceBaseProb = 0;
   private long lastRuneStoneUseTime = 0L;
   private int comboBuffStack = 0;
   private int wp = 0;
   private Point old;
   private int[] rocks;
   private int[] savedLocations;
   private int[] regrocks;
   private int[] hyperrocks;
   private int[] remainingSp = new int[10];
   private int[] wishlist = new int[12];
   private List<Integer> auctionWishList = new ArrayList<>();
   private transient AtomicInteger inst;
   private transient AtomicInteger insd;
   private transient List<LifeMovementFragment> lastres;
   private List<Integer> lastmonthfameids;
   private List<Integer> lastmonthbattleids;
   private List<Integer> cashwishlist = new ArrayList<>();
   public Map<Byte, List<Integer>> extendedSlots;
   private List<TownPortal> doors;
   private List<OpenGate> mechDoors;
   private List<VCore> vcoreSkills = new ArrayList<>();
   private List<VMatrixSlot> vmatrixSlots = new ArrayList<>();
   private Pair<Integer, Integer> equippedSpecialCore = null;
   private int spAttackCountMobId = 0;
   private int spCount = 0;
   private long spLastValidTime = 0L;
   public MaplePet[] pets = new MaplePet[3];
   private List<Item> rebuy;
   private List<CharacterPotentialHolder> innerSkills;
   private List<CharacterPotentialHolder> lastMiracleCirculator = new ArrayList<>();
   private ItemPot[] itemPots;
   private List<Pair<Integer, Integer>> stolenSkills = new ArrayList<>();
   private transient Set<MapleMonster> controlled;
   private transient Set<MapleMapObject> visibleMapObjects;
   private transient ReentrantReadWriteLock visibleMapObjectsLock;
   private transient ReentrantReadWriteLock summonsLock;
   private transient ReentrantReadWriteLock controlledLock;
   private transient Android android;
   private Map<MapleQuest, MapleQuestStatus> quests;
   private Map<Integer, QuestEx> questinfo;
   private Map<String, String> custominfo;
   private Map<Integer, MobCollectionEx> collectionInfo;
   private Map<Skill, SkillEntry> skills;
   private List<Item> symbols = new ArrayList<>();
   private transient Map<Integer, Integer> customValue = null;
   public transient List<Summoned> summons;
   private transient ConcurrentHashMap<Integer, MapleCoolDownValueHolder> coolDowns;
   private transient Map<SecondaryStatFlag, MapleDiseaseValueHolder> diseases;
   private Map<ReportType, Integer> reports;
   private CashShop cs;
   private Friend buddylist;
   private transient CheatTracker anticheat;
   private MapleClient client;
   private transient Party party;
   private PlayerStats stats;
   private transient boolean ccByScript;
   private transient MapleShop shop;
   private transient long shopTime = 0L;
   private transient Dragon dragon;
   private transient Extractor extractor;
   private transient RockPaperScissors rps;
   private MapleStorage storage;
   private transient MapleTrade trade;
   private MapleMount mount;
   private Messenger messenger;
   private transient IMaplePlayerShop playerShop;
   private boolean invincible;
   private boolean canTalk;
   private boolean clone;
   private boolean followinitiator;
   private boolean followon;
   private boolean smega;
   private boolean hasSummon;
   public boolean petLoot;
   private GuildCharacter mgc;
   private transient EventInstanceManager eventInstance;
   private MapleInventory[] inventory;
   private SkillMacro[] skillMacros = new SkillMacro[5];
   private Map<MapleTrait.MapleTraitType, MapleTrait> traits;
   private MapleKeyLayout[] keylayout = new MapleKeyLayout[3];
   private transient ScheduledFuture<?> mapTimeLimitTask;
   private transient ScheduledFuture<?> itcafetimer;
   private transient ScheduledFuture<?> LastTouchedRune;
   private transient Event_PyramidSubway pyramidSubway = null;
   private transient List<Integer> pendingExpiration = null;
   private transient Map<Skill, SkillEntry> pendingSkills = null;
   private transient Map<Integer, Integer> linkMobs;
   private int saveFlag = 0;
   private int saveFlag2 = 0;
   private boolean fishing = false;
   private String curDirection;
   private Timer DFRecoveryTimer;
   private int reborns;
   private int apstorage;
   public int quiverFullBurstCount = 0;
   public int changeType;
   public boolean pvp = false;
   public boolean isTrade = false;
   public boolean isCatching = false;
   public boolean isCatched = false;
   public boolean isWolfShipWin = false;
   public Equip memorialCube = null;
   public int memorialCubeItemID = 0;
   public Equip returnScroll = null;
   private BlackRebirthFlame blackRebirthFlame = null;
   private PsychicLock psychicLock;
   private List<PsychicArea> psychicAreas = new LinkedList<>();
   private AtomicInteger psychicAreaIdx = new AtomicInteger(1);
   private int activePsychicAreaCount = 1;
   public boolean isFinalFiguration = false;
   private String chairText = null;
   private long mesoChairCount = 0L;
   private long maxMesoChairCount = 0L;
   private transient ScheduledFuture<?> mesoChairTask = null;
   private transient ScheduledFuture<?> ChairTask = null;
   private int dressUp_Clothe = 0;
   private int zeroLinkCashPart = 0;
   private boolean dressUp = false;
   private int defaultWingItem = 0;
   private int stylishKillSkin = 0;
   private Map<String, String> CustomValues = new HashMap<>();
   private Map<String, Integer> CustomValues2 = new HashMap<>();
   private int hongboPoint = 0;
   private int tsdPoint = 0;
   private int tsdTotalPoint = 0;
   private int tsPoint = 0;
   private int killingPoint = 0;
   private int bmDeathCount = 0;
   private long lastUsePanicSkill = 0L;
   private boolean battleRecordOnCalc = false;
   private int bodyOfSteal = 0;
   private Map<Integer, Long> skillStartTime = new HashMap<>();
   private String macAddress = "";
   private int killPoint = 0;
   private long lastUseArrowRain = 0L;
   private int slowAttackCount = 0;
   private int readyToDie = 0;
   private ScheduledFuture<?> stimulateTask = null;
   private int viperEnergyCharge = 0;
   private int viperEnergyOrb = 0;
   private int autoChargeStack = 0;
   private int blackJackCount = 0;
   private int howlingGaleCount = 0;
   private ScheduledFuture<?> fishingTask = null;
   private long lastFishingTime = 0L;
   private long lastChairTime = 0L;
   private boolean shadowServantChangePos = false;
   private int shadowServantChangePosCount = 0;
   private long megaSmasherChargeStartTime = 0L;
   private int psychicTornadoActiveCount = 0;
   private long psychicTornadoStartTime = 0L;
   private long lastActiveChainArtsFuryTime = 0L;
   private long lastActiveCrystalGateAttackTime = 0L;
   private boolean hammerResult = false;
   private int adrenalinBoostCount = 0;
   private ScheduledFuture<?> demonFrenzyTask = null;
   private long lastDemonFrenzyBloodTime = 0L;
   private int spiritWardCount = 0;
   private ReentrantReadWriteLock indieLock = new ReentrantReadWriteLock();
   private ScheduledFuture<?> timeOutMoveTask = null;
   private long startTimeoutMoveTime = 0L;
   private int timeoutMoveDuration = 0;
   private transient ReentrantReadWriteLock coreListsLock;
   private int blessMark = 0;
   private boolean activeGloryWing = false;
   private boolean useMortalWingBit = false;
   private long changeEmotionTime = 0L;
   private long lastActiveLightningCascade = 0L;
   private int forceAtomKey = 2;
   private Map<Integer, Integer> shieldChasingCount = new HashMap<>();
   private int roadRingExpBoost = 0;
   private int guildBonusExpBoost = 0;
   private int donatorBonusExpBoost = 0;
   private long lastRoadRingExpBoostTime = 0L;
   private int test = 1;
   private int[] StarPer = new int[] { 0, 0, 0 };
   private Savepoint sqlSavePoint = null;
   private int shadowBatMobCount = 0;
   private int nightWalkerAttackCount = 0;
   private int nightWalkerSpawnBatCount = 0;
   private int lastUseSkill = 0;
   private ScheduledFuture<?> infinityReGenTask = null;
   private boolean processSave = false;
   private SkillAlarm skillAlarm = null;
   private LinkSkill linkSkill = null;
   private HyperStat hyperStat = null;
   private HexaCore hexaCore = null;
   private int atomRegenCount = 0;
   private HundredBingo bingoGame = null;
   private int reincarnationCount = 0;
   private int reincarnationMaxCount = 0;
   private long startReincarnationTime = 0L;
   private int wreckageCount = 0;
   private long canNextSpecterStateTime = 0L;
   private boolean onArkEndlessBeast = false;
   private int holyMagicShellW = 0;
   private long lastEmpressCygnussBlessTime = 0L;
   private int magnetAreaFrom = 0;
   private int totalDancePoint = 0;
   private int dancePoint = 0;
   private ScheduledFuture<?> dancePointTask = null;
   private long lastDancePointTime = 0L;
   private int drawElfEar = 0;
   private int drawTail = 0;
   private int shift = 0;
   private int curseWeakeningStack = 0;
   private int relicCharge = 0;
   private int lastUseCardinalForce = 0;
   private int pathfinderPattern = 0;
   private long lastUpdatableTime = 0L;
   private int curseToleranceStack = 0;
   private int ancientGuidance = 0;
   private long endAdditionalTransitionTime = 0L;
   private int additionalTransitionCount = 0;
   private int damReduceR = 0;
   private ScheduledFuture<?> ancientAstraTask = null;
   private long stackExp = 0L;
   private int passiveStack = 0;
   private long lastChangedChannelTime = 0L;
   private CalcDamage calcDamage;
   private int bossLimitClear1;
   private int bossLimitClear2;
   private int bossLimitClear3 = 0;
   private int deathCount = 0;
   private int decrementDeathCount = 0;
   private int bossMode = 0;
   private boolean bossHellMode = false;
   private long lastBroadcastingChat = 0L;
   private int symbolSrc = 0;
   private int enchantPoint = 0;
   private int lastAttendacneDate = 0;
   private boolean expiredPendant = false;
   private boolean unequipShield = false;
   private boolean unequipPants = false;
   private int willMoonGauge = 0;
   private long willMoonGaugeUpdateableTime = 0L;
   private int willCanRemoveWeb = 0;
   private long nextEndRemoveWebTime = 0L;
   private boolean processChangeChannel = false;
   private long lastDecrementDeathCountTime = 0L;
   private long lastMoveTime = 0L;
   private int notMovingCount = 0;
   private ScheduledFuture<?> frozenLinkTask = null;
   private boolean startFrozenLink = false;
   private long lastUpdateFrozenLinkTime = 0L;
   private int frozenLinkMobID = 0;
   private int frozenLinkMobCount = 0;
   private long frozenLinkSerialNumber = 0L;
   private HungryMuto hungryMuto = null;
   private int mutoPickupItemID = 0;
   private int mutoPickupItemQ = 0;
   private int buzzingHouseBlockCount = 0;
   private int buzzingHousePerfectCount = 0;
   private ScheduledFuture<?> buzzingHouseTask = null;
   private MapleDailyGiftInfo dailyGift = null;
   private int[] frozenLinkX = new int[] { 2694, 2395, 2139, 1898, 1715, 2824 };
   private int[] frozenLinkY = new int[] { 401, 160, -85 };
   private int juhunEquipPosition = 999;
   private boolean selectDungeon = false;
   private ReentrantReadWriteLock levelUpLock = new ReentrantReadWriteLock();
   private ReentrantReadWriteLock gainExpLock = new ReentrantReadWriteLock();
   private ScheduledFuture<?> fireBombTask = null;
   private Map<Integer, List<MobQuest>> mobQuests = new HashMap<>();
   private DamageSkinSaveInfo damageSkinSaveData = null;
   private int scrollFeverProbInc = 0;
   private int huFailedStreak = 0;
   private long huLastFailedUniqueID = 0L;
   private List<Integer> quickSlotKeyMapped = new LinkedList<>();
   private MapleUnion[] unionPreset = new MapleUnion[5];
   private MapleUnion currentUnion = null;
   private ScheduledFuture<?> unionRaidTask = null;
   private Field_Union field_union = null;
   private long mobPenaltyAnnounceTime = 0L;
   private Point fireBlinkPos = new Point(0, 0);
   private int darknessAscension = 0;
   private int darknessAscensionHP = 0;
   private ScheduledFuture<?> darknessAscensionTask = null;
   private int spiritJabelinConsumeID = 0;
   private boolean useBuffProtector = false;
   private boolean transferWhiteFadeOut = false;
   private boolean transferFieldOverlap = false;
   private int stigma = 0;
   private int stigmaMax = 0;
   private List<Integer> mobZoneState = new ArrayList<>();
   private String registerTransferFieldPortal = "";
   private int registerTransferField = 0;
   private long registerTransferFieldTime = 0L;
   private int absorbForce = 0;
   public long lastBlueAuraDispelTime = 0L;
   private WildHunterInfo wildHunterInfo = null;
   private Map<Integer, Long> affectedLimits = new HashMap<>();
   private String nickItemMsg = null;
   private int bulletItemID = 0;
   private int bulletPartyValue = 0;
   private int demonDamAbsorbShieldX = 0;
   private long lastOrthros1 = 0L;
   private long lastOrthros2 = 0L;
   private int energyBurst = 0;
   private int phantomShroudCount = 0;
   private boolean playerDead = false;
   private long lastDanceTime = 0L;
   private int guidedBulletTarget = 0;
   private int guidedBulletUser = 0;
   private int lockEclipseLook = 0;
   private int lockEquilibriumLook = 0;
   private int lockBeastFormWingEffect = 0;
   private int lockKinesisPsychicEnergyShieldEffect = 0;
   private int lockHomingMissileEffect = 0;
   private int comboX = 0;
   private long enterFlameWolfTime = 0L;
   private long flameWolfTotalDamage = 0L;
   private int activeRelicUnboundCount = 0;
   private int revenantRage = 0;
   private int remainRevenantCount = 0;
   private int photonRayCharge = 0;
   private int dojangChallengeMode = 0;
   private int poolMakerRemain = 0;
   private boolean disableEquipChange = false;
   private boolean bmQuestBoss = false;
   private JupiterThunder jupiterThunder = null;
   private Map<Long, IntensePowerCrystal> intensePowerCrystals = new ArrayMap<>();
   private List<SecondAtom.Atom> secondAtom = new ArrayList<>();
   private int etherPoint = 0;
   private long nextDebuffIncHPTime = 0L;
   private long lastWillAttackTime = 0L;
   private List<Field_JinHillah.JinHillahDeathCount> jinHillahDeathCount;
   private boolean jinHillahDeathCountOut = false;
   public long lastCreateRedFlamesTime = 0L;
   private int blackMageAttributes = 0;
   private long totalDamage4PhaseBoss = 0L;
   public long serenLaserDebuffEndTime = 0L;
   private long serenCanAddShieldTime = 0L;
   private int serenGauge = 0;
   private int tteokgukPoint = 0;
   private long lastHeartBeatTime = 0L;
   private List<Integer> pendingExplodingThrowingBomb = new ArrayList<>();
   private List<WeeklyQuest> weeklyQuests = new ArrayList<>();
   private MapleCabinet cabinetItem = null;
   private int liberationOrbDarkMad = 0;
   private int liberationOrbLightMad = 0;
   private List<Integer> darknessOmenTargets = new ArrayList<>();
   private int darknessOmenBatCount = 0;
   private int advancedDeathBlessingX = 0;
   private CustomChair customChair = null;
   private int chairEmotion = 0;
   private List<CrystalGate> crystalGates = new ArrayList<>();
   private Point crystalControlPos = null;
   private double duskGauge = 0.0;
   private long lastSpawnFearMonsterTime = 0L;
   private AntiMacro antiMacro = null;
   private long startActiveMacroTime = 0L;
   private int jaguarBuffR = 0;
   private boolean enterRandomPortal = false;
   private RandomPortal randomPortal;
   private long randomPortalSpawnedTime = 0L;
   private long mParkExp = 0L;
   public long lastDarknessAuraBarrierTime = 0L;
   private int darknessAuraStack = 0;
   private WorldLvChairInfo chairInfo = null;
   private List<Pair<String, Integer>> popChairInfos = new ArrayList<>();
   private Map<Integer, Integer> codyVoteChairInfo = new HashMap<>();
   private int dojangChairFloor = 0;
   private Map<Integer, Long> consumeItemLimits = new HashMap<>();
   private BuyLimit buyLimit = null;
   private WorldBuyLimit worldBuyLimit = null;
   private PraisePoint praisePoint = null;
   private int accountTotalLevel = 0;
   private KainStackSkill kainStackSKill = null;
   public int gripOfAgonyMobCount = 0;
   public int gripOfAgonyBossCount = 0;
   public int priorPreparationMobCount = 0;
   public int priorPreparationBossCount = 0;
   private int grapplingWireX = 0;
   private long lastDecHPrTime = 0L;
   private boolean canAttackLucidRewardMob = false;
   private boolean canAttackBMRewardMob = false;
   private int currentBossPhase = 0;
   private boolean startBMQuest6 = false;
   private boolean startBMQuest7 = false;
   private boolean startBMQuest8 = false;
   private boolean startBMQuest9 = false;
   private int miniGameTeam = -1;
   private int nextTransferMinigameField = 0;
   private long nextTransferMinigameFieldTime = 0L;
   public static AtomicInteger nextCreateAreaDotInfoKey = new AtomicInteger(0);
   private ScriptEngineNPC scriptThread;
   private Mannequin hairMannequin = null;
   private Mannequin faceMannequin = null;
   private Mannequin skinMannequin = null;
   private long lastSunlightFilledGroundHealTime = 0L;
   private long lastSunlightSproutTime = 0L;
   private long lastDesolateWindsTime = 0L;
   private long lastRiverPuddleDrenchTime = 0L;
   private long lastBreathtakinglyLargeTreeTime = 0L;
   private BasicJob playerBasicJob = null;
   private ZeroInfo zeroInfo = null;
   private HashMap<Integer, DarkLigntningEntry> darkLightning = new HashMap<>();
   private long YetiBoosterTill = 0L;
   private long PinkBeanYoyoTill = 0L;
   private Map<AffectedOtherSkill, Long> areaAbnormalApplied = new HashMap<>();
   private boolean StateIrkallasWrath = false;
   public boolean showLadderGameResult = true;
   public List<Triple<Integer, Integer, Integer>> blackAbilitys = new ArrayList<>();
   public long lastItemUsedTime = 0L;
   public Map<Integer, Point> skillRequestArea = new HashMap<>();
   private List<BlackList> blackLists = new ArrayList<>();
   private ExtraAbilityStatEntry[][] extraAbilityStats = new ExtraAbilityStatEntry[2][DBConfig.isGanglim ? 6 : 3];
   private int extraAbilitySlot = 0;
   private ExtraAbilityGrade extraAbilityGrade = ExtraAbilityGrade.Rare;
   private Achievement achievement = null;
   private MapleMessage[] receivedMessage;
   private MapleMessage[] sentMessage;
   private long lastSpeedHackCheckTime = 0L;
   private int speedHackCheckCount = 0;
   private boolean memorize = false;
   private boolean blocksave = false;
   private long alertTime = 0L;
   private String musicReceive = null;
   private boolean multiMode = false;
   private long updateChannelTime = 0L;
   private int updateChannelTryCount = 0;
   private boolean isSkipIntro = false;
   private int codyType = 0;
   private int[] codyColors = null;
   private int eliteCurseMap = 0;
   private int eliteCurseLevel = 0;
   private int transferFieldCount = 0;
   private String createGuildName = "";
   private long intensePowerCrystalTime = 0L;
   private boolean toRestoreSummon = false;
   private Map<String, Object> tempKeyValue = new ConcurrentHashMap<>();
   boolean dominant = false;
   int[] equipList = new int[] { 1012643, 1022289, 1132311, 1162079, 1113307, 1122431, 1032314, 1182282, 1190544,
         1022282, 1022286, 1132399 };
   String[] questType = new String[] { "수집", "처치" };
   String[] questType2 = new String[] { "개", "마리" };
   String[] grades = new String[] { "스카웃", "서전트", "가디언", "마스터", "커맨더", "슈프림" };
   public long lastUpdateUnionRaid = 0L;
   private int autoChargeSkillID = 0;
   private int autoChargeMaxStack = 0;
   private int autoChargeCycle = 0;
   private long lastAutoChargeTime = 0L;
   private long lastHowlingGaleTime = 0L;
   private long lastHowlingGaleUseTime = 0L;
   private long lastBMageDeathTime = 0L;
   private long lastTankConsumeMPTime = 0L;
   private long lastTimeCapsuleTime = 0L;
   private long lastWildGrenadeTime = 0L;
   private long lastMagicCircuitTime = 0L;
   private long lastRandomAreaAttackTime = 0L;
   private long lastCloneAttackTime = 0L;
   private long lastButterflyDream = 0L;
   public long lastActiveInfinityTime = 0L;

   public MapleCharacter(boolean ChannelServer) {
      this.setStance(0);
      this.setPosition(new Point(0, 0));
      this.inventory = new MapleInventory[MapleInventoryType.values().length];

      for (MapleInventoryType type : MapleInventoryType.values()) {
         this.inventory[type.ordinal()] = new MapleInventory(type);
      }

      this.quests = new LinkedHashMap<>();
      this.skills = new LinkedHashMap<>();
      this.stats = new PlayerStats();
      this.innerSkills = new LinkedList<>();

      for (int i = 0; i < this.remainingSp.length; i++) {
         this.remainingSp[i] = 0;
      }

      this.traits = new EnumMap<>(MapleTrait.MapleTraitType.class);

      for (MapleTrait.MapleTraitType t : MapleTrait.MapleTraitType.values()) {
         this.traits.put(t, new MapleTrait(t));
      }

      if (ChannelServer) {
         this.saveFlag = 0;
         this.saveFlag2 = 0;
         this.canTalk = true;
         this.scrolledPosition = 0;
         this.lastCombo = 0L;
         this.mulung_energy = 0;
         this.combo = 0;
         this.force = 0;
         this.keydown_skill = 0L;
         this.nextConsume = 0L;
         this.pqStartTime = 0L;
         this.cardStack = 0;
         this.runningStack = 1;
         this.mapChangeTime = 0L;
         this.lastRecoveryTime = 0L;
         this.lastBerserkTime = 0L;
         this.lastFairyTime = 0L;
         this.lastHPTime = 0L;
         this.lastMPTime = 0L;
         this.old = new Point(0, 0);
         this.coconutteam = 0;
         this.followid = 0;
         this.battleshipHP = 0;
         this.marriageItemId = 0;
         this.fallcounter = 0;
         this.challenge = 0;
         this.dotHP = 0;
         this.itcafetime = 0;
         this.lastSummonTime = 0L;
         this.hasSummon = false;
         this.invincible = false;
         this.clone = false;
         this.followinitiator = false;
         this.followon = false;
         this.rebuy = new ArrayList<>();
         this.linkMobs = new HashMap<>();
         this.reports = new EnumMap<>(ReportType.class);
         this.teleportname = "";
         this.smega = true;
         this.wishlist = new int[12];
         this.rocks = new int[10];
         this.regrocks = new int[5];
         this.hyperrocks = new int[13];
         this.itemPots = new ItemPot[3];
         this.extendedSlots = new HashMap<>();

         for (byte i = 2; i < 5; i++) {
            this.extendedSlots.put(i, new ArrayList<>());
         }

         this.coolDowns = new ConcurrentHashMap<>();
         this.diseases = new LinkedHashMap<>();
         this.inst = new AtomicInteger(0);
         this.insd = new AtomicInteger(-1);
         this.keylayout = new MapleKeyLayout[3];

         for (int i = 0; i < this.keylayout.length; i++) {
            this.keylayout[i] = new MapleKeyLayout();
         }

         this.doors = new ArrayList<>();
         this.mechDoors = new ArrayList<>();
         this.controlled = new LinkedHashSet<>();
         this.controlledLock = new ReentrantReadWriteLock();
         this.summons = new LinkedList<>();
         this.summonsLock = new ReentrantReadWriteLock();
         this.visibleMapObjects = new LinkedHashSet<>();
         this.visibleMapObjectsLock = new ReentrantReadWriteLock();
         this.coreListsLock = new ReentrantReadWriteLock();
         this.savedLocations = new int[SavedLocationType.values().length];

         for (int i = 0; i < SavedLocationType.values().length; i++) {
            this.savedLocations[i] = -1;
         }

         this.questinfo = new LinkedHashMap<>();
         this.custominfo = new LinkedHashMap<>();
         this.collectionInfo = new HashMap<>();
         this.customValue = new HashMap<>();
         this.receivedMessage = new MapleMessage[30];
         this.sentMessage = new MapleMessage[30];
      }
   }

   public static MapleCharacter getDefault(MapleClient client, LoginInformationProvider.JobType type) {
      MapleCharacter ret = new MapleCharacter(false);
      ret.client = client;
      ret.map = null;
      ret.exp = 0L;
      ret.gmLevel = 0;
      ret.job = (short) type.id;
      ret.meso = 0L;
      ret.level = 1;
      ret.remainingAp = 0;
      ret.fame = 0;
      ret.accountid = client.getAccID();
      ret.buddylist = new Friend((byte) 20);
      ret.petLoot = true;
      ret.stats.str = 12;
      ret.stats.dex = 5;
      ret.stats.int_ = 4;
      ret.stats.luk = 4;
      ret.stats.maxhp = 50L;
      ret.stats.hp = 50L;
      ret.stats.maxmp = 50L;
      ret.stats.mp = 50L;
      ret.dailyGift = new MapleDailyGiftInfo();
      ret.client.setPlayer(ret);
      DBConnection db = new DBConnection();

      try (Connection con = DBConnection.getConnection()) {
         PreparedStatement ps = con.prepareStatement("SELECT * FROM accounts WHERE id = ?");
         ps.setInt(1, ret.accountid);
         ResultSet rs = ps.executeQuery();
         if (rs.next()) {
            ret.client.setAccountName(rs.getString("name"));
            ret.nxcredit = rs.getInt("nxCredit");
            ret.acash = rs.getInt("ACash");
            ret.maplepoints = rs.getInt("mPoints");
            ret.points = rs.getInt("points");
            ret.realCash = rs.getInt("realCash");
            ret.extremeRealCash = rs.getInt("e_realCash");
            ret.getExtremeRealCash = rs.getInt("get_e_realCash");
            ret.hongboPoint = rs.getInt("hongbo_point");
            ret.extremeLevelPoint = rs.getInt("level_point");
         }

         rs.close();
         ps.close();
      } catch (SQLException var9) {
         System.err.println("Error getting character default" + var9);
      }

      return ret;
   }

   public static final MapleCharacter ReconstructChr(CharacterTransfer ct, MapleClient client, boolean isChannel) {
      MapleCharacter ret = new MapleCharacter(true);
      ret.client = client;
      if (!isChannel) {
         ret.client.setChannel(ct.channel);
      }

      ret.setProcessChangeChannel(false);
      ret.id = ct.characterid;
      ret.name = ct.name;
      ret.level = ct.level;
      ret.fame = ct.fame;
      ret.stats.str = ct.str;
      ret.stats.dex = ct.dex;
      ret.stats.int_ = ct.int_;
      ret.stats.luk = ct.luk;
      ret.stats.maxhp = ct.maxhp;
      ret.stats.maxmp = ct.maxmp;
      ret.stats.hp = ct.hp;
      ret.stats.mp = ct.mp;
      ret.buyLimit = ct.buyLimit;
      ret.worldBuyLimit = ct.worldBuyLimit;
      ret.customValue.putAll(ct.skillCustomValue);
      ret.chalktext = ct.chalkboard;
      ret.gmLevel = ct.gmLevel;
      ret.exp = ct.exp;
      ret.hpApUsed = ct.hpApUsed;
      ret.remainingSp = ct.remainingSp;
      ret.remainingAp = ct.remainingAp;
      ret.meso = ct.meso;
      ret.stolenSkills = ct.stolenSkills;
      ret.skinColor = ct.skinColor;
      ret.secondSkinColor = ct.secondSkinColor;
      ret.gender = ct.gender;
      ret.secondgender = ct.secondgender;
      ret.job = ct.job;
      ret.hair = ct.hair;
      ret.secondhair = ct.secondhair;
      ret.face = ct.face;
      ret.secondface = ct.secondface;
      ret.demonMarking = ct.demonMarking;
      ret.accountid = ct.accountid;
      ret.totalWins = ct.totalWins;
      ret.totalLosses = ct.totalLosses;
      client.setAccID(ct.accountid);
      ret.mapid = ct.mapid;
      ret.initialSpawnPoint = ct.initialSpawnPoint;
      ret.world = ct.world;
      ret.guildid = ct.guildid;
      ret.guildrank = ct.guildrank;
      ret.guildContribution = ct.guildContribution;
      ret.todayContribution = ct.todayContribution;
      ret.allianceRank = ct.alliancerank;
      ret.points = ct.points;
      ret.realCash = ct.realCash;
      ret.extremeRealCash = ct.extremeRealCash;
      ret.getExtremeRealCash = ct.getExtremeRealCash;
      ret.extremeLevelPoint = ct.extremeLevelPoint;
      ret.fairyExp = ct.fairyExp;
      ret.cardStack = ct.cardStack;
      ret.marriageId = ct.marriageId;
      ret.pvpExp = ct.pvpExp;
      ret.pvpPoints = ct.pvpPoints;
      ret.killPoint = ct.killPoint;
      ret.enchantPoint = ct.enchantPoint;
      ret.reborns = ct.reborns;
      ret.apstorage = ct.apstorage;
      ret.mesoChairCount = ct.mesoChairCount;
      ret.summons = ct.summons;
      ret.createDate = ct.createDate;
      ret.lastLoggedinDate = ct.lastLoggedinDate;
      ret.todayLoggedinDate = ct.todayLoggedinDate;
      ret.calcDamage = new CalcDamage();
      ret.dailyGift = new MapleDailyGiftInfo();
      ret.lastSpeedHackCheckTime = ct.lastSpeedHackCheckTime;
      if (ret.guildid > 0) {
         GuildCharacter mgc_ = Center.Guild.getGuild(ret.guildid).getMGC(ret.getId());
         if (mgc_ != null) {
            ret.mgc = mgc_;
         } else {
            ret.mgc = new GuildCharacter(ret);
         }
      }

      ret.fatigue = ct.fatigue;
      ret.buddylist = new Friend(ct.buddysize);
      ret.subcategory = ct.subcategory;
      ret.zeroLinkCashPart = ct.zeroLinkCashPart;
      ret.CustomValues = ct.CustomValues;
      ret.CustomValues2 = ct.CustomValues2;
      ret.petLoot = ct.petLoot;
      ret.vcoreSkills = ct.vcoreSkills;
      ret.vmatrixSlots = ct.vmatrixSlots;
      ret.equippedSpecialCore = ct.equippedSpecialCore;
      ret.spAttackCountMobId = ct.spAttackCountMobId;
      ret.spCount = ct.spCount;
      ret.spLastValidTime = ct.spLastValidTime;
      ret.useMortalWingBit = ct.useMortalWingBit;
      ret.activeGloryWing = ct.activeGloryWing;
      ret.blessMark = ct.blessMark;
      ret.linkSkill = ct.linkSkill;
      ret.skillAlarm = ct.skillAlarm;
      ret.auctionWishList = ct.auctionWishList;
      ret.canNextSpecterStateTime = ct.canNextSpecterStateTime;
      ret.dancePoint = ct.dancePoint;
      ret.totalDancePoint = ct.totalDancePoint;
      ret.drawElfEar = ct.drawElfEar;
      ret.setFrozenLinkMobCount(ct.frozenLinkMobCount);
      ret.setFrozenLinkMobID(ct.frozenLinkMobID);
      ret.curseWeakeningStack = ct.curseWeakeningStack;
      ret.relicCharge = ct.relicCharge;
      ret.lastUseCardinalForce = ct.lastUseCardinalForce;
      ret.pathfinderPattern = ct.pathfinderPattern;
      ret.curseToleranceStack = ct.curseToleranceStack;
      ret.ancientGuidance = ct.ancientGuidance;
      ret.bossLimitClear1 = ct.bossLimitClear1;
      ret.bossLimitClear2 = ct.bossLimitClear2;
      ret.bossLimitClear3 = ct.bossLimitClear3;
      ret.lastFairyTime = ct.lastFairyTime;
      ret.reincarnationCount = ct.reincarnationCount;
      ret.startReincarnationTime = ct.startReincarnationTime;
      ret.currentUnion = ct.currentUnion;
      ret.unionPreset = ct.unionPreset;
      ret.wildHunterInfo = ct.wildHunterInfo;
      ret.tteokgukPoint = ct.tteokgukPoint;
      ret.nickItemMsg = ct.nickItemMsg;
      ret.lastAttendacneDate = ct.lastAttendanceDate;
      ret.faceAddColor = ct.faceAddColor;
      ret.faceBaseColor = ct.faceBaseColor;
      ret.faceBaseProb = ct.faceBaseProb;
      ret.secondFaceAddColor = ct.secondFaceAddColor;
      ret.secondFaceBaseColor = ct.secondFaceBaseColor;
      ret.secondFaceBaseProb = ct.secondFaceBaseProb;
      ret.xenonSurplus = (short) ct.xenonSurplus;
      ret.mobQuests = ct.mobQuests;
      ret.weeklyQuests = ct.weeklyQuests;
      ret.setQuickSlotKeyMapped(ct.quickSlotKeyMapped);
      ret.antiMacro = ct.antiMacro;
      ret.startActiveMacroTime = ct.startActiveMacroTime;
      ret.lockBeastFormWingEffect = ct.lockBeastFormWingEffect;
      ret.lockEclipseLook = ct.lockEclipseLook;
      ret.lockEquilibriumLook = ct.lockEquilibriumLook;
      ret.lockHomingMissileEffect = ct.lockHomingMissileEffect;
      ret.lockKinesisPsychicEnergyShieldEffect = ct.lockKinesisPsychicEnergyShieldEffect;
      ret.combo = ct.combo;
      ret.comboX = ct.comboX;
      ret.liberationOrbDarkMad = ct.liberationOrbDarkMad;
      ret.liberationOrbLightMad = ct.liberationOrbLightMad;
      ret.revenantRage = ct.revenantRage;
      ret.darknessAuraStack = ct.darknessAuraStack;
      ret.viperEnergyCharge = ct.viperEnergyCharge;
      ret.hyperStat = ct.hyperStat;
      ret.hexaCore = ct.hexaCore;
      ret.playerBasicJob = ct.playerBasicJob;
      ret.playerBasicJob.setPlayer(ret);
      if (GameConstants.isKain(ret.getJob())) {
         ret.setKainStackSKill(ct.kainStackSkill);
         if (ret.getKainStackSKill() != null) {
            ret.getKainStackSKill().updatePlayer(ret);
         }
      }

      ret.accountTotalLevel = ct.accountTotalLevel;
      ret.praisePoint = ct.praisePoint;
      ret.registerTransferField = ct.registerTransferField;
      ret.registerTransferFieldTime = ct.registerTransferFieldTime;
      ret.consumeItemLimits = ct.consumeItemLimits;
      ret.extraAbilityStats = ct.extraAbilityStats;
      ret.setExtraAbilitySlot(ct.extraAbilitySlot);
      ret.extraAbilityGrade = ct.extraAbilityGrade;
      ret.bosstier = ct.bossTier;
      ret.client.setKeyValues(ct.accKeyValues);
      ret.setAchievement(ct.achievement);
      if (GameConstants.isZero(ret.getJob())) {
         ret.zeroInfo = ct.zeroInfo;
      }

      if (isChannel) {
         MapleMapFactory mapFactory = GameServer.getInstance(client.getChannel()).getMapFactory();
         ret.map = mapFactory.getMap(ret.mapid);
         if (ret.map == null) {
            ret.map = mapFactory.getMap(100000000);
         } else if (!ct.ccByScript && ret.map.getForcedReturnId() != 999999999
               && ret.map.getForcedReturnMap() != null) {
            ret.map = ret.map.getForcedReturnMap();
         }

         Portal portal = ret.map.getPortal(ret.initialSpawnPoint);
         if (portal == null) {
            portal = ret.map.getPortal(0);
            ret.initialSpawnPoint = 0;
         }

         ret.setPosition(portal.getPosition());
         int messengerid = ct.messengerid;
         if (messengerid > 0) {
            ret.messenger = Center.Messenger.getMessenger(messengerid);
         }
      } else {
         ret.messenger = null;
      }

      int partyid = ct.partyid;
      if (partyid >= 0) {
         Party party = Center.Party.getParty(partyid);
         if (party != null && party.getPartyMember().getMemberById(ret.id) != null) {
            ret.party = party;
         }
      }

      for (Entry<Integer, Object> qs : ct.Quest.entrySet()) {
         MapleQuestStatus queststatus_from = (MapleQuestStatus) qs.getValue();
         queststatus_from.setQuest(qs.getKey());
         ret.quests.put(queststatus_from.getQuest(), queststatus_from);
      }

      for (Entry<Integer, SkillEntry> qs : ct.Skills.entrySet()) {
         ret.skills.put(SkillFactory.getSkill(qs.getKey()), qs.getValue());
      }

      ret.traits = ct.traits;

      for (Entry<Byte, Integer> qs : ct.reports.entrySet()) {
         ret.reports.put(ReportType.getById(qs.getKey()), qs.getValue());
      }

      for (Entry<Long, IntensePowerCrystal> entry : ct.intensePowerCrystals.entrySet()) {
         ret.intensePowerCrystals.put(entry.getKey(), entry.getValue());
      }

      ret.inventory = (MapleInventory[]) ct.inventorys;
      ret.cabinetItem = ct.cabinetItem;
      ret.BlessOfFairy_Origin = ct.BlessOfFairy;
      ret.BlessOfEmpress_Origin = ct.BlessOfEmpress;
      ret.skillMacros = (SkillMacro[]) ct.skillmacro;
      ret.keylayout = ct.keymap;
      ret.questinfo = ct.InfoQuest;
      ret.custominfo = ct.InfoCustom;
      ret.collectionInfo = ct.collectionInfo;
      ret.savedLocations = ct.savedlocation;
      ret.wishlist = ct.wishlist;
      ret.rocks = ct.rocks;
      ret.regrocks = ct.regrocks;
      ret.hyperrocks = ct.hyperrocks;
      ret.buddylist.loadFromTransfer(ct.buddies);
      ret.keydown_skill = 0L;
      ret.lastfametime = ct.lastfametime;
      ret.lastmonthfameids = ct.famedcharacters;
      ret.lastmonthbattleids = ct.battledaccs;
      ret.extendedSlots = ct.extendedSlots;
      ret.itcafetime = ct.itcafetime;
      ret.storage = (MapleStorage) ct.storage;
      ret.cs = (CashShop) ct.cs;
      client.setAccountName(ct.accountname);
      client.setSecondPassword(ct.secondPassword);
      ret.nxcredit = ct.nxCredit;
      ret.acash = ct.ACash;
      ret.maplepoints = ct.MaplePoints;
      ret.pets = ct.pets;
      ret.itemPots = ct.itemPots;
      ret.anticheat = (CheatTracker) ct.anticheat;
      ret.anticheat.start(ret);
      ret.rebuy = ct.rebuy;
      ret.mount = new MapleMount(ret, ct.mount_itemid, PlayerStats.getSkillByJob(1004, ret.job), ct.mount_Fatigue,
            ct.mount_level, ct.mount_exp);
      ret.innerExp = ct.honourexp;
      ret.innerLevel = ct.honourlevel;
      ret.soulCount = ct.soulCount;
      ret.innerSkills = (LinkedList) ct.innerSkills;
      ret.DFRecoveryTimer = ct.DFRecoveryTimer;
      ret.hongboPoint = ct.hongboPoint;
      ret.tsdPoint = ct.tsdPoint;
      ret.tsPoint = ct.tsPoint;
      ret.basecolor = ct.baseColor;
      ret.addcolor = ct.addColor;
      ret.baseprob = ct.baseProb;
      ret.setSecondBaseColor(ct.secondBaseColor);
      ret.setSecondAddColor(ct.secondAddColor);
      ret.setSecondBaseProb(ct.secondBaseProb);
      ret.damageSkinSaveData = ct.damageSkinSaveInfo;
      ret.affectedLimits = ct.affectedLimits;
      ret.shift = ct.shift;
      ret.hairMannequin = ct.hairMannequin;
      ret.faceMannequin = ct.faceMannequin;
      ret.skinMannequin = ct.skinMannequin;
      if (GameConstants.isKaiser(ret.getJob())) {
         ret.smashStack = ct.smashStack;
      }

      ret.setSecondaryStat(ct.secondaryStat);
      ret.getSecondaryStat().setPlayer(ret);
      ret.expirationTask(false, false);
      ret.receivedMessage = ct.receivedMessage;
      ret.sentMessage = ct.sentMessage;
      client.setTempIP(ct.tempIP);
      if (DBConfig.isGanglim) {
         ret.isSkipIntro = ct.isSkipIntro;
      }

      ret.tempKeyValue = ct.tempKeyValues;
      if (GameConstants.isAdele(ret.getJob())) {
         ret.etherPoint = ct.etherPoint;
      }

      return ret;
   }

   public void loadKeyValues() {
      try (Connection con = DBConnection.getConnection()) {
         PreparedStatement ps = con.prepareStatement(String.format("SELECT * FROM keyvalue WHERE %s = ?", "id"));
         ps.setInt(1, this.id);
         ResultSet rs = ps.executeQuery();

         while (rs.next()) {
            this.CustomValues.put(rs.getString("key"),
                  rs.getString("value").equals("null") ? null : rs.getString("value"));
         }

         ps.close();
         rs.close();
         ps = con.prepareStatement("SELECT * FROM keyvalue2 WHERE cid = ?");
         ps.setInt(1, this.id);
         rs = ps.executeQuery();

         while (rs.next()) {
            this.CustomValues2.put(rs.getString("key"), rs.getInt("value"));
         }

         ps.close();
         rs.close();
      } catch (Exception var6) {
         System.err.println("[오류] 커스텀 값들을 불러오는데 실패했습니다.");
         var6.printStackTrace();
      }
   }

   public static MapleCharacter loadCharFromDB(int charid, MapleClient client, boolean channelserver) {
      MapleCharacter ret = new MapleCharacter(channelserver);
      ret.client = client;
      ret.id = charid;
      ret.calcDamage = new CalcDamage();
      ret.antiMacro = new AntiMacro();
      PreparedStatement ps = null;
      PreparedStatement pse = null;
      ResultSet rs = null;
      DBConnection db = new DBConnection();

      try (Connection con = DBConnection.getConnection()) {
         ps = con.prepareStatement("SELECT * FROM characters WHERE id = ?");
         ps.setInt(1, charid);
         rs = ps.executeQuery();
         if (!rs.next()) {
            rs.close();
            ps.close();
            throw new RuntimeException("Loading the Char Failed (char not found)");
         }

         ret.name = rs.getString("name");
         ret.level = rs.getShort("level");
         ret.fame = rs.getInt("fame");
         ret.stats.str = rs.getShort("str");
         if (ret.stats.str < 0) {
            ret.stats.str = 32767;
         }

         ret.stats.dex = rs.getShort("dex");
         if (ret.stats.dex < 0) {
            ret.stats.dex = 32767;
         }

         ret.stats.int_ = rs.getShort("int");
         if (ret.stats.int_ < 0) {
            ret.stats.int_ = 32767;
         }

         ret.stats.luk = rs.getShort("luk");
         if (ret.stats.luk < 0) {
            ret.stats.luk = 32767;
         }

         ret.stats.maxhp = rs.getInt("maxhp");
         ret.stats.maxmp = rs.getInt("maxmp");
         ret.stats.hp = rs.getInt("hp");
         ret.stats.mp = rs.getInt("mp");
         ret.job = rs.getShort("job");
         if (GameConstants.isZero(ret.getJob())) {
            ret.stats.secondHp = rs.getInt("secondHp");
            if (ret.stats.secondHp == 0L) {
               ret.stats.secondHp = ret.stats.maxhp;
            }
         }

         ret.playerBasicJob = CommonJob.setJob(ret.job);
         ret.playerBasicJob.setPlayer(ret);
         ret.gmLevel = rs.getByte("gm");
         ret.exp = rs.getLong("exp");
         ret.hpApUsed = rs.getShort("hpApUsed");
         String[] sp = rs.getString("sp").split(",");

         for (int i = 0; i < ret.remainingSp.length; i++) {
            ret.remainingSp[i] = Integer.parseInt(sp[i]);
         }

         ret.remainingAp = rs.getShort("ap");
         ret.meso = rs.getLong("meso");

         try {
            if (Center.ServerSave.characterMesoMap.get(charid) != null) {
               ret.meso = Center.ServerSave.characterMesoMap.get(charid);
            }
         } catch (Exception var44) {
            FileoutputUtil.outputFileErrorReason("Log_GameServerLogIn_Error.rtf", "서버 메모리 로드 실패", var44);
         }

         ret.skinColor = rs.getInt("skincolor");
         ret.secondSkinColor = rs.getByte("secondSkincolor");
         ret.gender = rs.getByte("gender");
         ret.secondgender = rs.getByte("secondgender");
         ret.hair = rs.getInt("hair");
         ret.basecolor = rs.getInt("basecolor");
         ret.addcolor = rs.getInt("addcolor");
         ret.baseprob = rs.getInt("baseprob");
         if (ret.baseprob < 0) {
            ret.baseprob = 0;
         }

         ret.secondhair = rs.getInt("secondhair");
         ret.face = rs.getInt("face");
         ret.secondface = rs.getInt("secondface");
         ret.faceAddColor = rs.getInt("faceAddColor");
         ret.faceBaseColor = rs.getInt("faceBaseColor");
         ret.faceBaseProb = rs.getInt("faceBaseProb");
         ret.secondFaceAddColor = rs.getInt("secondFaceAddColor");
         ret.secondFaceBaseColor = rs.getInt("secondFaceBaseColor");
         ret.secondFaceBaseProb = rs.getInt("secondFaceBaseProb");
         ret.demonMarking = rs.getInt("demonMarking");
         ret.accountid = rs.getInt("accountid");
         if (client != null) {
            client.setAccID(ret.accountid);
         }

         ret.mapid = rs.getInt("map");
         if (ret.mapid == 680000710 || ret.mapid == 240000000) {
            ret.mapid = ServerConstants.TownMap;
         }

         ret.initialSpawnPoint = rs.getByte("spawnpoint");
         ret.world = rs.getByte("world");
         ret.guildid = rs.getInt("guildid");
         ret.guildrank = rs.getByte("guildrank");
         ret.allianceRank = rs.getByte("allianceRank");
         ret.guildContribution = rs.getInt("guildContribution");
         ret.todayContribution = rs.getInt("todayContribution");
         ret.totalWins = rs.getInt("totalWins");
         ret.totalLosses = rs.getInt("totalLosses");
         long currentTime = System.currentTimeMillis();
         ret.lastLoggedinDate = currentTime;
         ret.todayLoggedinDate = currentTime;
         if (ret.guildid > 0) {
            Guild gld = Center.Guild.getGuild(ret.guildid);
            if (gld == null) {
               ret.guildid = 0;
            } else {
               GuildCharacter mgc_ = gld.getMGC(charid);
               if (mgc_ != null) {
                  if (channelserver) {
                     mgc_.setChannel((byte) ret.getClient().getChannel());
                     mgc_.setOnline(true);
                  }

                  ret.mgc = mgc_;
               } else {
                  ret.mgc = new GuildCharacter(ret);
               }
            }
         }

         ret.buddylist = new Friend(rs.getByte("buddyCapacity"));
         ret.innerExp = rs.getInt("innerExp");
         ret.innerLevel = rs.getInt("innerLevel");
         if (DBConfig.isGanglim && ret.innerLevel < 3) {
            ret.innerLevel = 3;
         }

         ret.soulCount = (short) rs.getInt("soulCount");
         ret.subcategory = rs.getByte("subcategory");
         ret.rank = rs.getInt("rank");
         ret.rankMove = rs.getInt("rankMove");
         ret.jobRank = rs.getInt("jobRank");
         ret.jobRankMove = rs.getInt("jobRankMove");
         ret.marriageId = rs.getInt("marriageId");
         ret.fatigue = rs.getShort("fatigue");
         ret.pvpExp = rs.getInt("pvpExp");
         ret.pvpPoints = rs.getInt("pvpPoints");
         ret.itcafetime = rs.getInt("itcafetime");
         ret.reborns = rs.getInt("reborns");
         ret.apstorage = rs.getInt("apstorage");
         ret.mesoChairCount = rs.getLong("mesoChairCount");
         ret.dressUp_Clothe = rs.getInt("dressUp_Clothe");
         ret.stylishKillSkin = rs.getInt("stylishKill_skin");
         ret.tsdPoint = rs.getInt("tsd_point");
         ret.tsdTotalPoint = rs.getInt("tsd_total_point");
         ret.tsPoint = rs.getInt("ts_point");
         ret.petLoot = rs.getByte("pet_loot") == 1;
         ret.killPoint = rs.getInt("killpoint");
         ret.dancePoint = rs.getInt("dance_point");
         ret.totalDancePoint = rs.getInt("total_dance_point");
         ret.drawElfEar = rs.getByte("draw_elf_ear");
         ret.drawTail = rs.getByte("draw_tail");
         ret.shift = rs.getByte("shift");
         ret.setFrozenLinkMobID(rs.getInt("frozen_link_mobID"));
         ret.setFrozenLinkMobCount(rs.getInt("frozen_link_mobCount"));
         ret.setBossLimitClear1(rs.getInt("boss_limit_clear_1"));
         ret.setBossLimitClear2(rs.getInt("boss_limit_clear_2"));
         ret.setBossLimitClear3(rs.getInt("boss_limit_clear_3"));
         ret.enchantPoint = rs.getInt("enchant_point");
         ret.huFailedStreak = rs.getInt("hu_failed_streak");
         ret.huLastFailedUniqueID = rs.getLong("hu_last_failed_unique_id");
         ret.tteokgukPoint = rs.getInt("tteokguk_point");
         ret.lastAttendacneDate = rs.getInt("lastAttendanceDate");
         ret.secondBaseColor = rs.getInt("second_base_color");
         ret.secondBaseProb = rs.getInt("second_base_prob");
         ret.secondAddColor = rs.getInt("second_add_color");
         ret.wp = rs.getInt("wp");
         int hyperStatIndex = rs.getInt("hyper_stat_index");
         if (DBConfig.isGanglim) {
            ret.bosstier = rs.getInt("boss_tier");
            ret.isSkipIntro = rs.getBoolean("skip_intro");
         }

         ret.createDate = rs.getTimestamp("createdate").getTime();
         int extraCount = DBConfig.isGanglim ? 6 : 3;
         ExtraAbilityStatEntry[][] extraAbilityStats = new ExtraAbilityStatEntry[2][extraCount];

         for (int i = 1; i <= extraCount; i++) {
            extraAbilityStats[0][i - 1] = new ExtraAbilityStatEntry(
                  ExtraAbilityOption.getByOption(rs.getInt("extra_" + i + "_option")),
                  rs.getInt("extra_" + i + "_value"));
         }

         for (int i = 1; i <= extraCount; i++) {
            extraAbilityStats[1][i - 1] = new ExtraAbilityStatEntry(
                  ExtraAbilityOption.getByOption(rs.getInt("sub_extra_" + i + "_option")),
                  rs.getInt("sub_extra_" + i + "_value"));
         }

         ret.extraAbilityStats = extraAbilityStats;
         ret.extraAbilitySlot = rs.getInt("current_extra_slot");
         ret.extraAbilityGrade = ExtraAbilityGrade.getGrade(rs.getInt("current_extra_grade"));
         if (GameConstants.isZero(ret.getJob())) {
            ZeroInfo zeroInfo = new ZeroInfo();
            zeroInfo.setBeta(rs.getByte("beta_state") == 1);
            zeroInfo.setZeroLinkCashPart(rs.getInt("betaClothes"));
            ret.setZeroInfo(zeroInfo);
         }

         ret.dailyGift = new MapleDailyGiftInfo();

         for (MapleTrait t : ret.traits.values()) {
            t.setExp(rs.getInt(t.getType().name()));
         }

         for (MapleTrait t : ret.traits.values()) {
            t.setTodayExp(rs.getInt("today_" + t.getType().name()));
         }

         String[] pets = new String[] { "-1, -1, -1" };
         if (channelserver) {
            VCore.LoadVCore(ret);
            ret.checkStrangeCore();
            VCore.LoadVMatrixSlots(ret);
            ret.anticheat = new CheatTracker(ret);
            if (client != null) {
               MapleMapFactory mapFactory = GameServer.getInstance(client.getChannel()).getMapFactory();
               ret.map = mapFactory.getMap(ret.mapid);
               if (ret.map == null) {
                  ret.map = mapFactory.getMap(100000000);
               }
            }

            Portal portal = ret.map.getPortal(ret.initialSpawnPoint);
            if (portal == null) {
               portal = ret.map.getPortal(0);
               ret.initialSpawnPoint = 0;
            }

            ret.setPosition(portal.getPosition());
            int partyid = rs.getInt("party");
            if (partyid >= 0) {
               Party party = Center.Party.getParty(partyid);
               if (party != null && party.getPartyMember().getMemberById(ret.id) != null) {
                  ret.party = party;
               }
            }

            pets = rs.getString("pets").split(",");
            rs.close();
            ps.close();
            ps = con.prepareStatement("SELECT * FROM `achievement_info` WHERE `account_id` = ?");
            ps.setInt(1, client.getAccID());
            rs = ps.executeQuery();
            int lastWeekScore = 0;
            int lastWeekRank = 0;

            int lastWeekDeltaRank;
            for (lastWeekDeltaRank = 0; rs.next(); lastWeekDeltaRank = rs.getInt("last_week_delta_rank")) {
               lastWeekScore = rs.getInt("last_week_score");
               lastWeekRank = rs.getInt("last_week_rank");
            }

            rs.close();
            ps.close();
            ps = con.prepareStatement("SELECT * FROM `achievement_insignia` WHERE `account_id` = ?");
            ps.setInt(1, client.getAccID());
            rs = ps.executeQuery();
            List<AchievementInsigniaEntry> achievementInsignias = new ArrayList<>();

            while (rs.next()) {
               AchievementGrade grade = AchievementGrade.getGrade(rs.getByte("grade"));
               int status = rs.getByte("status");
               long achieveTime = rs.getTimestamp("achieve_time").getTime();
               AchievementInsigniaEntry entry = new AchievementInsigniaEntry(grade, status, achieveTime);
               achievementInsignias.add(entry);
            }

            rs.close();
            ps.close();
            ps = con.prepareStatement("SELECT * FROM `achievement_missions` WHERE `account_id` = ?");
            ps.setInt(1, client.getAccID());
            rs = ps.executeQuery();
            List<AchievementEntry> achievements = new ArrayList<>();

            while (rs.next()) {
               int achievementID = rs.getInt("achievement_id");
               int mission = rs.getByte("mission");
               AchievementMissionStatus status = AchievementMissionStatus.getStatus(rs.getByte("status"));
               long time = rs.getTimestamp("time").getTime();
               String subMission = rs.getString("sub_mission");
               AchievementEntry entry = new AchievementEntry(achievementID, mission, status, time, subMission);
               achievements.add(entry);
            }

            rs.close();
            ps.close();
            Achievement achievement = new Achievement(
                  client.getAccID(), charid, lastWeekScore, lastWeekRank, lastWeekDeltaRank, achievements,
                  achievementInsignias);
            ret.setAchievement(achievement);
            ps = con.prepareStatement("SELECT `wishlist` FROM auction_wishlist WHERE player_id = ?");
            ps.setInt(1, charid);
            rs = ps.executeQuery();

            while (rs.next()) {
               String wishList = rs.getString("wishlist");
               if (!wishList.isEmpty()) {
                  String[] arr = wishList.split(",");

                  for (String id : arr) {
                     ret.addAuctionWishList(Integer.parseInt(id));
                  }
               }
            }

            ps = con.prepareStatement("SELECT `type`, `count` FROM reports WHERE characterid = ?");
            ps.setInt(1, charid);
            rs = ps.executeQuery();

            while (rs.next()) {
               if (ReportType.getById(rs.getByte("type")) != null) {
                  ret.reports.put(ReportType.getById(rs.getByte("type")), rs.getInt("count"));
               }
            }
         }

         rs.close();
         ps.close();
         ps = con.prepareStatement(
               "SELECT `quest`, `status`, `time`, `forfeited`, `customData`, `queststatusid` FROM queststatus WHERE characterid = ?");
         ps.setInt(1, charid);
         rs = ps.executeQuery();
         pse = con.prepareStatement("SELECT `mob`, `count` FROM queststatusmobs WHERE queststatusid = ?");

         while (rs.next()) {
            int id = rs.getInt("quest");
            MapleQuest q = MapleQuest.getInstance(id);
            byte stat = rs.getByte("status");
            if (stat != 1 && stat != 2 || !channelserver || q != null && !q.isBlocked()) {
               MapleQuestStatus status = new MapleQuestStatus(q, stat);
               long cTime = rs.getLong("time");
               if (cTime > -1L) {
                  status.setCompletionTime(cTime * 1000L);
               }

               status.setForfeited(rs.getInt("forfeited"));
               status.setCustomData(rs.getString("customData"));
               ret.quests.put(q, status);
               if (!DBConfig.isGanglim) {
                  pse.setLong(1, rs.getLong("queststatusid"));
                  ResultSet rsMobs = pse.executeQuery();

                  while (rsMobs.next()) {
                     status.setMobKills(rsMobs.getInt("mob"), rsMobs.getInt("count"));
                  }

                  rsMobs.close();
               }
            }
         }

         rs.close();
         ps.close();
         if (channelserver) {
            ps = con.prepareStatement(
                  "SELECT `equip`, `use`, `setup`, `etc`, `cash`, `cash_equip` FROM inventoryslot where characterid = ?");
            ps.setInt(1, charid);
            rs = ps.executeQuery();
            if (!rs.next()) {
               rs.close();
               ps.close();
               ret.getInventory(MapleInventoryType.EQUIP).setSlotLimit((short) 128);
               ret.getInventory(MapleInventoryType.USE).setSlotLimit((short) 128);
               ret.getInventory(MapleInventoryType.SETUP).setSlotLimit((short) 128);
               ret.getInventory(MapleInventoryType.ETC).setSlotLimit((short) 128);
               ret.getInventory(MapleInventoryType.CASH).setSlotLimit((short) 128);
               ret.getInventory(MapleInventoryType.CASH_EQUIP).setSlotLimit((short) 128);
            } else {
               ret.getInventory(MapleInventoryType.EQUIP).setSlotLimit(rs.getShort("equip"));
               ret.getInventory(MapleInventoryType.USE).setSlotLimit(rs.getShort("use"));
               ret.getInventory(MapleInventoryType.SETUP).setSlotLimit(rs.getShort("setup"));
               ret.getInventory(MapleInventoryType.ETC).setSlotLimit(rs.getShort("etc"));
               ret.getInventory(MapleInventoryType.CASH).setSlotLimit(rs.getShort("cash"));
               ret.getInventory(MapleInventoryType.CASH_EQUIP).setSlotLimit(rs.getShort("cash_equip"));
            }

            ps.close();
            rs.close();

            for (Pair<Item, MapleInventoryType> mit : ItemLoader.INVENTORY.loadItems(false, charid, ret.getJob())
                  .values()) {
               ret.getInventory(mit.getRight()).addFromDB(mit.getLeft());
            }

            List<MapleCabinetItem> cabinetItems = ItemLoader.CABINET.loadCabinetItems(ret.accountid);
            ret.setCabinet(new MapleCabinet(cabinetItems));
            ps = con.prepareStatement(
                  "SELECT `name`, `2ndpassword`, `nxCredit`, `ACash`, `mPoints`, `points`, `realCash`, `e_realCash`, `get_e_realCash`, `hongbo_point`, `level_point`, `lastlogon`, `banned` FROM accounts WHERE id = ?");
            ps.setInt(1, ret.accountid);
            rs = ps.executeQuery();
            if (rs.next()) {
               ret.getClient().setAccountName(rs.getString("name"));
               ret.getClient().setSecondPassword(rs.getString("2ndpassword"));
               ret.nxcredit = rs.getInt("nxCredit");
               ret.acash = rs.getInt("ACash");
               ret.maplepoints = rs.getInt("mPoints");
               ret.points = rs.getInt("points");
               ret.realCash = rs.getInt("realCash");
               ret.extremeRealCash = rs.getInt("e_realCash");
               ret.getExtremeRealCash = rs.getInt("get_e_realCash");
               ret.hongboPoint = rs.getInt("hongbo_point");
               ret.extremeLevelPoint = rs.getInt("level_point");
               if (rs.getTimestamp("lastlogon") != null) {
                  Calendar cal = Calendar.getInstance();
                  cal.setTimeInMillis(rs.getTimestamp("lastlogon").getTime());
                  if (cal.get(7) + 1 == Calendar.getInstance().get(7)) {
                     ret.acash += 500;
                  }
               }

               if (rs.getInt("banned") > 0) {
                  rs.close();
                  ps.close();
                  ret.getClient().getSession().close();
                  System.out.println("팅겼다고인마");
                  throw new RuntimeException("Loading a banned character");
               }

               rs.close();
               ps.close();
               ps = con.prepareStatement("UPDATE accounts SET lastlogin = CURRENT_TIMESTAMP() WHERE id = ?");
               ps.setInt(1, ret.accountid);
               ps.executeUpdate();
            } else {
               rs.close();
            }

            ps.close();
            ps = con.prepareStatement("SELECT `quest`, `customData`, `date` FROM questinfo WHERE characterid = ?");
            ps.setInt(1, charid);
            rs = ps.executeQuery();

            while (rs.next()) {
               ret.questinfo.put(rs.getInt("quest"),
                     new QuestEx(rs.getInt("quest"), rs.getString("customData"), rs.getString("date")));
            }

            rs.close();
            ps.close();
            ps = con
                  .prepareStatement("SELECT `quest`, `customData`, `date` FROM questinfo_account WHERE account_id = ?");
            ps.setInt(1, client.getAccID());
            rs = ps.executeQuery();

            while (rs.next()) {
               int questID = rs.getInt("quest");
               String customData = rs.getString("customData");
               ret.questinfo.put(questID, new QuestEx(rs.getInt("quest"), customData, rs.getString("date")));
               if (ServerConstants.isMonsterCollectionQuestEx(questID)) {
                  ret.collectionInfo.put(questID, new MobCollectionEx(questID, customData));
               }
            }

            rs.close();
            ps.close();
            ps = con.prepareStatement("SELECT `customKey`, `customData` FROM custominfo WHERE characterid = ?");
            ps.setInt(1, charid);
            rs = ps.executeQuery();

            while (rs.next()) {
               ret.custominfo.put(rs.getString("customKey"), rs.getString("customData"));
            }

            rs.close();
            ps.close();
            ps = con.prepareStatement("SELECT `customKey`, `customData` FROM custominfo_account WHERE account_id = ?");
            ps.setInt(1, client.getAccID());
            rs = ps.executeQuery();

            while (rs.next()) {
               String customKey = rs.getString("customKey");
               String customData = rs.getString("customData");
               ret.custominfo.put(customKey, customData);
            }

            rs.close();
            ps.close();
            ps = con.prepareStatement("SELECT `itemid`, `position` FROM inventoryitems WHERE uniqueid = ?");

            for (int next = 0; next < 3; next++) {
               if (!pets[next].equals("-1")) {
                  long petid = Long.parseLong(pets[next]);
                  ps.setLong(1, petid);
                  rs = ps.executeQuery();
                  if (rs.next()) {
                     MaplePet pet = MaplePet.loadFromDb(rs.getInt("itemid"), petid, rs.getShort("position"));
                     if (ret.questinfo.getOrDefault(987654, null) != null) {
                        QuestEx ex = ret.questinfo.get(987654);
                        String v = ex.getData();
                        if (!v.equals("")) {
                           String key = String.valueOf(pet.getUniqueId());
                           Map<String, String> values = new HashMap<>();
                           String[] keyvalues = v.split(";");

                           for (int i = 0; i < keyvalues.length; i++) {
                              String[] keyandvalue = keyvalues[i].split("=");
                              values.put(keyandvalue[0], keyandvalue.length == 1 ? "" : keyandvalue[1]);
                           }

                           if (values.containsKey(key)) {
                              String[] exceptions = values.get(key).split(",");

                              for (String exception : exceptions) {
                                 if (!exception.equals("")) {
                                    pet.getLootException().add(Integer.parseInt(exception));
                                 }
                              }
                           }
                        }
                     }

                     ret.addPetBySlotId(pet, (byte) next);
                  }
               }
            }

            rs.close();
            ps.close();
            ret.hyperStat = new HyperStat(ret, hyperStatIndex);
            if (ret.level >= 260) {
               ret.hexaCore = new HexaCore(ret.getId());
            }

            rs.close();
            ps.close();
            ps = con.prepareStatement("SELECT * FROM notes WHERE type = ? and tocid = ?");
            ps.setInt(1, 2);
            ps.setInt(2, ret.getId());
            rs = ps.executeQuery();

            while (rs.next()) {
               for (int i = 0; i < 30; i++) {
                  if (ret.receivedMessage[i] == null) {
                     ret.receivedMessage[i] = new MapleMessage(
                           rs.getInt("id"),
                           rs.getInt("fromcid"),
                           rs.getString("from"),
                           rs.getInt("tocid"),
                           rs.getString("to"),
                           rs.getString("message"),
                           rs.getLong("timestamp"),
                           rs.getByte("gift") > 0,
                           rs.getByte("checked") > 0);
                     break;
                  }
               }
            }

            rs.close();
            ps.close();
            ps = con.prepareStatement("SELECT * FROM notes WHERE type = ? and tocid = ?");
            ps.setInt(1, 0);
            ps.setInt(2, ret.getId());
            rs = ps.executeQuery();

            while (rs.next()) {
               for (int ix = 0; ix < 30; ix++) {
                  if (ret.receivedMessage[ix] == null) {
                     ret.receivedMessage[ix] = new MapleMessage(
                           rs.getInt("id"),
                           rs.getInt("fromcid"),
                           rs.getString("from"),
                           rs.getInt("tocid"),
                           rs.getString("to"),
                           rs.getString("message"),
                           rs.getLong("timestamp"),
                           rs.getByte("gift") > 0,
                           rs.getByte("checked") > 0);
                     break;
                  }
               }
            }

            rs.close();
            ps.close();
            ps = con.prepareStatement("SELECT * FROM notes WHERE type = ? and fromcid = ?");
            ps.setInt(1, 1);
            ps.setInt(2, ret.getId());
            rs = ps.executeQuery();

            while (rs.next()) {
               for (int ixx = 0; ixx < 30; ixx++) {
                  if (ret.sentMessage[ixx] == null) {
                     ret.sentMessage[ixx] = new MapleMessage(
                           rs.getInt("id"),
                           rs.getInt("fromcid"),
                           rs.getString("from"),
                           rs.getInt("tocid"),
                           rs.getString("to"),
                           rs.getString("message"),
                           rs.getLong("timestamp"),
                           rs.getByte("gift") > 0,
                           rs.getByte("checked") > 0);
                     break;
                  }
               }
            }

            rs.close();
            ps.close();
            ps = con.prepareStatement(
                  "SELECT `skillid`, `skilllevel`, `masterlevel`, `expiration` FROM skills WHERE characterid = ?");
            ps.setInt(1, charid);
            rs = ps.executeQuery();

            while (rs.next()) {
               int skid = rs.getInt("skillid");
               if ((skid < 80000400 || skid > 80000422) && (skid != 164001004 || GameConstants.isHoyoung(ret.job))) {
                  Skill skil = SkillFactory.getSkill(skid);
                  int skl = rs.getInt("skilllevel");
                  byte msl = rs.getByte("masterlevel");
                  if (skil != null && GameConstants.isApplicableSkill(skid)) {
                     if (skl > skil.getMaxLevel() && skid < 92000000) {
                        if (!skil.isBeginnerSkill() && skil.canBeLearnedBy(ret.job) && !skil.isSpecialSkill()) {
                           ret.remainingSp[GameConstants.getSkillBookForSkill(skid)] += skl - skil.getMaxLevel();
                        }

                        skl = (byte) skil.getMaxLevel();
                     }

                     if (msl > skil.getMaxLevel()) {
                        msl = (byte) skil.getMaxLevel();
                     }

                     ret.skills.put(skil, new SkillEntry(skl, msl, rs.getLong("expiration")));
                  } else if (skil == null && !GameConstants.isNovice(skid / 10000) && skid / 10000 != 900
                        && skid / 10000 != 800 && skid / 10000 != 9000) {
                     ret.remainingSp[GameConstants.getSkillBookForSkill(skid)] += skl;
                  }
               }
            }

            rs.close();
            ps.close();
            ret.expirationTask(false, true);
            ps = con.prepareStatement(
                  "SELECT `id`, `job`, `level`, `name` FROM characters WHERE accountid = ? ORDER BY level DESC");
            ps.setInt(1, ret.accountid);
            rs = ps.executeQuery();
            int maxlevel_ = 0;
            int maxlevel_2 = 0;

            while (rs.next()) {
               if (rs.getInt("id") != charid) {
                  if (GameConstants.isKOC(rs.getShort("job"))) {
                     int maxlevel = rs.getShort("level") / 5;
                     if (maxlevel > 24) {
                        maxlevel = 24;
                     }

                     if (maxlevel > maxlevel_2 || maxlevel_2 == 0) {
                        maxlevel_2 = maxlevel;
                        ret.BlessOfEmpress_Origin = rs.getString("name");
                     }
                  }

                  int maxlevelx = rs.getShort("level") / 10;
                  if (maxlevelx > 20) {
                     maxlevelx = 20;
                  }

                  if (maxlevelx > maxlevel_ || maxlevel_ == 0) {
                     maxlevel_ = maxlevelx;
                     ret.BlessOfFairy_Origin = rs.getString("name");
                  }
               }
            }

            if (ret.BlessOfFairy_Origin == null) {
               ret.BlessOfFairy_Origin = ret.name;
            }

            ret.skills.put(SkillFactory.getSkill(GameConstants.getBOF_ForJob(ret.job)),
                  new SkillEntry(maxlevel_, (byte) 0, -1L));
            if (SkillFactory.getSkill(GameConstants.getEmpress_ForJob(ret.job)) != null) {
               if (ret.BlessOfEmpress_Origin == null) {
                  ret.BlessOfEmpress_Origin = ret.BlessOfFairy_Origin;
               }

               ret.skills.put(SkillFactory.getSkill(GameConstants.getEmpress_ForJob(ret.job)),
                     new SkillEntry(maxlevel_2, (byte) 0, -1L));
            }

            rs.close();
            ps.close();
            ret.mobQuests = new HashMap<>();
            ps = con.prepareStatement(
                  "SELECT `quest_id`, `mob_id`, `need_count`, `mob_count` FROM mob_quest WHERE player_id = ?");
            ps.setInt(1, charid);
            rs = ps.executeQuery();

            while (rs.next()) {
               int qid = rs.getInt("quest_id");
               if (ret.mobQuests.containsKey(qid)) {
                  ret.mobQuests.get(qid)
                        .add(new MobQuest(qid, rs.getInt("mob_id"), rs.getInt("need_count"), rs.getInt("mob_count")));
               } else {
                  List<MobQuest> list = new ArrayList<>();
                  list.add(new MobQuest(qid, rs.getInt("mob_id"), rs.getInt("need_count"), rs.getInt("mob_count")));
                  ret.mobQuests.put(qid, list);
               }
            }

            rs.close();
            ps.close();
            ret.weeklyQuests = new ArrayList<>();
            ps = con.prepareStatement(
                  "SELECT `quest_id`, `type`, `need_id`, `need_quantity`, `quantity` FROM weekly_quest WHERE player_id = ?");
            ps.setInt(1, charid);
            rs = ps.executeQuery();

            while (rs.next()) {
               int qid = rs.getInt("quest_id");
               WeeklyQuest q = new WeeklyQuest(qid, rs.getInt("type"), rs.getInt("need_id"), rs.getInt("need_quantity"),
                     rs.getInt("quantity"));
               ret.weeklyQuests.add(q);
            }

            rs.close();
            ps.close();
            ps = con.prepareStatement(
                  "SELECT `skill_id`, `skill_level`, `max_level`, `rank`, `locked` FROM inner_ability_skills WHERE player_id = ?");
            ps.setInt(1, charid);
            rs = ps.executeQuery();

            while (rs.next()) {
               ret.innerSkills
                     .add(
                           new CharacterPotentialHolder(
                                 rs.getInt("skill_id"), rs.getByte("skill_level"), rs.getByte("max_level"),
                                 rs.getByte("rank"), rs.getBoolean("locked")));
            }

            rs.close();
            ps.close();
            ps = con.prepareStatement(
                  "SELECT `position`, `skill1`, `skill2`, `skill3`, `name`, `shout` FROM skillmacros WHERE characterid = ?");
            ps.setInt(1, charid);
            rs = ps.executeQuery();

            while (rs.next()) {
               int position = rs.getInt("position");
               SkillMacro macro = new SkillMacro(
                     rs.getInt("skill1"), rs.getInt("skill2"), rs.getInt("skill3"), rs.getString("name"),
                     rs.getInt("shout"), position);
               ret.skillMacros[position] = macro;
            }

            rs.close();
            ps.close();
            ps = con.prepareStatement("SELECT `index`, `key`,`type`,`action` FROM keymap WHERE characterid = ?");
            ps.setInt(1, charid);
            rs = ps.executeQuery();

            while (rs.next()) {
               int index = rs.getInt("index");
               Map<Integer, Pair<Byte, Integer>> keyb = ret.keylayout[index].Layout();
               keyb.put(rs.getInt("key"), new Pair<>(rs.getByte("type"), rs.getInt("action")));
            }

            rs.close();
            ps.close();

            for (MapleKeyLayout layout : ret.keylayout) {
               layout.unchanged();
            }

            ps = con.prepareStatement("SELECT `locationtype`,`map` FROM savedlocations WHERE characterid = ?");
            ps.setInt(1, charid);
            rs = ps.executeQuery();

            while (rs.next()) {
               ret.savedLocations[rs.getInt("locationtype")] = rs.getInt("map");
            }

            rs.close();
            ps.close();
            ps = con.prepareStatement(
                  "SELECT `characterid_to`,`when` FROM famelog WHERE characterid = ? AND DATEDIFF(NOW(),`when`) < 30");
            ps.setInt(1, charid);
            rs = ps.executeQuery();
            ret.lastfametime = 0L;
            ret.lastmonthfameids = new ArrayList<>(31);

            while (rs.next()) {
               ret.lastfametime = Math.max(ret.lastfametime, rs.getTimestamp("when").getTime());
               ret.lastmonthfameids.add(rs.getInt("characterid_to"));
            }

            rs.close();
            ps.close();
            ps = con.prepareStatement(
                  "SELECT `accid_to`,`when` FROM battlelog WHERE accid = ? AND DATEDIFF(NOW(),`when`) < 30");
            ps.setInt(1, ret.accountid);
            rs = ps.executeQuery();
            ret.lastmonthbattleids = new ArrayList<>();

            while (rs.next()) {
               ret.lastmonthbattleids.add(rs.getInt("accid_to"));
            }

            rs.close();
            ps.close();
            ps = con.prepareStatement("SELECT `itemId` FROM extendedslots WHERE characterid = ?");
            ps.setInt(1, charid);
            rs = ps.executeQuery();

            while (rs.next()) {
               int itemId = rs.getInt("itemId");
               ret.extendedSlots.get((byte) (itemId / 1000000)).add(itemId);
            }

            rs.close();
            ps.close();
            ret.buddylist.loadFromDb(ret.accountid);
            ret.storage = MapleStorage.loadStorage(ret.accountid);
            ret.cs = new CashShop(ret.accountid, charid, ret.getJob());
            ps = con.prepareStatement("SELECT `sn` FROM wishlist WHERE characterid = ?");
            ps.setInt(1, charid);
            rs = ps.executeQuery();

            int ixxx;
            for (ixxx = 0; rs.next(); ixxx++) {
               ret.wishlist[ixxx] = rs.getInt("sn");
            }

            while (ixxx < 12) {
               ret.wishlist[ixxx] = 0;
               ixxx++;
            }

            rs.close();
            ps.close();
            ps = con.prepareStatement("SELECT `mapid` FROM trocklocations WHERE characterid = ?");
            ps.setInt(1, charid);
            rs = ps.executeQuery();

            int r;
            for (r = 0; rs.next(); r++) {
               ret.rocks[r] = rs.getInt("mapid");
            }

            while (r < 10) {
               ret.rocks[r] = 999999999;
               r++;
            }

            rs.close();
            ps.close();
            ps = con.prepareStatement("SELECT `mapid` FROM regrocklocations WHERE characterid = ?");
            ps.setInt(1, charid);
            rs = ps.executeQuery();

            for (r = 0; rs.next(); r++) {
               ret.regrocks[r] = rs.getInt("mapid");
            }

            while (r < 5) {
               ret.regrocks[r] = 999999999;
               r++;
            }

            rs.close();
            ps.close();
            ps = con.prepareStatement("SELECT `mapid` FROM hyperrocklocations WHERE characterid = ?");
            ps.setInt(1, charid);
            rs = ps.executeQuery();

            for (r = 0; rs.next(); r++) {
               ret.hyperrocks[r] = rs.getInt("mapid");
            }

            while (r < 13) {
               ret.hyperrocks[r] = 999999999;
               r++;
            }

            rs.close();
            ps.close();
            ps = con.prepareStatement("SELECT `skillid`, `chosen` from stolen WHERE characterid = ?");
            ps.setInt(1, charid);
            rs = ps.executeQuery();

            while (rs.next()) {
               if (GameConstants.isPhantom(ret.getJob())) {
                  ret.stolenSkills.add(new Pair<>(rs.getInt("skillid"), rs.getInt("chosen")));
               }
            }

            rs.close();
            ps.close();
            ps = con.prepareStatement(
                  "SELECT `itemid`, `level`, `state`, `closeness`, `fullness` FROM imps WHERE characterid = ?");
            ps.setInt(1, charid);
            rs = ps.executeQuery();

            for (int var111 = 0; rs.next(); var111++) {
               ret.itemPots[var111] = new ItemPot(rs.getInt("itemid"));
               ret.itemPots[var111].setLevel(rs.getByte("level"));
               ret.itemPots[var111].setLastState(rs.getByte("state"));
               ret.itemPots[var111].setFriendly(rs.getShort("closeness"));
               ret.itemPots[var111].setSatiety(rs.getShort("fullness"));
            }

            rs.close();
            ps.close();
            ps = con.prepareStatement("SELECT `data` FROM quick_slot_key_mapped WHERE player_id = ?");
            ps.setInt(1, charid);
            rs = ps.executeQuery();
            if (rs.next()) {
               String value = rs.getString("data");
               if (!value.isEmpty()) {
                  String[] split = value.split(",");

                  for (String v : split) {
                     ret.quickSlotKeyMapped.add(Integer.parseInt(v));
                  }
               }
            }

            rs.close();
            ps.close();
            Item mount = ret.getInventory(MapleInventoryType.EQUIPPED).getItem((short) -23);
            ret.mount = new MapleMount(ret, mount != null ? mount.getItemId() : 0,
                  PlayerStats.getSkillByJob(1004, ret.job), (byte) 0, (byte) 1, 0);
            rs.close();
            ps.close();
            DamageSkinSaveInfo damageSkinInfo = new DamageSkinSaveInfo(ret);
            ret.damageSkinSaveData = damageSkinInfo;
            String data = "";
            ps = con.prepareStatement("SELECT `data` FROM damage_skin_save WHERE player_id = ?");
            ps.setInt(1, charid);
            rs = ps.executeQuery();
            if (rs.next()) {
               data = rs.getString("data");
            }

            rs.close();
            ps.close();
            if (!data.isEmpty()) {
               String[] skinNums = data.split(",");

               for (String skinNum : skinNums) {
                  DamageSkinSaveData d = new DamageSkinSaveData(
                        Integer.parseInt(skinNum),
                        GameConstants.getDamageSkinItemID(Integer.parseInt(skinNum)),
                        false,
                        ServerConstants.serverName + " 데미지 스킨 정보이다.\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n");
                  damageSkinInfo.putDamageSkinData(d);
               }
            }

            ret.loadSkillEffectOnOff();
            ps = con.prepareStatement(
                  "SELECT `riding_type`, `captured_mob_1`, `captured_mob_2`, `captured_mob_3`, `captured_mob_4`, `captured_mob_5` FROM wild_hunter_info WHERE player_id = ?");
            ps.setInt(1, charid);
            rs = ps.executeQuery();
            ret.wildHunterInfo = new WildHunterInfo();
            int[] capturedMobs = new int[5];
            if (rs.next()) {
               for (int nextx = 0; nextx < 5; nextx++) {
                  capturedMobs[nextx] = rs.getInt("captured_mob_" + (nextx + 1));
               }

               ret.wildHunterInfo.setRidingType(rs.getInt("riding_type"));
            }

            ret.wildHunterInfo.setCapturedMob(capturedMobs);
            ret.buyLimit = new BuyLimit();
            rs.close();
            ps.close();
            ps = con.prepareStatement(
                  "SELECT `shop_id`, `item_index`, `item_id`, `buy_count`, `buy_time` FROM `shop_buy_limit` WHERE `player_id` = ?");
            ps.setInt(1, charid);
            rs = ps.executeQuery();

            while (rs.next()) {
               BuyLimitEntry entry = new BuyLimitEntry(
                     rs.getInt("shop_id"), rs.getInt("item_index"), rs.getInt("item_id"), rs.getInt("buy_count"),
                     rs.getTimestamp("buy_time").getTime());
               ret.buyLimit.addBuyLimit(entry);
            }

            rs.close();
            ps.close();
            ret.worldBuyLimit = new WorldBuyLimit();
            ps = con.prepareStatement(
                  "SELECT `shop_id`, `item_index`, `item_id`, `buy_count`, `buy_time` FROM `shop_world_buy_limit` WHERE `account_id` = ?");
            ps.setInt(1, client.getAccID());
            rs = ps.executeQuery();

            while (rs.next()) {
               BuyLimitEntry entry = new BuyLimitEntry(
                     rs.getInt("shop_id"), rs.getInt("item_index"), rs.getInt("item_id"), rs.getInt("buy_count"),
                     rs.getTimestamp("buy_time").getTime());
               ret.worldBuyLimit.addBuyLimit(entry);
            }

            rs.close();
            ps.close();
            ps = con.prepareStatement("SELECT `total_point`, `point` FROM `praise_point` WHERE `account_id` = ?");
            ps.setInt(1, client.getAccID());
            rs = ps.executeQuery();
            int totalPoint = 0;

            int point;
            for (point = 0; rs.next(); point = rs.getInt("point")) {
               totalPoint = rs.getInt("total_point");
            }

            ret.praisePoint = new PraisePoint(totalPoint, point);
            rs.close();
            ps.close();
            ps = con.prepareStatement("SELECT `item_id`, `limit_time` FROM `consume_item_limit` WHERE `player_id` = ?");
            ps.setInt(1, charid);
            rs = ps.executeQuery();
            ret.consumeItemLimits = new HashMap<>();

            while (rs.next()) {
               ret.consumeItemLimits.put(rs.getInt("item_id"), rs.getTimestamp("limit_time").getTime());
            }

            rs.close();
            ps.close();
            ps = con.prepareStatement(
                  "SELECT `item_unique_id`, `mob_id`, `member_count`, `price`, `unk`, `gain_time` FROM `INTENSE_POWER_CRYSTAL` WHERE `player_id` = ?");
            ps.setInt(1, charid);
            rs = ps.executeQuery();
            ret.intensePowerCrystals = new HashMap<>();

            while (rs.next()) {
               ret.intensePowerCrystals
                     .put(
                           rs.getLong("item_unique_id"),
                           new IntensePowerCrystal(
                                 charid,
                                 rs.getLong("item_unique_id"),
                                 rs.getInt("member_count"),
                                 rs.getInt("mob_id"),
                                 rs.getLong("price"),
                                 rs.getLong("unk"),
                                 rs.getLong("gain_time")));
            }

            rs.close();
            ps.close();
            ps = con.prepareStatement(
                  "SELECT `b_chrName`, `b_denoteName`, `b_chrId`, `b_unk` FROM `blacklist` WHERE `characterId` = ?");
            ps.setInt(1, charid);
            rs = ps.executeQuery();
            ret.blackLists = new ArrayList<>();

            while (rs.next()) {
               BlackList blackList = new BlackList(rs.getString("b_chrName"), rs.getString("b_denoteName"),
                     rs.getInt("b_chrId"), rs.getInt("b_unk"));
               ret.blackLists.add(blackList);
            }

            rs.close();
            ps.close();
            ret.checkValidVCoreSkills();
            ret.dailyGift.loadDailyGift(client.getAccID());
            ret.loadKeyValues();
            ret.hairMannequin = new Mannequin();
            ret.faceMannequin = new Mannequin();
            ret.skinMannequin = new Mannequin();
            if (ret.hairMannequin.loadFromDB(client.getAccID(), MannequinType.HairRoom, ret)) {
               ret.setSaveFlag2(ret.getSaveFlag2() | CharacterSaveFlag2.MANNEQUIN.getFlag());
            }

            if (ret.faceMannequin.loadFromDB(client.getAccID(), MannequinType.FaceRoom, ret)) {
               ret.setSaveFlag2(ret.getSaveFlag2() | CharacterSaveFlag2.MANNEQUIN.getFlag());
            }

            if (ret.skinMannequin.loadFromDB(client.getAccID(), MannequinType.SkinRoom, ret)) {
               ret.setSaveFlag2(ret.getSaveFlag2() | CharacterSaveFlag2.MANNEQUIN.getFlag());
            }

            ret.linkSkill = new LinkSkill(ret);
            ret.skillAlarm = new SkillAlarm(ret);
            if (DBConfig.isGanglim) {
               client.loadKeyValues();
               String value = client.getKeyValue("rank");
               if (value != null) {
                  int vv = ret.getOneInfoQuestInteger(QuestExConstants.UnionRankInfo.getQuestID(), "rank");
                  if (vv < Integer.parseInt(value)) {
                     ret.updateOneInfo(QuestExConstants.UnionRankInfo.getQuestID(), "rank", value, false);
                  }
               }
            }

            ret.firstLoadMapleUnion();
            ret.stats.recalcLocalStats(true, ret, false);
         } else {
            for (Pair<Item, MapleInventoryType> mit : ItemLoader.INVENTORY.loadItems(true, charid, ret.job).values()) {
               ret.getInventory(mit.getRight()).addFromDB(mit.getLeft());
            }

            ret.stats.recalcPVPRank(ret);
         }

         if (GameConstants.isZero(ret.getJob())) {
            ret.getZeroInfo().initZeroInfo(ret);
         }
      } catch (SQLException var46) {
         var46.printStackTrace();
         System.out.println("[오류] DB에서 캐릭터 정보를 불러오는 도중 오류가 발생하였습니다.");
         FileoutputUtil.outputFileError("Log_Packet_Except.rtf", var46);
      } finally {
         try {
            if (pse != null) {
               pse.close();
               PreparedStatement var49 = null;
            }

            if (ps != null) {
               ps.close();
               PreparedStatement var48 = null;
            }

            if (rs != null) {
               rs.close();
               ResultSet var50 = null;
            }
         } catch (SQLException var42) {
         }
      }

      return ret;
   }

   public static MapleCharacter loadCharFromDBFake(int charid, boolean channelserver) {
      MapleCharacter ret = new MapleCharacter(channelserver);
      ret.id = charid;
      PreparedStatement ps = null;
      PreparedStatement pse = null;
      ResultSet rs = null;
      DBConnection db = new DBConnection();

      try (Connection con = DBConnection.getConnection()) {
         ps = con.prepareStatement("SELECT * FROM characters WHERE id = ?");
         ps.setInt(1, charid);
         rs = ps.executeQuery();
         if (!rs.next()) {
            rs.close();
            ps.close();
            throw new RuntimeException("Loading the Char Failed (char not found)");
         }

         ret.name = rs.getString("name");
         ret.level = rs.getShort("level");
         ret.fame = rs.getInt("fame");
         ret.job = rs.getShort("job");
         ret.stats.str = rs.getShort("str");
         if (ret.stats.str < 0) {
            ret.stats.str = 32767;
         }

         ret.stats.dex = rs.getShort("dex");
         if (ret.stats.dex < 0) {
            ret.stats.dex = 32767;
         }

         ret.stats.int_ = rs.getShort("int");
         if (ret.stats.int_ < 0) {
            ret.stats.int_ = 32767;
         }

         ret.stats.luk = rs.getShort("luk");
         if (ret.stats.luk < 0) {
            ret.stats.luk = 32767;
         }

         ret.stats.maxhp = rs.getInt("maxhp");
         ret.stats.maxmp = rs.getInt("maxmp");
         ret.stats.hp = rs.getInt("hp");
         ret.stats.mp = rs.getInt("mp");
         ret.job = rs.getShort("job");
         if (GameConstants.isZero(ret.getJob())) {
            ret.stats.secondHp = rs.getInt("secondHp");
            if (ret.stats.secondHp == 0L) {
               ret.stats.secondHp = ret.stats.maxhp;
            }
         }

         ret.remainingAp = rs.getShort("ap");
         ret.meso = rs.getLong("meso");
         ret.skinColor = rs.getInt("skincolor");
         ret.secondSkinColor = rs.getByte("secondSkincolor");
         ret.gender = rs.getByte("gender");
         ret.secondgender = rs.getByte("secondgender");
         ret.hair = rs.getInt("hair");
         ret.basecolor = rs.getInt("basecolor");
         ret.addcolor = rs.getInt("addcolor");
         ret.baseprob = rs.getInt("baseprob");
         if (ret.baseprob < 0) {
            ret.baseprob = 0;
         }

         ret.secondhair = rs.getInt("secondhair");
         ret.face = rs.getInt("face");
         ret.secondface = rs.getInt("secondface");
         ret.faceAddColor = rs.getInt("faceAddColor");
         ret.faceBaseColor = rs.getInt("faceBaseColor");
         ret.faceBaseProb = rs.getInt("faceBaseProb");
         ret.secondFaceAddColor = rs.getInt("secondFaceAddColor");
         ret.secondFaceBaseColor = rs.getInt("secondFaceBaseColor");
         ret.secondFaceBaseProb = rs.getInt("secondFaceBaseProb");
         ret.demonMarking = rs.getInt("demonMarking");
         ret.accountid = rs.getInt("accountid");
         ret.mapid = rs.getInt("map");
         ret.drawElfEar = rs.getByte("draw_elf_ear");
         ret.drawTail = rs.getByte("draw_tail");
         ret.shift = rs.getByte("shift");
         ret.secondBaseColor = rs.getInt("second_base_color");
         ret.secondBaseProb = rs.getInt("second_base_prob");
         ret.secondAddColor = rs.getInt("second_add_color");
         ret.wp = rs.getInt("wp");
         if (GameConstants.isZero(ret.getJob())) {
            ZeroInfo zeroInfo = new ZeroInfo();
            zeroInfo.setBeta(rs.getByte("beta_state") == 1);
            zeroInfo.setZeroLinkCashPart(rs.getInt("betaClothes"));
            ret.setZeroInfo(zeroInfo);
         } else {
            ret.setZeroInfo(new ZeroInfo());
         }

         if (channelserver) {
            ps = con.prepareStatement(
                  "SELECT `equip`, `use`, `setup`, `etc`, `cash`, `cash_equip` FROM inventoryslot where characterid = ?");
            ps.setInt(1, charid);
            rs = ps.executeQuery();
            if (!rs.next()) {
               rs.close();
               ps.close();
               ret.getInventory(MapleInventoryType.EQUIP).setSlotLimit((short) 128);
               ret.getInventory(MapleInventoryType.USE).setSlotLimit((short) 128);
               ret.getInventory(MapleInventoryType.SETUP).setSlotLimit((short) 128);
               ret.getInventory(MapleInventoryType.ETC).setSlotLimit((short) 128);
               ret.getInventory(MapleInventoryType.CASH).setSlotLimit((short) 128);
               ret.getInventory(MapleInventoryType.CASH_EQUIP).setSlotLimit((short) 128);
            } else {
               ret.getInventory(MapleInventoryType.EQUIP).setSlotLimit(rs.getShort("equip"));
               ret.getInventory(MapleInventoryType.USE).setSlotLimit(rs.getShort("use"));
               ret.getInventory(MapleInventoryType.SETUP).setSlotLimit(rs.getShort("setup"));
               ret.getInventory(MapleInventoryType.ETC).setSlotLimit(rs.getShort("etc"));
               ret.getInventory(MapleInventoryType.CASH).setSlotLimit(rs.getShort("cash"));
               ret.getInventory(MapleInventoryType.CASH_EQUIP).setSlotLimit(rs.getShort("cash_equip"));
            }

            ps.close();
            rs.close();

            for (Pair<Item, MapleInventoryType> mit : ItemLoader.INVENTORY.loadItems(false, charid, ret.job).values()) {
               ret.getInventory(mit.getRight()).addFromDB(mit.getLeft());
            }

            List<MapleCabinetItem> cabinetItems = ItemLoader.CABINET.loadCabinetItems(ret.accountid);
            ret.setCabinet(new MapleCabinet(cabinetItems));
         }
      } catch (SQLException var22) {
         var22.printStackTrace();
         System.out.println("[오류] DB에서 캐릭터 정보를 불러오는 도중 오류가 발생하였습니다.");
         FileoutputUtil.outputFileError("Log_Packet_Except.rtf", var22);
      } finally {
         try {
            if (pse != null) {
               pse.close();
               PreparedStatement var25 = null;
            }

            if (ps != null) {
               ps.close();
               PreparedStatement var24 = null;
            }

            if (rs != null) {
               rs.close();
               ResultSet var26 = null;
            }
         } catch (SQLException var19) {
         }
      }

      return ret;
   }

   public static MapleCharacter loadCharFromDBFakeByName(String name, boolean channelserver) {
      MapleCharacter ret = new MapleCharacter(channelserver);
      ret.name = name;
      PreparedStatement ps = null;
      PreparedStatement pse = null;
      ResultSet rs = null;
      DBConnection db = new DBConnection();

      try (Connection con = DBConnection.getConnection()) {
         ps = con.prepareStatement("SELECT * FROM characters WHERE name = ?");
         ps.setString(1, name);
         rs = ps.executeQuery();
         if (!rs.next()) {
            rs.close();
            ps.close();
            throw new RuntimeException("Loading the Char Failed (char not found)");
         }

         ret.id = rs.getInt("id");
         ret.name = rs.getString("name");
         ret.level = rs.getShort("level");
         ret.fame = rs.getInt("fame");
         ret.job = rs.getShort("job");
         ret.stats.str = rs.getShort("str");
         if (ret.stats.str < 0) {
            ret.stats.str = 32767;
         }

         ret.stats.dex = rs.getShort("dex");
         if (ret.stats.dex < 0) {
            ret.stats.dex = 32767;
         }

         ret.stats.int_ = rs.getShort("int");
         if (ret.stats.int_ < 0) {
            ret.stats.int_ = 32767;
         }

         ret.stats.luk = rs.getShort("luk");
         if (ret.stats.luk < 0) {
            ret.stats.luk = 32767;
         }

         ret.stats.maxhp = rs.getInt("maxhp");
         ret.stats.maxmp = rs.getInt("maxmp");
         ret.stats.hp = rs.getInt("hp");
         ret.stats.mp = rs.getInt("mp");
         ret.job = rs.getShort("job");
         if (GameConstants.isZero(ret.getJob())) {
            ret.stats.secondHp = rs.getInt("secondHp");
            if (ret.stats.secondHp == 0L) {
               ret.stats.secondHp = ret.stats.maxhp;
            }
         }

         ret.remainingAp = rs.getShort("ap");
         ret.meso = rs.getLong("meso");
         ret.skinColor = rs.getInt("skincolor");
         ret.secondSkinColor = rs.getByte("secondSkincolor");
         ret.gender = rs.getByte("gender");
         ret.secondgender = rs.getByte("secondgender");
         ret.hair = rs.getInt("hair");
         ret.basecolor = rs.getInt("basecolor");
         ret.addcolor = rs.getInt("addcolor");
         ret.baseprob = rs.getInt("baseprob");
         if (ret.baseprob < 0) {
            ret.baseprob = 0;
         }

         ret.secondhair = rs.getInt("secondhair");
         ret.face = rs.getInt("face");
         ret.secondface = rs.getInt("secondface");
         ret.faceAddColor = rs.getInt("faceAddColor");
         ret.faceBaseColor = rs.getInt("faceBaseColor");
         ret.faceBaseProb = rs.getInt("faceBaseProb");
         ret.secondFaceAddColor = rs.getInt("secondFaceAddColor");
         ret.secondFaceBaseColor = rs.getInt("secondFaceBaseColor");
         ret.secondFaceBaseProb = rs.getInt("secondFaceBaseProb");
         ret.demonMarking = rs.getInt("demonMarking");
         ret.accountid = rs.getInt("accountid");
         ret.mapid = rs.getInt("map");
         ret.drawElfEar = rs.getByte("draw_elf_ear");
         ret.drawTail = rs.getByte("draw_tail");
         ret.shift = rs.getByte("shift");
         ret.secondBaseColor = rs.getInt("second_base_color");
         ret.secondBaseProb = rs.getInt("second_base_prob");
         ret.secondAddColor = rs.getInt("second_add_color");
         ret.wp = rs.getInt("wp");
         if (GameConstants.isZero(ret.getJob())) {
            ZeroInfo zeroInfo = new ZeroInfo();
            zeroInfo.setBeta(rs.getByte("beta_state") == 1);
            zeroInfo.setZeroLinkCashPart(rs.getInt("betaClothes"));
            ret.setZeroInfo(zeroInfo);
         } else {
            ret.setZeroInfo(new ZeroInfo());
         }
      } catch (SQLException var22) {
         var22.printStackTrace();
         System.out.println("[오류] DB에서 캐릭터 정보를 불러오는 도중 오류가 발생하였습니다.");
         FileoutputUtil.outputFileError("Log_Packet_Except.rtf", var22);
      } finally {
         try {
            if (pse != null) {
               pse.close();
               PreparedStatement var25 = null;
            }

            if (ps != null) {
               ps.close();
               PreparedStatement var24 = null;
            }

            if (rs != null) {
               rs.close();
               ResultSet var26 = null;
            }
         } catch (SQLException var19) {
         }
      }

      return ret;
   }

   public static void saveNewCharToDB(MapleCharacter chr, LoginInformationProvider.JobType type, short db) {
      PreparedStatement ps = null;
      PreparedStatement pse = null;
      ResultSet rs = null;
      DBConnection ad = new DBConnection();
      Connection con = DBConnection.getConnection();

      try {
         con.setTransactionIsolation(1);
         con.setAutoCommit(false);
         ps = con.prepareStatement(
               "INSERT INTO characters (level, str, dex, luk, `int`, hp, mp, maxhp, maxmp, sp, ap, skincolor, secondSkinColor, gender, secondgender, job, hair, secondhair, face, secondface, demonMarking, map, meso, party, buddyCapacity, subcategory, accountid, name, world, itcafetime, wp, sia, hpcash, hp2cash, transcendence, addDamage, addDamageS, killpoint, hadm, InnerLevel, InnerExp, ts, crown, betaClothes, basecolor, addcolor, baseprob, pet_loot, secondHp) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
               1);
         ps.setInt(1, chr.level);
         PlayerStats stat = chr.stats;
         ps.setShort(2, stat.getStr());
         ps.setShort(3, stat.getDex());
         ps.setShort(4, stat.getInt());
         ps.setShort(5, stat.getLuk());
         ps.setLong(6, stat.getHp());
         ps.setLong(7, stat.getMp());
         ps.setLong(8, stat.getMaxHp());
         ps.setLong(9, stat.getMaxMp());
         StringBuilder sps = new StringBuilder();

         for (int i = 0; i < chr.remainingSp.length; i++) {
            sps.append(chr.remainingSp[i]);
            sps.append(",");
         }

         String sp = sps.toString();
         ps.setString(10, sp.substring(0, sp.length() - 1));
         ps.setShort(11, chr.remainingAp);
         ps.setInt(12, chr.skinColor);
         ps.setByte(13, chr.secondSkinColor);
         ps.setByte(14, chr.gender);
         ps.setByte(15, chr.secondgender);
         ps.setShort(16, chr.job);
         ps.setInt(17, chr.hair);
         ps.setInt(18, chr.secondhair);
         ps.setInt(19, chr.face);
         ps.setInt(20, chr.secondface);
         ps.setInt(21, chr.demonMarking);
         if (db < 0 || db > 3) {
            db = 0;
         }

         ps.setInt(22, type.map);
         ps.setLong(23, chr.meso);
         ps.setInt(24, -1);
         ps.setByte(25, chr.buddylist.getCapacity());
         ps.setInt(26, db);
         ps.setInt(27, chr.getAccountID());
         ps.setString(28, chr.name);
         ps.setByte(29, chr.world);
         ps.setInt(30, chr.getInternetCafeTime());
         ps.setInt(31, chr.getWp());
         ps.setInt(32, 0);
         ps.setInt(33, 0);
         ps.setInt(34, 0);
         ps.setInt(35, 0);
         ps.setInt(36, 0);
         ps.setInt(37, 0);
         ps.setInt(38, 0);
         ps.setInt(39, 0);
         ps.setInt(40, 0);
         ps.setInt(41, 0);
         ps.setInt(42, 0);
         ps.setString(43, "-1,-1,-1,-1,-1");
         ps.setInt(44, 0);
         ps.setInt(45, -1);
         ps.setInt(46, 0);
         ps.setInt(47, 0);
         ps.setByte(48, (byte) (chr.petLoot ? 1 : 0));
         ps.setInt(49, 0);
         ps.executeUpdate();
         rs = ps.getGeneratedKeys();
         if (!rs.next()) {
            ps.close();
            rs.close();
            con.close();
            throw new RuntimeException("Inserting char failed.");
         }

         chr.id = rs.getInt(1);
         ps.close();
         rs.close();
         ps = con.prepareStatement(
               "INSERT INTO queststatus (`queststatusid`, `characterid`, `quest`, `status`, `time`, `forfeited`, `customData`) VALUES (DEFAULT, ?, ?, ?, ?, ?, ?)",
               1);
         pse = con.prepareStatement("INSERT INTO queststatusmobs VALUES (DEFAULT, ?, ?, ?)");
         ps.setInt(1, chr.id);

         for (MapleQuestStatus q : chr.quests.values()) {
            ps.setInt(2, q.getQuest().getId());
            ps.setInt(3, q.getStatus());
            ps.setInt(4, (int) (q.getCompletionTime() / 1000L));
            ps.setInt(5, q.getForfeited());
            ps.setString(6, q.getCustomData());
            ps.execute();
            rs = ps.getGeneratedKeys();
            if (q.hasMobKills()) {
               rs.next();

               for (int mob : q.getMobKills().keySet()) {
                  pse.setInt(1, rs.getInt(1));
                  pse.setInt(2, mob);
                  pse.setInt(3, q.getMobKills(mob));
                  pse.execute();
               }
            }

            rs.close();
         }

         ps.close();
         pse.close();
         ps = con.prepareStatement(
               "INSERT INTO skills (characterid, skillid, skilllevel, masterlevel, expiration) VALUES (?, ?, ?, ?, ?)");
         ps.setInt(1, chr.id);

         for (Entry<Skill, SkillEntry> skill : chr.skills.entrySet()) {
            if (GameConstants.isApplicableSkill(skill.getKey().getId())) {
               ps.setInt(2, skill.getKey().getId());
               ps.setInt(3, skill.getValue().skillevel);
               ps.setByte(4, skill.getValue().masterlevel);
               ps.setLong(5, skill.getValue().expiration);
               ps.execute();
            }
         }

         ps.close();
         ps = con.prepareStatement(
               "INSERT INTO inventoryslot (characterid, `equip`, `use`, `setup`, `etc`, `cash`, `cash_equip`) VALUES (?, ?, ?, ?, ?, ?, ?)");
         ps.setInt(1, chr.id);
         ps.setShort(2, (short) (DBConfig.isGanglim ? 96 : 52));
         ps.setShort(3, (short) (DBConfig.isGanglim ? 96 : 52));
         ps.setShort(4, (short) (DBConfig.isGanglim ? 96 : 52));
         ps.setShort(5, (short) (DBConfig.isGanglim ? 96 : 52));
         ps.setShort(6, (short) 128);
         ps.setShort(7, (short) 128);
         ps.execute();
         ps.close();
         ps = con
               .prepareStatement("INSERT INTO mountdata (characterid, `Level`, `Exp`, `Fatigue`) VALUES (?, ?, ?, ?)");
         ps.setInt(1, chr.id);
         ps.setByte(2, (byte) 1);
         ps.setInt(3, 0);
         ps.setByte(4, (byte) 0);
         ps.execute();
         ps.close();
         int[] array1 = new int[] {
               1,
               2,
               3,
               4,
               5,
               6,
               7,
               16,
               17,
               18,
               19,
               20,
               21,
               22,
               23,
               24,
               25,
               26,
               27,
               29,
               31,
               34,
               35,
               37,
               38,
               39,
               40,
               41,
               43,
               44,
               45,
               46,
               47,
               48,
               50,
               56,
               57,
               59,
               60,
               61,
               63,
               64,
               65,
               66,
               70,
               83
         };
         int[] array2 = new int[] {
               4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 4, 4, 4, 4,
               5, 5, 6, 6, 6, 6, 6, 6, 6, 4, 0
         };
         int[] array3 = new int[] {
               46,
               10,
               12,
               13,
               18,
               23,
               28,
               8,
               5,
               0,
               4,
               27,
               30,
               39,
               1,
               41,
               19,
               14,
               15,
               52,
               2,
               17,
               11,
               3,
               20,
               26,
               16,
               22,
               9,
               50,
               51,
               6,
               31,
               29,
               7,
               53,
               54,
               100,
               101,
               102,
               103,
               104,
               105,
               106,
               47,
               52
         };
         ps = con.prepareStatement(
               "INSERT INTO keymap (characterid, `key`, `type`, `action`, `index`) VALUES (?, ?, ?, ?, ?)");
         ps.setInt(1, chr.id);

         for (int index = 0; index < 3; index++) {
            for (int i = 0; i < array1.length; i++) {
               ps.setInt(2, array1[i]);
               ps.setInt(3, array2[i]);
               ps.setInt(4, array3[i]);
               ps.setInt(5, index);
               ps.execute();
            }
         }

         ps.close();
         List<Pair<Item, MapleInventoryType>> listing = new ArrayList<>();

         for (MapleInventory iv : chr.inventory) {
            for (Item item : iv.list()) {
               listing.add(new Pair<>(item, iv.getType()));
            }
         }

         ItemLoader.INVENTORY.saveItems(listing, con, chr.id);
         con.commit();
      } catch (Exception var31) {
         FileoutputUtil.outputFileError("Log_Packet_Except.rtf", var31);
         var31.printStackTrace();
         System.err.println("[charsave] Error saving character data");

         try {
            con.rollback();
         } catch (SQLException var30) {
            FileoutputUtil.outputFileError("Log_Packet_Except.rtf", var30);
            var30.printStackTrace();
            System.err.println("[charsave] Error Rolling Back");
         }
      } finally {
         try {
            if (pse != null) {
               pse.close();
            }

            if (ps != null) {
               ps.close();
            }

            if (rs != null) {
               rs.close();
            }

            con.setAutoCommit(true);
            con.setTransactionIsolation(4);
            con.close();
         } catch (SQLException var29) {
            FileoutputUtil.outputFileError("Log_Packet_Except.rtf", var29);
            var29.printStackTrace();
            System.err.println("[charsave] Error going back to autocommit mode");
         }
      }
   }

   public synchronized void saveToDB(boolean dc, boolean fromCS) {
      if (!this.isClone()) {
         long lastCheckTime = this.getLastSpeedHackCheckTime();
         long delta = System.currentTimeMillis() - lastCheckTime;
         int flag1 = this.getSaveFlag();
         int flag2 = this.getSaveFlag2();
         if (!this.isBlockSave()) {
            try {
               CharacterLoader.saveCharacter(this, fromCS, dc);
            } catch (Exception var10) {
               System.out.println("SaveToDB Err");
               var10.printStackTrace();
            }
         } else {
            LoggingManager.putLog(
                  new CustomLog(
                        this.getName(),
                        this.getClient().getAccountName(),
                        this.getId(),
                        this.getAccountID(),
                        10,
                        new StringBuilder(this.getName() + " 캐릭터 DB저장 실패 flag1 : " + flag1 + " , flag2 : " + flag2
                              + " 시간차이 : " + delta)));
         }
      }
   }

   public static void deleteWhereCharacterId(Connection con, String sql, int id) throws SQLException {
      PreparedStatement ps = con.prepareStatement(sql);
      ps.setInt(1, id);
      ps.executeUpdate();
      ps.close();
   }

   public void saveInventory(Connection con) throws SQLException {
      List<Pair<Item, MapleInventoryType>> listing = new ArrayList<>();

      for (MapleInventory iv : this.inventory) {
         for (Item item : new LinkedList<>(iv.list())) {
            listing.add(new Pair<>(item, iv.getType()));
         }
      }

      if (con != null) {
         ItemLoader.INVENTORY.saveItems(listing, con, this.id);
      } else {
         ItemLoader.INVENTORY.saveItems(listing, this.id);
      }
   }

   public final PlayerStats getStat() {
      return this.stats;
   }

   public final void questInfoPacket(PacketEncoder mplew, boolean isWorldRecord) {
      mplew.writeShort(this.questinfo.size());

      for (Entry<Integer, QuestEx> q : this.questinfo.entrySet()) {
         mplew.writeInt(q.getKey());
         mplew.writeMapleAsciiString(q.getValue() == null ? "" : q.getValue().getData());
      }
   }

   public final void updateInfoQuest(int questid, String data, String time) {
      this.questinfo.put(questid, new QuestEx(questid, data, time));
      this.setSaveFlag(this.getSaveFlag() | CharacterSaveFlag.QUEST_INFO.getFlag());
      this.client.getSession().writeAndFlush(CWvsContext.InfoPacket.updateInfoQuest(questid, data));
   }

   public final void updateInfoQuest(int questid, String data) {
      this.updateInfoQuest(questid, data, true);
   }

   public final void updateInfoQuest(int questid, String data, boolean send) {
      String fixData = data;
      if (data.contains("=mobDead=")) {
         try {
            throw new Exception();
         } catch (Exception var6) {
            System.out.println("QuestInfo에 =mobDead 삽입됨 위치 출력");
            var6.printStackTrace();
            fixData = data.replace("=mobDead=", "=;mobDead=");
         }
      }

      this.questinfo.put(questid, new QuestEx(questid, fixData, this.getToday()));
      this.setSaveFlag(this.getSaveFlag() | CharacterSaveFlag.QUEST_INFO.getFlag());
      if (send) {
         if (questid == 1234699) {
            return;
         }

         this.client.getSession().writeAndFlush(CWvsContext.InfoPacket.updateInfoQuest(questid, fixData));
      }
   }

   public final void updateInfoQuestHiddenMission(int questID) {
      String time = HexTool.toString(this.getHiddenMissionTime());
      char c = 1;
      String data = "QET=" + c + c + time + c;
      this.updateInfoQuest(questID, data);
      this.updateInfoQuest(QuestExConstants.SuddenMKInit.getQuestID(),
            "count=0;Quest=" + questID + ";QET=" + time + ";state=2");
      this.updateInfoQuest(questID, data);
      this.updateInfoQuest(questID, data);
      this.startQuest(questID, "");
   }

   public byte[] getHiddenMissionTime() {
      byte[] arr = new byte[8];
      LocalDateTime time = LocalDateTime.now();
      ZonedDateTime zdt = time.atZone(ZoneId.of("Asia/Seoul"));
      long millis = zdt.toInstant().toEpochMilli();
      long l = PacketHelper.getTime(millis);
      arr[0] = (byte) (l & 255L);
      arr[1] = (byte) (l >>> 8 & 255L);
      arr[2] = (byte) (l >>> 16 & 255L);
      arr[3] = (byte) (l >>> 24 & 255L);
      arr[4] = (byte) (l >>> 32 & 255L);
      arr[5] = (byte) (l >>> 40 & 255L);
      arr[6] = (byte) (l >>> 48 & 255L);
      arr[7] = (byte) (l >>> 56 & 255L);
      return arr;
   }

   public final void updateInfoQuestNoChangeTime(int questid, String data) {
      this.questinfo.put(questid, new QuestEx(questid, data, this.getInfoQuest(questid).getTime()));
      this.setSaveFlag(this.getSaveFlag() | CharacterSaveFlag.QUEST_INFO.getFlag());
      this.client.getSession().writeAndFlush(CWvsContext.InfoPacket.updateInfoQuest(questid, data));
   }

   public final QuestEx getInfoQuest(int questid) {
      if (this.questinfo == null) {
         return null;
      } else {
         return this.questinfo.containsKey(questid) ? this.questinfo.get(questid) : null;
      }
   }

   public final int getNumQuest() {
      int i = 0;

      for (MapleQuestStatus q : this.quests.values()) {
         if (q.getStatus() == 2) {
            i++;
         }
      }

      return i;
   }

   public final MapleQuestStatus getQuest(MapleQuest quest) {
      return !this.quests.containsKey(quest) ? new MapleQuestStatus(quest, 0) : this.quests.get(quest);
   }

   public final MapleQuestStatus getQuest(int questID) {
      return this.getQuest(MapleQuest.getInstance(questID));
   }

   public final void startQuest(int questID, String data) {
      MapleQuest quest = MapleQuest.getInstance(questID);
      if (quest != null) {
         quest.forceStart(this, 0, data);
      }
   }

   public final void completeQuest(int questID) {
      MapleQuest quest = MapleQuest.getInstance(questID);
      if (quest != null) {
         quest.forceComplete(this, 0);
      }
   }

   public final boolean isQuestStarted(int questID) {
      MapleQuestStatus quest = this.getQuest(questID);
      return quest == null ? false : quest.getStatus() == 1;
   }

   public final int getQuestStatus(int questID) {
      MapleQuestStatus quest = this.getQuest(questID);
      return quest == null ? 0 : quest.getStatus();
   }

   public final void setQuestAdd(MapleQuest quest, byte status, String customData) {
      if (!this.quests.containsKey(quest)) {
         MapleQuestStatus stat = new MapleQuestStatus(quest, status);
         stat.setCustomData(customData);
         this.quests.put(quest, stat);
      }
   }

   public final MapleQuestStatus getQuestIfNullAdd(MapleQuest quest) {
      if (!this.quests.containsKey(quest)) {
         MapleQuestStatus status = new MapleQuestStatus(quest, 0);
         this.quests.put(quest, status);
         return status;
      } else {
         return this.quests.get(quest);
      }
   }

   public final MapleQuestStatus getQuestNoAdd(MapleQuest quest) {
      return this.quests.get(quest);
   }

   public final MapleQuestStatus getQuestRemove(MapleQuest quest) {
      return this.quests.remove(quest);
   }

   public final void updateQuest(MapleQuestStatus quest) {
      this.updateQuest(quest, false);
   }

   public final void updateQuest(MapleQuestStatus quest, boolean update) {
      this.quests.put(quest.getQuest(), quest);
      this.client.getSession().writeAndFlush(CWvsContext.InfoPacket.updateQuest(quest));
      if (quest.getStatus() == 1) {
         this.client.getSession().writeAndFlush(
               CField.getQuestSay(quest.getQuest().getId(), quest.getNpc(), 0, quest.getQuest().getStartNavi() > 0));
      }
   }

   public final Map<Integer, QuestEx> getInfoQuest_Map() {
      return this.questinfo;
   }

   public final Map<String, String> getInfoCustom_Map() {
      return this.custominfo;
   }

   public final Map<MapleQuest, MapleQuestStatus> getQuest_Map() {
      return this.quests;
   }

   public boolean hasBuffBySkillID(int skillID) {
      if (this.secondaryStat == null) {
         return false;
      } else {
         Flag992 flag992 = this.secondaryStat.getFlag();
         return !flag992.hasBuff() ? false : flag992.hasBuffBySkillID(this, skillID);
      }
   }

   public boolean hasBuffBySkillID(SecondaryStatFlag flag, int skillID) {
      if (this.secondaryStat == null) {
         return false;
      } else {
         if (flag.isIndie()) {
            IndieTemporaryStatEntry entry = this.getIndieTemporaryStat(flag, skillID);
            if (entry != null) {
               return true;
            }
         } else if (this.getSecondaryStatReason(flag) == skillID) {
            return true;
         }

         return false;
      }
   }

   public SecondaryStatEffect getBuffedEffect(SecondaryStatFlag effect) {
      return this.getBuffedEffect(effect, -1);
   }

   public SecondaryStatEffect getBuffedEffect(SecondaryStatFlag flag, int skillID) {
      if (this.secondaryStat == null) {
         return null;
      } else {
         Flag992 flag992 = this.secondaryStat.getFlag();
         int skillLevel = -1;
         if (flag992.check(flag)) {
            if (flag.isIndie()) {
               if (skillID == -1) {
                  List<IndieTemporaryStatEntry> entry = this.getIndieTemporaryStats(flag);
                  if (entry != null && !entry.isEmpty()) {
                     for (IndieTemporaryStatEntry e : entry) {
                        if (e != null) {
                           skillID = e.getSkillID();
                           skillLevel = e.getSkillLevel();
                        }
                     }
                  }
               } else {
                  IndieTemporaryStatEntry entry = this.getIndieTemporaryStatEntry(flag, skillID);
                  if (entry != null) {
                     skillLevel = entry.getSkillLevel();
                  }
               }
            } else {
               if (skillID == -1) {
                  skillID = this.secondaryStat.getReason(flag);
               }

               skillLevel = this.secondaryStat.getVarriableInt(flag.name() + "Level");
            }
         }

         if (skillLevel != -1) {
            if (skillID < 0) {
               return MapleItemInformationProvider.getInstance().getItemEffect(-skillID);
            } else if (skillID > 0) {
               Skill skill = SkillFactory.getSkill(skillID);
               return skill != null ? skill.getEffect(skillLevel) : null;
            } else {
               return null;
            }
         } else {
            return null;
         }
      }
   }

   public List<IndieTemporaryStatEntry> getIndieTemporaryStatEntries(SecondaryStatFlag flag) {
      try {
         java.lang.reflect.Field field = this.secondaryStat.getClass().getDeclaredField(flag.name());
         if (field != null) {
            field.setAccessible(true);
            SecondaryStatFlag stat = SecondaryStatFlag.getByName(field.getName());
            Object obj = field.get(this.secondaryStat);
            if (obj != null) {
               List<IndieTemporaryStatEntry> list = (ArrayList) obj;
               return list;
            }
         }
      } catch (Exception var6) {
      }

      return null;
   }

   public IndieTemporaryStatEntry getIndieTemporaryStatEntry(SecondaryStatFlag flag, int skillID) {
      try {
         java.lang.reflect.Field field = this.secondaryStat.getClass().getDeclaredField(flag.name());
         if (field != null) {
            field.setAccessible(true);
            SecondaryStatFlag stat = SecondaryStatFlag.getByName(field.getName());
            Object obj = field.get(this.secondaryStat);
            if (obj != null) {
               for (IndieTemporaryStatEntry entry : (ArrayList<IndieTemporaryStatEntry>) obj) {
                  if (entry.getSkillID() == skillID) {
                     return entry;
                  }
               }
            }
         }
      } catch (Exception var9) {
      }

      return null;
   }

   public Integer getBuffedValueDefault(SecondaryStatFlag flag, int default_) {
      Integer value = this.getBuffedValue(flag);
      return value == null ? default_ : value;
   }

   public Integer getBuffedValue(SecondaryStatFlag flag) {
      if (this.secondaryStat == null) {
         return null;
      } else {
         Integer ret = this.secondaryStat.getValue(flag);
         return ret != null && ret == -99999 ? null : ret;
      }
   }

   public int getSecondaryStatReason(SecondaryStatFlag stat) {
      return this.secondaryStat == null ? 0 : this.secondaryStat.getVarriableInt(stat.name() + "Reason");
   }

   public int getItemQuantity(int itemid, boolean checkEquipped) {
      int possesed = this.inventory[GameConstants.getInventoryType(itemid).ordinal()].countById(itemid);
      if (checkEquipped) {
         possesed += this.inventory[MapleInventoryType.EQUIPPED.ordinal()].countById(itemid);
      }

      return possesed;
   }

   public void doRecovery() {
      SecondaryStatEffect bloodEffect = this.getBuffedEffect(SecondaryStatFlag.Recovery);
      if (bloodEffect == null) {
         this.lastRecoveryTime = 0L;
      } else {
         this.prepareRecovery();
         if (this.stats.getHp() >= this.stats.getCurrentMaxHp(this)) {
            this.temporaryStatReset(SecondaryStatFlag.Recovery);
         } else {
            this.healHP(bloodEffect.getX());
         }
      }
   }

   public final boolean canRecover(long now) {
      return this.lastRecoveryTime > 0L && this.lastRecoveryTime + 5000L < now;
   }

   private void prepareRecovery() {
      this.lastRecoveryTime = System.currentTimeMillis();
   }

   public void startMapTimeLimitTask(int time, final Field to) {
      if (time <= 0) {
         time = 1;
      }

      this.client.getSession().writeAndFlush(CField.getClock(time));
      final Field ourMap = this.getMap();
      time *= 1000;
      this.mapTimeLimitTask = objects.utils.Timer.MapTimer.getInstance().register(new Runnable() {
         @Override
         public void run() {
            if (ourMap.getId() == 180000002) {
               MapleCharacter.this.getQuestIfNullAdd(MapleQuest.getInstance(123455))
                     .setCustomData(String.valueOf(System.currentTimeMillis()));
               MapleCharacter.this.getQuestIfNullAdd(MapleQuest.getInstance(123456)).setCustomData("0");
            }

            MapleCharacter.this.changeMap(to, to.getPortal(0));
         }
      }, time, time);
   }

   public boolean canDOT(long now) {
      return this.lastDOTTime > 0L && this.lastDOTTime + 8000L < now;
   }

   public boolean hasDOT() {
      return this.dotHP > 0;
   }

   public void doDOT() {
      this.addHP(-(this.dotHP * 4));
      this.dotHP = 0;
      this.lastDOTTime = 0L;
   }

   public void setDOT(int d, int source, int sourceLevel) {
      this.dotHP = d;
      this.addHP(-(this.dotHP * 4));
      this.map.broadcastMessage(CField.getPVPMist(this.id, source, sourceLevel, d));
      this.lastDOTTime = System.currentTimeMillis();
   }

   public void cancelMapTimeLimitTask() {
      if (this.mapTimeLimitTask != null) {
         this.mapTimeLimitTask.cancel(true);
         this.mapTimeLimitTask = null;
      }
   }

   public long getNeededExp() {
      return GameConstants.getExpNeededForLevel(this.level);
   }

   public void removeSummonsByReset(int skillID) {
      if (skillID < 33001007 || skillID > 33001015) {
         if (skillID < 5201012 || skillID > 5201014) {
            if (skillID < 5210015 || skillID > 5210018) {
               if (skillID < 400031007 || skillID > 400031009) {
                  if (skillID != 400021068 && skillID != 500061012) {
                     if (skillID == 400021073) {
                        this.invokeJobMethod("clearJodiacRay");
                     }

                     if (skillID != 400051046) {
                        List<Summoned> removes = new ArrayList<>();
                        this.visibleMapObjectsLock.writeLock().lock();
                        this.summonsLock.writeLock().lock();
                        List<Summoned> copySummons = new ArrayList<>();
                        this.summons.stream().forEach(summon -> {
                           if (summon != null) {
                              copySummons.add(summon);
                           }
                        });

                        try {
                           for (Summoned summon : copySummons) {
                              boolean twins = false;
                              if (skillID == 5321004 && (summon.getSkill() == 5321004 || summon.getSkill() == 5320011
                                    || summon.getSkill() == 5320045)) {
                                 twins = true;
                              }

                              if (skillID >= 2341501 && skillID <= 2341503
                                    && summon.getSkill() >= 2341501 & summon.getSkill() <= 2341503) {
                                 twins = true;
                              }

                              if (skillID == 400051038 && (summon.getSkill() == 400051038
                                    || summon.getSkill() == 400051052 || summon.getSkill() == 400051053)) {
                                 twins = true;
                              }

                              if (skillID == 400011065) {
                                 this.sendRegisterExtraSkill(summon.getTruePosition(), summon.getSummonRLType() != 0,
                                       400011065);
                              }

                              if (summon.getSkill() == 400021092 && summon.getSkill() == skillID) {
                                 Integer value = this.getBuffedValue(SecondaryStatFlag.SalamanderMischief);
                                 SecondaryStatEffect e = SkillFactory.getSkill(400021093)
                                       .getEffect(this.getTotalSkillLevel(400021092));
                                 if (value != null) {
                                    if (e != null) {
                                       this.temporaryStatSet(
                                             SecondaryStatFlag.indieMAD,
                                             400021093,
                                             e.getDuration(e.getDuration(), this),
                                             this.getTotalSkillLevel(400021093),
                                             e.getIndieMad() + value * e.getX(),
                                             false,
                                             true,
                                             false);
                                    }
                                 } else if (e != null) {
                                    this.temporaryStatSet(
                                          SecondaryStatFlag.indieMAD,
                                          400021093,
                                          e.getDuration(e.getDuration(), this),
                                          this.getTotalSkillLevel(400021093),
                                          e.getIndieMad(),
                                          false,
                                          true,
                                          false);
                                 }
                              }

                              if (skillID == 35121009 && summon.getSkill() == 35121011) {
                                 for (Summoned s : this.getSummons(35121011)) {
                                    this.getMap().broadcastMessage(CField.SummonPacket.removeSummon(s, true));
                                    this.getMap().removeMapObject(s);
                                    this.removeVisibleMapObject(s);
                                    this.removeSummon(s);
                                 }
                              }

                              if (twins || summon.getSkill() == skillID) {
                                 this.map.broadcastMessage(CField.SummonPacket.removeSummon(summon, true));
                                 this.map.removeMapObject(summon);
                                 this.visibleMapObjects.remove(summon);
                                 removes.add(summon);
                              }
                           }

                           for (Summoned s : removes) {
                              this.summons.remove(s);
                              if (s.getSkill() == 164121006) {
                                 for (Summoned summoned : new ArrayList<>(this.getSummons())) {
                                    if (summoned.getSkill() == 164121011) {
                                       this.map.broadcastMessage(CField.SummonPacket.removeSummon(summoned, true));
                                       this.map.removeMapObject(summoned);
                                       this.visibleMapObjects.remove(summoned);
                                       this.summons.remove(summoned);
                                    }
                                 }
                              }

                              if (s.getSkill() == 400011012) {
                                 for (Summoned summonedx : new ArrayList<>(this.getSummons())) {
                                    if (summonedx.getSkill() == 400011013 || summonedx.getSkill() == 400011014) {
                                       this.map.broadcastMessage(CField.SummonPacket.removeSummon(summonedx, true));
                                       this.map.removeMapObject(summonedx);
                                       this.visibleMapObjects.remove(summonedx);
                                       this.summons.remove(summonedx);
                                    }
                                 }
                              }
                           }
                        } finally {
                           this.summonsLock.writeLock().unlock();
                           this.visibleMapObjectsLock.writeLock().unlock();
                        }

                        if (skillID == 3111005 || skillID == 3211005) {
                           this.temporaryStatReset(SecondaryStatFlag.CrewCommandership);
                        }
                     }
                  }
               }
            }
         }
      }
   }

   public void temporaryStatReset(SecondaryStatFlag flag) {
      SecondaryStat secondaryStat = this.getSecondaryStat();
      if (secondaryStat != null) {
         Flag992 flag992 = secondaryStat.getFlag();
         Flag992 toRemove = new Flag992();
         List<Integer> toRemoveSkillID = new ArrayList<>();
         boolean existIndie = false;
         if (flag992.check(flag)) {
            if (flag.isIndie()) {
               List<IndieTemporaryStatEntry> list = this.getIndieTemporaryStatEntries(flag);
               if (list != null && !list.isEmpty()) {
                  for (IndieTemporaryStatEntry entry : list) {
                     if (!toRemoveSkillID.contains(entry.getSkillID())) {
                        toRemoveSkillID.add(entry.getSkillID());
                     }

                     if (flag == SecondaryStatFlag.indieSummon) {
                        this.removeSummonsByReset(entry.getSkillID());
                     }
                  }

                  list.clear();
                  toRemove.setFlag(flag);
                  flag992.removeFlag(flag);
                  existIndie = true;
               }
            } else {
               Integer reason = secondaryStat.getVarriableInt(flag.name() + "Reason");
               toRemoveSkillID.add(reason);
               if (flag == SecondaryStatFlag.Beholder) {
                  this.removeSummonsByReset(reason);
               }

               long till = secondaryStat.getTill(flag);
               if (till != -99999L) {
                  secondaryStat.setVarriableInt(flag.name() + "Value", -99999);
                  secondaryStat.setVarriableInt(flag.name() + "Reason", -99999);
                  secondaryStat.setVarriableLong(flag.name() + "Till", -99999L);
                  secondaryStat.setVarriableInt(flag.name() + "FromID", -99999);
                  toRemove.setFlag(flag);
                  flag992.removeFlag(flag);
               }
            }
         }

         if (toRemove.hasBuff()) {
            if (!existIndie) {
               for (int pos = 30; pos >= 1; pos--) {
                  for (int j = 31; j >= 0; j--) {
                     int vl = 1 << j;
                     if ((toRemove.getFlags()[pos] & vl) != 0L) {
                        for (SecondaryStatFlag ssf : SecondaryStatFlag.values()) {
                           if (ssf.getBit() == 31 - j + 32 * (30 - pos) && ssf.isIndie()) {
                              existIndie = true;
                              break;
                           }
                        }
                     }
                  }

                  if (existIndie) {
                     break;
                  }
               }
            }

            PacketEncoder packet = new PacketEncoder();
            packet.writeShort(SendPacketOpcode.CANCEL_BUFF.getValue());
            packet.write(existIndie);
            packet.write(existIndie);
            packet.write(0);
            toRemove.encode(packet);
            if (!existIndie) {
               packet.writeInt(0);
            } else {
               secondaryStat.encodeIndieTemporaryStats(packet, toRemove, false);
               packet.write(4);
               packet.write(1);
            }

            this.send(packet.getPacket());

            for (int skillID : toRemoveSkillID) {
               if (skillID != 2321052 && skillID != 2321055 && flag != SecondaryStatFlag.SixthSkillFrozen) {
                  this.temporaryStatResetBySkillID(skillID);
               }
            }

            this.deregisterSecondaryStats(Collections.singletonList(flag), false);
            if (this.map != null) {
               this.map.broadcastMessage(this, CWvsContext.BuffPacket.remoteTemporaryStatReset(this, toRemove), false);
            }
         }
      }
   }

   public void temporaryStatResetBySkillID(int skillID) {
      this.temporaryStatResetBySkillID(skillID, true);
   }

   public void temporaryStatResetBySkillID(int skillID, boolean special) {
      SecondaryStat secondaryStat = this.getSecondaryStat();
      if (secondaryStat != null) {
         Flag992 flag = secondaryStat.getFlag();
         Flag992 toRemove = new Flag992();
         boolean blessStackRecover = false;
         int blessStack = 0;
         int linked5thSkill = GameConstants.getLinked5thSkill(skillID);
         if (GameConstants.isBlessStackSkill(linked5thSkill)) {
            blessStackRecover = true;
            blessStack = this.getBuffedValueDefault(SecondaryStatFlag.EmpressBlessStack, 0);
         }

         boolean existIndie = false;
         List<SecondaryStatFlag> stats = new ArrayList<>();
         java.lang.reflect.Field[] declaredFields = secondaryStat.getClass().getDeclaredFields();

         try {
            for (java.lang.reflect.Field field : declaredFields) {
               if (!field.isAnnotationPresent(Annotation.class)) {
                  if (field.getName().contains("Till")) {
                     field.setAccessible(true);
                     long till = field.getLong(secondaryStat);
                     if (till != -99999L) {
                        String name = field.getName().split("Till")[0];
                        int reason = secondaryStat.getVarriableInt(name + "Reason");
                        if (reason >= 33001007 && reason <= 33001015) {
                           reason = 33001007;
                        }

                        if (reason == skillID) {
                           SecondaryStatFlag stat = SecondaryStatFlag.getByName(name);
                           if (stat != null) {
                              flag.removeFlag(stat);
                              toRemove.setFlag(stat);
                              stats.add(stat);
                              secondaryStat.setVarriableLong(name + "Till", -99999L);
                              secondaryStat.setVarriableInt(name + "Value", -99999);
                              secondaryStat.setVarriableInt(name + "Reason", -99999);
                              secondaryStat.setVarriableInt(name + "FromID", -99999);
                           }
                        }
                     }
                  }
               } else {
                  Annotation annotation = field.getAnnotation(Annotation.class);
                  if (annotation.value().equals("Indie")) {
                     SecondaryStatFlag stat = SecondaryStatFlag.getByName(field.getName());
                     if (flag.check(stat)) {
                        field.setAccessible(true);
                        Object obj = field.get(secondaryStat);
                        if (obj != null) {
                           List<IndieTemporaryStatEntry> list = (ArrayList) obj;
                           List<IndieTemporaryStatEntry> removeList = new ArrayList<>();

                           for (IndieTemporaryStatEntry entry : list) {
                              int s = entry.getSkillID();
                              if (entry.getSkillID() >= 33001007 && entry.getSkillID() <= 33001015) {
                                 s = 33001007;
                              }

                              if (s == skillID) {
                                 if (!toRemove.check(stat)) {
                                    stats.add(stat);
                                    toRemove.setFlag(stat);
                                 }

                                 if (stat == SecondaryStatFlag.indieSummon) {
                                    this.removeSummonsByReset(skillID);
                                 }

                                 removeList.add(entry);
                                 existIndie = true;
                              }
                           }

                           for (IndieTemporaryStatEntry entry : removeList) {
                              list.remove(entry);
                              if (toRemove.hasBuff() && list.isEmpty()) {
                                 flag.removeFlag(stat);
                              }
                           }
                        }
                     }
                  }
               }
            }
         } catch (Exception var24) {
            var24.getStackTrace();
         }

         if (toRemove.hasBuff()) {
            if (!existIndie) {
               for (int pos = 30; pos >= 1; pos--) {
                  for (int j = 31; j >= 0; j--) {
                     int vl = 1 << j;
                     if ((toRemove.getFlags()[pos] & vl) != 0L) {
                        for (SecondaryStatFlag ssf : SecondaryStatFlag.values()) {
                           if (ssf.getBit() == 31 - j + 32 * (30 - pos) && ssf.isIndie()) {
                              existIndie = true;
                              break;
                           }
                        }
                     }
                  }

                  if (existIndie) {
                     break;
                  }
               }
            }

            PacketEncoder packet = new PacketEncoder();
            packet.writeShort(SendPacketOpcode.CANCEL_BUFF.getValue());
            packet.write(existIndie);
            packet.write(existIndie);
            packet.write(0);
            toRemove.encode(packet);
            if (existIndie) {
               secondaryStat.encodeIndieTemporaryStats(packet, toRemove, false);
            }

            packet.write(4);
            packet.write(special);
            this.send(packet.getPacket());
            this.deregisterSecondaryStats(stats, false);
            this.deregisterSecondaryStats(skillID, false);
            this.getMap().broadcastMessage(this, CWvsContext.BuffPacket.remoteTemporaryStatReset(this, toRemove),
                  false);
         }

         if (blessStackRecover) {
            this.temporaryStatSet(SecondaryStatFlag.EmpressBlessStack, linked5thSkill, Integer.MAX_VALUE, blessStack);
         }
      }
   }

   public void temporaryStatResetBySkillID(SecondaryStatFlag flag, int skillID) {
      SecondaryStat secondaryStat = this.getSecondaryStat();
      if (secondaryStat != null) {
         Flag992 flag992 = secondaryStat.getFlag();
         Flag992 toRemove = new Flag992();
         boolean existIndie = false;
         List<SecondaryStatFlag> stats = new ArrayList<>();
         java.lang.reflect.Field[] declaredFields = secondaryStat.getClass().getDeclaredFields();

         try {
            for (java.lang.reflect.Field field : declaredFields) {
               if (field.isAnnotationPresent(Annotation.class)) {
                  Annotation annotation = field.getAnnotation(Annotation.class);
                  if (annotation.value().equals("Indie")) {
                     SecondaryStatFlag stat = SecondaryStatFlag.getByName(field.getName());
                     if (flag992.check(stat) && field.getName().equals(flag.name())) {
                        field.setAccessible(true);
                        Object obj = field.get(secondaryStat);
                        if (obj != null) {
                           List<IndieTemporaryStatEntry> list = (ArrayList) obj;

                           for (IndieTemporaryStatEntry entry : new ArrayList<>(list)) {
                              if (entry.getSkillID() == skillID) {
                                 if (!toRemove.check(stat)) {
                                    stats.add(stat);
                                    toRemove.setFlag(stat);
                                 }

                                 list.remove(entry);
                                 if (toRemove.hasBuff() && list.isEmpty()) {
                                    flag992.removeFlag(stat);
                                 }

                                 existIndie = true;
                              }
                           }
                        }
                     }
                  }
               } else if (field.getName().contains("Till")) {
                  field.setAccessible(true);
                  long till = field.getLong(secondaryStat);
                  if (till != -99999L) {
                     String name = field.getName().split("Till")[0];
                     SecondaryStatFlag stat = SecondaryStatFlag.getByName(name);
                     if (stat.name().equals(flag.name())) {
                        int reason = secondaryStat.getReason(stat);
                        if (reason == skillID) {
                           flag992.removeFlag(stat);
                           toRemove.setFlag(stat);
                           stats.add(stat);
                           secondaryStat.setVarriableLong(name + "Till", -99999L);
                           secondaryStat.setVarriableInt(name + "Value", -99999);
                           secondaryStat.setVarriableInt(name + "Reason", -99999);
                           secondaryStat.setVarriableInt(name + "FromID", -99999);
                        }
                     }
                  }
               }
            }
         } catch (Exception var19) {
         }

         if (toRemove.hasBuff()) {
            if (!existIndie) {
               for (int pos = 30; pos >= 1; pos--) {
                  for (int j = 31; j >= 0; j--) {
                     int vl = 1 << j;
                     if ((toRemove.getFlags()[pos] & vl) != 0L) {
                        for (SecondaryStatFlag ssf : SecondaryStatFlag.values()) {
                           if (ssf.getBit() == 31 - j + 32 * (30 - pos) && ssf.isIndie()) {
                              existIndie = true;
                              break;
                           }
                        }
                     }
                  }

                  if (existIndie) {
                     break;
                  }
               }
            }

            PacketEncoder packet = new PacketEncoder();
            packet.writeShort(SendPacketOpcode.CANCEL_BUFF.getValue());
            packet.write(existIndie);
            packet.write(existIndie);
            packet.write(0);
            toRemove.encode(packet);
            if (!existIndie) {
               packet.writeInt(0);
            } else {
               secondaryStat.encodeIndieTemporaryStats(packet, toRemove, false);
               packet.write(4);
               packet.write(1);
            }

            this.send(packet.getPacket());
            this.deregisterSecondaryStats(stats, false);
            this.deregisterSecondaryStats(skillID, false);
            this.getMap().broadcastMessage(this, CWvsContext.BuffPacket.remoteTemporaryStatReset(this, toRemove),
                  false);
         }
      }
   }

   public void deregisterSecondaryStats(List<SecondaryStatFlag> stats, boolean timeOver) {
      for (SecondaryStatFlag stat : new ArrayList<>(stats)) {
         if (stat == SecondaryStatFlag.ArcaneAim) {
            this.linkMobs.clear();
         } else if (stat == SecondaryStatFlag.AntiMagicShell) {
            this.setJobField("bAntiMagicShellBarrier", false);
            this.setJobField("tAntiMagicShellBarrier", 0);
         } else if (stat == SecondaryStatFlag.RhoAias) {
            int rhoAiasFrom = (Integer) this.getJobField("rhoAiasFrom");
            if (rhoAiasFrom == this.getId()) {
               int skillId = 400011011;
               if (this.getTotalSkillLevel(500061008) > 0) {
                  skillId = 500061008;
               }

               SecondaryStatEffect effect = this.getSkillLevelData(skillId);
               if (effect != null) {
                  int pmdr = effect.getIndiePMdR() == 0 ? effect.getU() : effect.getIndiePMdR();
                  int duration = effect.getQ2() * 1000 - effect.getDuration();
                  this.temporaryStatSet(skillId, duration, SecondaryStatFlag.indiePMDR, pmdr);
               }
            }

            this.setJobField("rhoAiasFrom", 0);
            this.setJobField("rhoAiasLevel", 0);
            this.setJobField("rhoAiasX", 0);
            this.setJobField("rhoAiasC", 0);
         } else if (stat == SecondaryStatFlag.TimeTorrent) {
            this.onTimeTorrent();
         } else if (stat == SecondaryStatFlag.AbyssalLightning) {
            this.temporaryStatSet(400021087, 2000, SecondaryStatFlag.indiePartialNotDamaged, 1);
         } else if (stat == SecondaryStatFlag.NightWalkerBat) {
            List<Summoned> summonList = new ArrayList<>();

            try {
               for (Summoned summon : this.getSummonsReadLock()) {
                  if (summon.getSkill() == 14000027
                        || summon.getSkill() == 14100027
                        || summon.getSkill() == 14110029
                        || summon.getSkill() == 14120008
                        || summon.getSkill() == 14110033
                        || summon.getSkill() == 14120017) {
                     summonList.add(summon);
                  }
               }
            } finally {
               this.unlockSummonsReadLock();
            }

            summonList.stream().forEach(s -> {
               this.map.broadcastMessage(CField.SummonPacket.removeSummon(s, true));
               this.map.removeMapObject(s);
               this.visibleMapObjects.remove(s);
               this.removeSummon(s);
            });
         } else if (stat == SecondaryStatFlag.DragonVeinReading) {
            this.getSecondAtomByType(SecondAtom.SecondAtomType.DragonVein).stream().collect(Collectors.toList())
                  .forEach(sa -> {
                     this.getMap().removeSecondAtom(sa.getKey());
                     this.removeSecondAtom(sa.getKey());
                  });
         } else if (stat == SecondaryStatFlag.SummonChakri) {
            List<Summoned> summonList = new ArrayList<>();

            try {
               for (Summoned summonx : this.getSummonsReadLock()) {
                  if (summonx.getSkill() == 154110010) {
                     summonList.add(summonx);
                  }
               }
            } finally {
               this.unlockSummonsReadLock();
            }

            summonList.stream().forEach(s -> {
               this.map.broadcastMessage(CField.SummonPacket.removeSummon(s, true));
               this.map.removeMapObject(s);
               this.visibleMapObjects.remove(s);
               this.removeSummon(s);
            });
         }

         if (stat.getDisease() > 0) {
            Item recoverStance = this.getInventory(MapleInventoryType.EQUIPPED).findById(1113126);
            Item recoverDefense = this.getInventory(MapleInventoryType.EQUIPPED).findById(1113127);
            if (recoverStance != null
                  && this.getCooldownLimit(GameConstants.getTheSeedRingSkill(recoverStance.getItemId())) <= 0L) {
               Equip equip = (Equip) recoverStance;
               this.send(CField.skillCooldown(GameConstants.getTheSeedRingSkill(equip.getItemId()), 180000));
               this.addCooldown(GameConstants.getTheSeedRingSkill(equip.getItemId()), System.currentTimeMillis(),
                     180000L);
               SkillFactory.getSkill(GameConstants.getTheSeedRingSkill(equip.getItemId()))
                     .getEffect(equip.getTheSeedRingLevel()).applyTo(this);
            }

            if (recoverDefense != null
                  && this.getCooldownLimit(GameConstants.getTheSeedRingSkill(recoverDefense.getItemId())) <= 0L) {
               Equip equip = (Equip) recoverDefense;
               this.send(CField.skillCooldown(GameConstants.getTheSeedRingSkill(equip.getItemId()), 180000));
               this.addCooldown(GameConstants.getTheSeedRingSkill(equip.getItemId()), System.currentTimeMillis(),
                     180000L);
               SkillFactory.getSkill(GameConstants.getTheSeedRingSkill(equip.getItemId()))
                     .getEffect(equip.getTheSeedRingLevel()).applyTo(this);
            }
         }

         this.diseases.remove(stat);
      }
   }

   public void deregisterSecondaryStats(int skillID, boolean timeOver) {
      Skill skill = SkillFactory.getSkill(skillID);
      if (skill != null && SecondaryStatEffect.parseMountInfo(this, skillID) != 0) {
         this.cancelFishingTask();
         this.cancelChairTask();
      }

      if (skillID == 11121054) {
         int orb = this.getBuffedValueDefault(SecondaryStatFlag.CosmikOrb, 0);
         if (orb > 5) {
            int duration = (int) (this.getSecondaryStat().getTill(SecondaryStatFlag.CosmikOrb)
                  - System.currentTimeMillis());
            this.temporaryStatSet(SecondaryStatFlag.CosmikOrb, 11001030, duration, 5);
         }
      }

      if (skillID == 15001026) {
         this.setJobField("correctionStack", 0);
      }

      if (skillID == 4361501) {
         this.invokeJobMethod("checkKarmaBladeFinalAttack");
      }

      if (skillID == 400001061) {
         this.temporaryStatResetBySkillID(400001062);
      }

      if (skillID == 162111002) {
         if (this.getSecondAtomByType(SecondAtom.SecondAtomType.WhereTheRiverFlows).size() > 0
               && this.getSecondAtomByType(SecondAtom.SecondAtomType.WhereTheRiverFlows2).size() > 0) {
            this.getSecondAtomByType(SecondAtom.SecondAtomType.WhereTheRiverFlows).stream().collect(Collectors.toList())
                  .forEach(a -> {
                     this.removeSecondAtom(a.getKey());
                     this.getMap().removeSecondAtom(a.getKey());
                  });
            this.getSecondAtomByType(SecondAtom.SecondAtomType.WhereTheRiverFlows2).stream()
                  .collect(Collectors.toList()).forEach(a -> {
                     this.removeSecondAtom(a.getKey());
                     this.getMap().removeSecondAtom(a.getKey());
                  });
         } else if (this.getSecondAtomByType(SecondAtom.SecondAtomType.WhereTheRiverFlows2).size() == 0 && timeOver) {
            this.getSecondAtomByType(SecondAtom.SecondAtomType.WhereTheRiverFlows).stream().collect(Collectors.toList())
                  .forEach(a -> {
                     this.removeSecondAtom(a.getKey());
                     this.getMap().removeSecondAtom(a.getKey());
                  });
         } else if (timeOver) {
            this.getSecondAtomByType(SecondAtom.SecondAtomType.WhereTheRiverFlows).stream().collect(Collectors.toList())
                  .forEach(a -> {
                     this.removeSecondAtom(a.getKey());
                     this.getMap().removeSecondAtom(a.getKey());
                  });
            this.getSecondAtomByType(SecondAtom.SecondAtomType.WhereTheRiverFlows2).stream()
                  .collect(Collectors.toList()).forEach(a -> {
                     this.removeSecondAtom(a.getKey());
                     this.getMap().removeSecondAtom(a.getKey());
                  });
         }
      }

      if (skillID == 11101031) {
         if (this.hasBuffBySkillID(11101032)) {
            this.temporaryStatResetBySkillID(11101032);
         }

         if (this.hasBuffBySkillID(11101033)) {
            this.temporaryStatResetBySkillID(11101033);
         }
      }

      if (skillID == 63101005) {
         this.setJobField("dragonFangX", 0);
         new ArrayList<>(this.getSecondAtomByType(SecondAtom.SecondAtomType.DragonFang)).forEach(sa -> {
            this.getMap().removeSecondAtom(sa.getKey());
            this.removeSecondAtom(sa.getKey());
         });
      }

      if (skillID == 162121044) {
         this.temporaryStatResetBySkillID(162121043);
      }

      if (skillID == 152111003) {
         Point pos = this.getCrystalControlPos();
         if (pos == null) {
            pos = this.getTruePosition();
         }

         if (this.getSummonBySkillID(152101000) == null) {
            Summoned summon = new Summoned(
                  this,
                  152101000,
                  this.getTotalSkillLevel(152101000),
                  this.getMap().calcDropPos(pos, this.getTruePosition()),
                  SummonMoveAbility.SHADOW_SERVANT_EXTEND,
                  (byte) 0,
                  2147483647L);
            this.getMap().spawnSummon(summon, Integer.MAX_VALUE);
            this.addSummon(summon);
            this.setCrystalControlPos(null);
         }

         if (this.getSummonBySkillID(152101008) == null) {
            SecondaryStatEffect e = this.getSkillLevelData(152101008);
            if (e != null) {
               Summoned summon2 = new Summoned(
                     this,
                     152101008,
                     this.getTotalSkillLevel(152101008),
                     this.getMap().calcDropPos(pos, this.getTruePosition()),
                     SummonMoveAbility.BIRD_FOLLOW,
                     (byte) 0,
                     e.getDuration());
               this.getMap().spawnSummon(summon2, e.getDuration());
               this.addSummon(summon2);
            }
         }
      }

      if (skillID == 151101006) {
         for (SecondAtom.Atom atom : new ArrayList<>(this.getSecondAtoms())) {
            if (atom.getType().getType() >= SecondAtom.SecondAtomType.Creation1.getType()
                  && atom.getType().getType() <= SecondAtom.SecondAtomType.Creation6.getType()) {
               this.getMap().removeSecondAtom(atom.getKey());
               this.removeSecondAtom(atom.getKey());
            }
         }
      }

      if (skillID == 61111008 || skillID == 61120008 || skillID == 61121053) {
         if (skillID == 61121053) {
            this.smashStack = (short) Math.min(700, this.getViperEnergyCharge());
            this.temporaryStatSet(61121053, Integer.MAX_VALUE, SecondaryStatFlag.SmashStack, this.smashStack);
         } else {
            this.resetSmashStack();
         }
      }

      if (skillID == 5121052 || skillID == 5121055) {
         this.invokeJobMethod("setSerpentSpirit", skillID);
      }

      if (skillID == 400031017 || skillID == 500061050) {
         this.temporaryStatSet(23110004, 15000, SecondaryStatFlag.PMDR, 10);
      }

      if (skillID == 400031053 || skillID == 500061016) {
         this.setJobField("autoChargeStackOnOffStack", 0);
      } else if (skillID == 400031049) {
         this.activeRelicUnboundCount = 0;
      } else if ((skillID == 400011112 || skillID == 500061054) && timeOver) {
         SecondaryStatEffect e = SkillFactory.getSkill(skillID).getEffect(this.getTotalSkillLevel(skillID));
         this.setRemainRevenantCount(e.getX());
         this.temporaryStatSet(SecondaryStatFlag.RevenantRage, skillID, this.getTotalSkillLevel(skillID), 1);
      } else if (skillID == 400041057 && timeOver) {
         this.photonRayCharge = 0;
      }

      if (skillID >= 5201012 && skillID <= 5201014) {
         for (Summoned summon : new ArrayList<>(this.getSummons())) {
            if (summon.getSkill() >= 5201012 && summon.getSkill() <= 5201014) {
               this.map.broadcastMessage(CField.SummonPacket.removeSummon(summon, true));
               this.map.removeMapObject(summon);
               this.visibleMapObjects.remove(summon);
               this.removeSummon(summon);
            }
         }
      }

      if (skillID == 5210015) {
         for (Summoned summonx : new ArrayList<>(this.getSummons())) {
            if (summonx.getSkill() == 5210015 || summonx.getSkill() == 5211019) {
               this.map.broadcastMessage(CField.SummonPacket.removeSummon(summonx, true));
               this.map.removeMapObject(summonx);
               this.visibleMapObjects.remove(summonx);
               this.removeSummon(summonx);
            }
         }
      }

      if (skillID == 152141501) {
         for (Summoned summonxx : new ArrayList<>(this.getSummons())) {
            if (summonxx.getSkill() == 152141501) {
               this.map.broadcastMessage(CField.SummonPacket.removeSummon(summonxx, true));
               this.map.removeMapObject(summonxx);
               this.visibleMapObjects.remove(summonxx);
               this.removeSummon(summonxx);
            }
         }
      }

      if ((skillID == 61111008 || skillID == 61120008 || skillID == 61121053)
            && this.getBuffedValue(SecondaryStatFlag.StopForceAtomInfo) != null) {
         this.temporaryStatReset(SecondaryStatFlag.StopForceAtomInfo);
         if (skillID == 61120008 || skillID == 61121053) {
            SecondaryStatEffect e = null;
            if (this.getSkillLevel(61120007) > 0) {
               e = SkillFactory.getSkill(61120007).getEffect(this.getSkillLevel(61120007));
            } else {
               e = SkillFactory.getSkill(61101002).getEffect(this.getSkillLevel(61101002));
            }

            e.applyTo(this);
         }
      }

      if (skillID == 400051046) {
         this.setJobField("useMascotFamiliar", false);
      }

      if (skillID == 80002633) {
         this.send(CField.userBonusAttackRequest(80002634, true, Collections.EMPTY_LIST));
      }

      if ((skillID == 400021099 || skillID == 500061066) && timeOver) {
         this.setJobField("crystalGateNum", 0);
      }

      if (skillID == 400041063 && timeOver) {
         this.setJobField("remainHeavenEarthHumanApparition", 0);
      }

      if (skillID == 400011055 && timeOver) {
         this.setJobField("styxCrossingCount", 0);
      }

      if (skillID == 2121054) {
         this.invokeJobMethod("cancelFireAuraTask");
      }

      if (skillID == 2221054) {
         this.invokeJobMethod("cancelIceAuraTask");
      }

      if (skillID == 51001005 && timeOver && this.getBuffedValue(SecondaryStatFlag.RoyalGuardPrepare) == null) {
         this.invokeJobMethod("onSetRoyalGuard", false);
      }

      if (skillID == 400001012) {
         Summoned summonxxx = this.getSummonBySkillID(400001012);
         if (summonxxx != null) {
            this.getMap().broadcastMessage(CField.SummonPacket.removeSummon(summonxxx, true));
            this.getMap().removeMapObject(summonxxx);
            if (summonxxx.getOwner() != null) {
               summonxxx.getOwner().removeVisibleMapObject(summonxxx);
            }

            this.removeSummon(summonxxx);
         }
      }

      if (skillID != 400031005 && skillID != 500061007) {
         if (skillID == 33001007) {
            for (Summoned summonxxx : new ArrayList<>(this.getSummons())) {
               if (summonxxx.getSkill() >= 33001007 && summonxxx.getSkill() <= 33001015 && !summonxxx.isSubJaguar()) {
                  this.map.broadcastMessage(CField.SummonPacket.removeSummon(summonxxx, true));
                  this.map.removeMapObject(summonxxx);
                  this.visibleMapObjects.remove(summonxxx);
                  this.removeSummon(summonxxx);
               }
            }
         }
      } else {
         for (Summoned summonxxxx : new ArrayList<>(this.getSummons())) {
            if (summonxxxx.getSkill() >= 33001007 && summonxxxx.getSkill() <= 33001015 && summonxxxx.isSubJaguar()) {
               this.map.broadcastMessage(CField.SummonPacket.removeSummon(summonxxxx, true));
               this.map.removeMapObject(summonxxxx);
               this.visibleMapObjects.remove(summonxxxx);
               this.removeSummon(summonxxxx);
            }
         }
      }

      if (skillID == 400031007) {
         this.temporaryStatResetBySkillID(400031008);
         this.temporaryStatResetBySkillID(400031009);

         for (Summoned summonxxxxx : new ArrayList<>(this.getSummons())) {
            if (summonxxxxx.getSkill() >= 400031007 && summonxxxxx.getSkill() <= 400031009) {
               this.map.broadcastMessage(CField.SummonPacket.removeSummon(summonxxxxx, true));
               this.map.removeMapObject(summonxxxxx);
               this.visibleMapObjects.remove(summonxxxxx);
               this.removeSummon(summonxxxxx);
            }
         }
      }

      if (skillID != 2311002 && skillID % 10000 != 8001) {
         if (skillID == 35101005) {
            if (!this.getMechDoors().isEmpty()) {
               this.removeMechDoor();
            }
         } else if (skillID == 21000000) {
            this.combo = 0;
         } else if (skillID == 27120005) {
            this.setJobField("stackBuffCount", (byte) 0);
         } else if (skillID == 15001022) {
            this.setJobField("lightningStack", 0);
         } else if (skillID == 400011047) {
            this.lastDarknessAuraBarrierTime = 0L;
            this.darknessAuraStack = 0;
         } else if (skillID == 400021096 && timeOver) {
            this.setJobField("lawOfGravityTargetID", 0);
         }
      } else if (!this.getDoors().isEmpty()) {
         this.removeDoor();
         this.silentPartyUpdate();
      }

      if (skillID == 21110016) {
         this.setCombo((short) 500);
      }

      if (skillID == 21111030 && this.getBuffedValue(SecondaryStatFlag.AdrenalinBoost) == null) {
         this.setCombo((short) 800);
         this.send(CField.aranCombo(this.combo));
      }

      if (skillID == 400011123) {
         for (MapleMonster mob : this.getMap().getAllMonstersThreadsafe()) {
            if (mob.isAlive() && mob.getBlizzardTempestEndTime() != 0L
                  && mob.getBlizzardTempestEndTime() <= System.currentTimeMillis()) {
               mob.setBlizzardTempestEndTime(0L);
               mob.setBlizzardTempestStack(0);
               PacketEncoder packet = new PacketEncoder();
               packet.writeShort(SendPacketOpcode.BLIZZARD_TEMPEST_DEBUFF.getValue());
               packet.writeInt(1);
               packet.writeInt(mob.getObjectId());
               packet.writeInt(0);
               packet.writeInt(0);
               this.send(packet.getPacket());
            }
         }
      }

      if ((skillID == 9001004 || skillID == 9101004)
            && this.client.getChannelServer().getPlayerStorage().getCharacterById(this.getId()) != null) {
         this.map.broadcastMessage(this, CField.spawnPlayerMapobject(this), false);
      }

      if (skillID == 35121013) {
         SkillFactory.getSkill(35121005).getEffect(this.getTotalSkillLevel(35121005)).applyTo(this);
      }

      if (skillID == 400051033) {
         SecondaryStatEffect effect = this.getSkillLevelData(400051033);
         int remain = (int) this.getRemainCooltime(400051033);
         if (remain > 1000 && !this.hasBuffBySkillID(400051033)) {
            Equip weapon = (Equip) this.getInventory(MapleInventoryType.EQUIPPED).getItem((short) -11);
            if (weapon != null) {
               int pad = (int) (weapon.getWatk() * (effect.getY() * 0.01));
               this.temporaryStatSet(SecondaryStatFlag.indiePAD, 400051033, remain, -pad);
            }
         }
      } else if (skillID == 14111024) {
         for (Summoned summonxxxxxx : this.getSummons()) {
            if (summonxxxxxx != null && summonxxxxxx.getSkill() == 14111024) {
               this.getMap().broadcastMessage(CField.SummonPacket.removeSummon(summonxxxxxx, true));
               this.getMap().removeMapObject(summonxxxxxx);
               summonxxxxxx.getOwner().removeVisibleMapObject(summonxxxxxx);
               this.removeSummon(summonxxxxxx);
            }
         }
      } else if (skillID == 14121054) {
         for (Summoned summonxxxxxxx : this.getSummons()) {
            if (summonxxxxxxx != null && summonxxxxxxx.getSkill() == 14121055 || summonxxxxxxx.getSkill() == 14121056) {
               this.getMap().broadcastMessage(CField.SummonPacket.removeSummon(summonxxxxxxx, true));
               this.getMap().removeMapObject(summonxxxxxxx);
               summonxxxxxxx.getOwner().removeVisibleMapObject(summonxxxxxxx);
               this.removeSummon(summonxxxxxxx);
            }
         }
      } else if (skillID == 64100004 || skillID == 64101009 || skillID == 64110005 || skillID == 64111013
            || skillID == 64120006 || skillID == 64121020) {
         this.setJobField("weaponVarietyFlag", WeaponvVrietyFlag.NONE.getFlag());
         this.setJobField("lastUseCadenaSkill", 0);
      } else if (skillID == 400051006) {
         this.setBulletPartyValue(0);
      } else if (skillID == 400031005 || skillID == 500061007) {
         this.removeJaguarStorm();
      } else if (skillID == 400011066) {
         this.setBodyOfSteal(0);
         this.removeSkillStartTime(400011066);
      } else if (skillID == 400051011) {
         this.setEnergyBurst(0);
      } else if (skillID == 1200014 || skillID == 1220010) {
         this.invokeJobMethod("blessedHammerReset");
      } else if (skillID == 400011053) {
         if (this.getBuffedValue(SecondaryStatFlag.BlessedHammerBig) != null) {
            SkillFactory.getSkill(400011052).getEffect(this.getSkillLevel(400011052)).applyTo(this);
         }
      } else if (skillID == 400011052) {
         if (this.getBuffedValue(SecondaryStatFlag.BlessedHammer) != null) {
            this.temporaryStatSet(SecondaryStatFlag.BlessedHammer, 400011052, Integer.MAX_VALUE, 0);
            this.temporaryStatReset(SecondaryStatFlag.BlessedHammer);
         }
      } else if (skillID == 400031020) {
         this.setSlowAttackCount(0);
      } else if (skillID == 400041032) {
         this.setReadyToDie(0);
      } else if (skillID == 12101024) {
         this.setJobField("orbitalExplosionStack", 0);
      } else if (skillID == 400041028 || skillID == 500061004) {
         this.setShadowServantChangePosCount(0);
      } else if (skillID == 400001010) {
         this.send(CField.userBonusAttackRequest(400001011, true, Collections.EMPTY_LIST));
      } else if (skillID >= 400001025 && skillID <= 400001029) {
         SecondaryStatEffect eff = this.getSkillLevelData(400001024);
         if (eff != null && timeOver) {
            this.send(CField.skillCooldown(400001024, eff.getY() * 1000));
            this.addCooldown(400001024, System.currentTimeMillis(), eff.getY() * 1000);
         }
      } else if (skillID == 400041040) {
         this.setJobField("markOfPhantomX", 0);
         this.setJobField("markOfPhantomDebuffTarget", 0);
      } else if (skillID == 400011077) {
         List<Summoned> removes = new LinkedList<>();

         try {
            for (Summoned summonxxxxxxxx : this.getSummonsReadLock()) {
               if (summonxxxxxxxx.getSkill() >= 400011077 && summonxxxxxxxx.getSkill() <= 400011078) {
                  removes.add(summonxxxxxxxx);
               }
            }
         } finally {
            this.unlockSummonsReadLock();
         }

         for (Summoned summonxxxxxxxxx : removes) {
            this.getMap().broadcastMessage(CField.SummonPacket.removeSummon(summonxxxxxxxxx, true));
            this.getMap().removeMapObject(summonxxxxxxxxx);
            this.removeVisibleMapObject(summonxxxxxxxxx);
            this.removeSummon(summonxxxxxxxxx);
         }

         this.temporaryStatResetBySkillID(400011078);
      } else if (skillID == 152121005) {
         List<Summoned> removes = new LinkedList<>();

         try {
            for (Summoned summonxxxxxxxxx : this.getSummonsReadLock()) {
               if (summonxxxxxxxxx != null && summonxxxxxxxxx.getSkill() >= 152121005
                     && summonxxxxxxxxx.getSkill() <= 152121006) {
                  removes.add(summonxxxxxxxxx);
               }
            }
         } finally {
            this.unlockSummonsReadLock();
         }

         for (Summoned summonxxxxxxxxxx : removes) {
            this.getMap().broadcastMessage(CField.SummonPacket.removeSummon(summonxxxxxxxxxx, true));
            this.getMap().removeMapObject(summonxxxxxxxxxx);
            this.removeVisibleMapObject(summonxxxxxxxxxx);
            this.removeSummon(summonxxxxxxxxxx);
         }

         SecondaryStatEffect e = SkillFactory.getSkill(152101008).getEffect(this.getTotalSkillLevel(152101008));
         if (e != null) {
            e.applyTo(this);
         }

         e = SkillFactory.getSkill(152001003).getEffect(this.getTotalSkillLevel(152001003));
         if (e != null) {
            e.applyTo(this);
         }
      } else if (skillID == 400051009 && timeOver) {
         this.invokeJobMethod("cancelMultipleOptionTask");
      } else if (skillID == 400041029 || skillID == 500061059) {
         if (this.xenonSurplus >= this.getMaxSupply()) {
            this.xenonSurplus = 20;
            this.updateXenonSurplus((short) 20);
         }
      } else if (skillID == 400011010) {
         this.cancelDemonFrenzyTask();
      } else if (skillID == 25121009) {
         this.setSpiritWardCount(0);
      } else if (skillID == 152000009 || skillID == 152110009 || skillID == 152120012) {
         this.setBlessMark(0);
      } else if (skillID == 152110008 || skillID == 152120014) {
         Summoned summonxxxxxxxxxx = this.getSummonByMovementType(SummonMoveAbility.SHADOW_SERVANT_EXTEND);
         if (summonxxxxxxxxxx != null) {
            this.getMap().broadcastMessage(this, CField.summonSetEnergy(this, summonxxxxxxxxxx, 2), true);
            summonxxxxxxxxxx.resetEnableEnergySkill();
            this.getMap().broadcastMessage(this, CField.summonCrystalToggleSkill(this, summonxxxxxxxxxx, 2), true);
            this.setUseMortalWingBit(false);
            this.setActiveGloryWing(false);
         }
      } else if (skillID == 1320021 || skillID == 1320022 || skillID == 1320023) {
         this.setReincarnationCount(0);
         this.setReincarnationMaxCount(0);
         this.setStartReincarnationTime(0L);
      } else if (skillID == 1320019) {
         PacketEncoder p = new PacketEncoder();
         p.write(false);
         SkillEffect ex = new SkillEffect(this.id, this.level, 1320016, 1, p);
         this.send(ex.encodeForLocal());
         this.getMap().broadcastMessage(this, ex.encodeForRemote(), false);
         PostSkillAffected e_ = new PostSkillAffected(this.id, 1320019, 1);
         this.send(e_.encodeForLocal());
      } else if (skillID == 3010001 || skillID == 3300001 || skillID == 3310000) {
         this.setCurseWeakeningStack(0);
      } else if (skillID == 3311012 && timeOver) {
         this.setCurseToleranceStack(0);
      } else if (skillID == 3321034) {
         SecondaryStatEffect eff = SkillFactory.getSkill(3311002).getEffect(this.getSkillLevel(3311002));
         this.setAutoChargeMaxStack(eff.getY());
         this.setAutoChargeCycle(eff.getS2() * 1000);
      } else if (skillID == 65121101) {
         this.setJobField("trinityM", 0);
      } else if (skillID == 20040219 || skillID == 20040220) {
         this.invokeJobMethod("updateLarkness", false);
      } else if (skillID == 11121005 && timeOver) {
         this.temporaryStatResetBySkillID(11121011);
         this.temporaryStatResetBySkillID(11121012);
      } else if (skillID == 400051022) {
         List<Summoned> removes = new ArrayList<>();

         try {
            List<Summoned> ss = this.getSummonsReadLock();
            ss.forEach(s -> {
               if (s.getSkill() == 400051023) {
                  removes.add(s);
               }
            });
         } finally {
            this.unlockSummonsReadLock();
         }

         removes.forEach(s -> {
            this.getMap().broadcastMessage(CField.SummonPacket.removeSummon(s, true));
            this.getMap().removeMapObject(s);
            this.removeVisibleMapObject(s);
            this.removeSummon(s);
         });
      }

      this.stats.recalcLocalStats(this, false);
   }

   public void temporaryStatSet(int skillID, int duration, SecondaryStatFlag flag, int value) {
      this.temporaryStatSet(flag, skillID, duration, value);
   }

   public void temporaryStatSet(SecondaryStatFlag flag, int skillID, int duration, int value) {
      this.temporaryStatSet(flag, skillID, duration, this.getTotalSkillLevel(skillID), value);
   }

   public void temporaryStatSet(SecondaryStatFlag flag, int skillID, int duration, int skillLevel, int value) {
      this.temporaryStatSet(flag, skillID, duration, skillLevel, value, false);
   }

   public void temporaryStatSet(SecondaryStatFlag flag, int skillID, int duration, int skillLevel, int value,
         boolean addTime) {
      this.temporaryStatSet(flag, skillID, duration, skillLevel, value, addTime, true);
   }

   public void temporaryStatSet(SecondaryStatFlag flag, int skillID, int duration, int skillLevel, int value,
         boolean addTime, boolean showBuffIcon) {
      this.temporaryStatSet(flag, skillID, duration, skillLevel, value, addTime, showBuffIcon, true);
   }

   public void temporaryStatSet(
         SecondaryStatFlag flag, int skillID, int duration, int skillLevel, int value, boolean addTime,
         boolean showBuffIcon, boolean canLock) {
      if (this.getClient().getPlayer() != null) {
         if (addTime && duration < 2100000000) {
            duration = this.getBuffTime(skillID, skillLevel, duration);
         }

         boolean sendPacket = true;
         if (skillID >= 5201012 && skillID <= 5201014) {
            for (int i = 5201012; i <= 5201014; i++) {
               if (this.hasBuffBySkillID(i)) {
                  sendPacket = false;
               }
            }
         }

         if (skillID >= 5210015 && skillID <= 5210018) {
            for (int ix = 5210015; ix <= 5210018; ix++) {
               if (this.hasBuffBySkillID(ix)) {
                  sendPacket = false;
               }
            }
         }

         if ((skillID == 400021068 || skillID == 500061012 || skillID == 400021047)
               && flag != SecondaryStatFlag.AutoChargeStack) {
            showBuffIcon = false;
         }

         if (sendPacket) {
            SecondaryStat secondaryStat = this.getSecondaryStat();
            SecondaryStatManager manager = new SecondaryStatManager(this.getClient(), secondaryStat, skillID,
                  skillLevel, duration, System.currentTimeMillis());
            if (flag.isIndie()) {
               manager.putIndieStatValue(flag, value, showBuffIcon);
            } else {
               manager.putStatValue(flag, value);
            }

            if (!SecondaryStat.isNotDisplayBuffIcon(skillID) && showBuffIcon) {
               manager.temporaryStatSet();
            }

            this.temporaryStatSet(skillID, canLock);
         }
      }
   }

   public void temporaryStatSet(int skillID, int skillLevel, int duration, Map<SecondaryStatFlag, Integer> flags) {
      this.temporaryStatSet(skillID, skillLevel, duration, flags, false);
   }

   public void temporaryStatSet(int skillID, int skillLevel, int duration, Map<SecondaryStatFlag, Integer> flags,
         boolean addTime) {
      this.temporaryStatSet(skillID, skillLevel, duration, flags, addTime, 0);
   }

   public void temporaryStatSet(int skillID, int skillLevel, int duration, Map<SecondaryStatFlag, Integer> flags,
         boolean addTime, int fromID) {
      this.temporaryStatSet(skillID, skillLevel, duration, flags, addTime, fromID, false);
   }

   public void temporaryStatSet(int skillID, int skillLevel, int duration, Map<SecondaryStatFlag, Integer> flags,
         boolean addTime, int fromID, boolean firstSet) {
      this.temporaryStatSet(skillID, skillLevel, duration, flags, addTime, fromID, firstSet, false);
   }

   public void temporaryStatSet(
         int skillID, int skillLevel, int duration, Map<SecondaryStatFlag, Integer> flags, boolean addTime, int fromID,
         boolean firstSet, boolean fromMob) {
      this.temporaryStatSet(skillID, skillLevel, duration, flags, addTime, fromID, firstSet, false, this.getId());
   }

   public void temporaryStatSet(
         int skillID,
         int skillLevel,
         int duration,
         Map<SecondaryStatFlag, Integer> flags,
         boolean addTime,
         int fromID,
         boolean firstSet,
         boolean fromMob,
         int targetID) {
      if (addTime) {
         duration = this.getBuffTime(skillID, skillLevel, duration);
      }

      SecondaryStat secondaryStat = this.getSecondaryStat();
      secondaryStat.setFirstSet(firstSet);
      SecondaryStatManager manager = new SecondaryStatManager(
            this.getClient(), secondaryStat, skillID, skillLevel, duration, System.currentTimeMillis(), fromID);

      for (Entry<SecondaryStatFlag, Integer> entry : flags.entrySet()) {
         if (entry.getKey().isIndie()) {
            manager.putIndieStatValue(entry.getKey(), entry.getValue());
         } else {
            manager.putStatValue(entry.getKey(), entry.getValue());
            if (secondaryStat.getVarriable(entry.getKey().name() + "TargetID") != null) {
               secondaryStat.setVarriableInt(entry.getKey().name() + "TargetID", targetID);
            }
         }
      }

      if (!SecondaryStat.isNotDisplayBuffIcon(skillID)) {
         if (fromMob) {
            manager.setFromMob(true);
         }

         manager.temporaryStatSet();
      }

      this.temporaryStatSet(skillID);
   }

   public void temporaryStatSet(int skillID) {
      this.temporaryStatSet(skillID, true);
   }

   public void temporaryStatSet(int skillID, boolean canLock) {
      if (skillID == 9001004 || skillID == 9101004) {
         this.map.broadcastMessage(this, CField.removePlayerFromMap(this.getId()), false);
      } else if (skillID == 1001
            || skillID == 10001001
            || skillID == 20001001
            || skillID == 20011001
            || skillID == 20021001
            || skillID == 11001
            || skillID == 35121005) {
         this.prepareRecovery();
      } else if (skillID == 2321052 && GameConstants.isLara(this.getJob())
            && this.getBuffedValue(SecondaryStatFlag.LotusFlower) != null) {
         this.temporaryStatResetBySkillID(400001061);
      }

      this.stats.recalcLocalStats(this, canLock);
   }

   public int getBuffTime(int skillID, int skillLevel, int time) {
      Skill skill = SkillFactory.getSkill(skillID);
      if (skill == null) {
         return time;
      } else if (GameConstants.isTheSeedSkill(skillID)) {
         return time;
      } else if (skillID == 61121053 || skillID == 14111024 || skillID == 152111007 || skillID == 1301013
            || skillID == 2311011) {
         return time;
      } else if (skillID == 131003026) {
         return 180000;
      } else {
         int duration = time;
         if (skillID == 3121002) {
            duration = time + this.getSkillLevelDataOne(3120043, SecondaryStatEffect::getDuration);
         }

         if (skillID == 3221002) {
            duration += this.getSkillLevelDataOne(3220043, SecondaryStatEffect::getDuration);
         }

         if (skillID == 3321022) {
            duration += this.getSkillLevelDataOne(3320025, SecondaryStatEffect::getDuration);
         }

         if (skillID == 5321004) {
            duration += this.getSkillLevelDataOne(5320044, SecondaryStatEffect::getDuration);
         }

         if (skillID == 20040218 || skillID == 20040219) {
            duration += this.getSkillLevelDataOne(27120008, SecondaryStatEffect::getDuration);
         }

         if (skillID == 51111004) {
            duration += this.getSkillLevelDataOne(51120043, SecondaryStatEffect::getDuration);
         }

         if (skillID == 32121006) {
            duration += this.getSkillLevelDataOne(32120064, SecondaryStatEffect::getDuration);
         }

         if (skillID == 35111002) {
            duration += this.getSkillLevelDataOne(35120044, SecondaryStatEffect::getDuration);
         }

         if (skillID == 35111008) {
            duration += this.getSkillLevelDataOne(35120048, SecondaryStatEffect::getDuration);
         }

         if (skillID == 36121013 || skillID == 36121002 || skillID == 36121014) {
            duration += this.getSkillLevelDataOne(36120051, SecondaryStatEffect::getDuration);
         }

         if (skillID == 61121105) {
            duration += this.getSkillLevelDataOne(61120047, SecondaryStatEffect::getDuration);
         }

         if (skillID == 2311009) {
            duration += this.getSkillLevelDataOne(2320044, SecondaryStatEffect::getDuration);
         }

         if (skillID == 151111001) {
            duration += this.getSkillLevelDataOne(151120035, SecondaryStatEffect::getDuration);
         }

         if (skillID == 21110016) {
            duration += this.getSkillLevelDataOne(21120064, SecondaryStatEffect::getDuration);
         }

         if (skillID == 11111023) {
            duration += this.getSkillLevelDataOne(11120043, SecondaryStatEffect::getDuration);
         }

         if (skillID == 11111029) {
            duration += this.getSkillLevelDataOne(11120048, SecondaryStatEffect::getDuration);
         }

         if (skillID == 51121016) {
            duration += this.getSkillLevelDataOne(51120051, SecondaryStatEffect::getDuration);
         }

         if (skill.getType() == 33 && skill.isSummon()) {
            if (skillID == 35111002) {
               duration = (int) (duration
                     + duration * 0.01 * this.getSkillLevelDataOne(35120001, SecondaryStatEffect::getY));
            } else {
               duration = (int) (duration + duration * 0.01 * this.getStat().summonTimeR);
            }
         }

         SecondaryStatEffect effect = skill.getEffect(skillLevel);
         if (!skill.isNotIncBuffDuration() && !skill.isHyper()) {
            if (effect != null && effect.isSkill()) {
               if (this.getStat().getBufftimeR() > 0) {
                  duration = (int) (duration + time * 0.01 * this.getStat().getBufftimeR());
               }

               if (this.getJaguarBuffR() > 0) {
                  duration = (int) (duration + time * 0.01 * this.getJaguarBuffR());
               }
            }

            return duration;
         } else {
            return duration;
         }
      }
   }

   public void dispel() {
      if (!this.isHidden()) {
         java.lang.reflect.Field[] declaredFields = this.secondaryStat.getClass().getDeclaredFields();
         Flag992 flag = this.secondaryStat.getFlag();
         Flag992 toRemove = new Flag992();
         List<SecondaryStatFlag> removes = new ArrayList<>();
         boolean existIndie = false;

         try {
            for (java.lang.reflect.Field field : declaredFields) {
               if (field.isAnnotationPresent(Annotation.class)) {
                  Annotation annotation = field.getAnnotation(Annotation.class);
                  if (annotation.value().equals("Indie")) {
                     SecondaryStatFlag stat = SecondaryStatFlag.getByName(field.getName());
                     if (flag.check(stat)) {
                        field.setAccessible(true);
                        Object obj = field.get(this.secondaryStat);
                        if (obj != null) {
                           List<IndieTemporaryStatEntry> list = (ArrayList) obj;

                           for (IndieTemporaryStatEntry entry : new ArrayList<>(list)) {
                              flag.removeFlag(stat);
                              toRemove.setFlag(stat);
                              removes.add(stat);
                              list.remove(entry);
                              existIndie = true;
                              this.deregisterSecondaryStats(entry.getSkillID(), true);
                           }
                        }
                     }
                  }
               } else if (field.getName().contains("Till")) {
                  field.setAccessible(true);
                  long till = field.getLong(this.secondaryStat);
                  if (till != -99999L) {
                     String name = field.getName().split("Till")[0];
                     SecondaryStatFlag stat = SecondaryStatFlag.getByName(name);
                     flag.removeFlag(stat);
                     toRemove.setFlag(stat);
                     removes.add(stat);
                     this.deregisterSecondaryStats(this.secondaryStat.getVarriableInt(name + "Value"), true);
                     this.secondaryStat.setVarriableLong(name + "Till", -99999L);
                     this.secondaryStat.setVarriableInt(name + "Value", -99999);
                     this.secondaryStat.setVarriableInt(name + "Reason", -99999);
                     this.secondaryStat.setVarriableInt(name + "FromID", -99999);
                  }
               }
            }
         } catch (Exception var16) {
         }

         if (toRemove.hasBuff()) {
            if (!existIndie) {
               for (int pos = 30; pos >= 1; pos--) {
                  for (int j = 31; j >= 0; j--) {
                     int vl = 1 << j;
                     if ((toRemove.getFlags()[pos] & vl) != 0L) {
                        for (SecondaryStatFlag ssf : SecondaryStatFlag.values()) {
                           if (ssf.getBit() == 31 - j + 32 * (30 - pos) && ssf.isIndie()) {
                              existIndie = true;
                              break;
                           }
                        }
                     }
                  }

                  if (existIndie) {
                     break;
                  }
               }
            }

            PacketEncoder packet = new PacketEncoder();
            packet.writeShort(SendPacketOpcode.CANCEL_BUFF.getValue());
            packet.write(existIndie);
            packet.write(existIndie);
            packet.write(0);
            toRemove.encode(packet);
            if (!existIndie) {
               packet.writeInt(0);
            } else {
               this.secondaryStat.encodeIndieTemporaryStats(packet, toRemove, false);
               packet.write(4);
               packet.write(1);
            }

            this.send(packet.getPacket());
            this.deregisterSecondaryStats(removes, true);
            this.getMap().broadcastMessage(this, CWvsContext.BuffPacket.remoteTemporaryStatReset(this, toRemove),
                  false);
         }
      }
   }

   public void dispelSkill(int skillID) {
      this.temporaryStatResetBySkillID(skillID);
   }

   public void dispelBuff(int skillID) {
      this.temporaryStatResetBySkillID(skillID);
   }

   public void cancelAllTask(boolean disconnect, boolean useBuffProtector) {
      if (this.field_union != null) {
         this.field_union.endRaid(this);
      }

      this.cancelFireBombTask();
      this.cancelFishingTask();
      this.cancelChairTask();
      this.cancelDancePointTask();
      this.cancelTimeoutMoveMapTask();
      this.cancelMapTimeLimitTask();
      this.cancelBuzzingHouseTask();
      this.cancelFrozenLinkTask();
      if (!useBuffProtector) {
         this.cancelDemonFrenzyTask();
         this.cancelAncientAstraTask();
      }

      if (this.getHungryMuto() != null) {
         this.getHungryMuto().cancelTask();
         this.setHungryMuto(null);
      }
   }

   public void cancelAllBuffs() {
      java.lang.reflect.Field[] declaredFields = this.secondaryStat.getClass().getDeclaredFields();
      Flag992 flag = this.secondaryStat.getFlag();
      Flag992 toRemove = new Flag992();
      List<SecondaryStatFlag> removes = new ArrayList<>();
      boolean existIndie = false;
      SecondaryStatFlag[] toRestore = new SecondaryStatFlag[] {
            SecondaryStatFlag.EmpressBlessStack,
            SecondaryStatFlag.AuraWeaponStack,
            SecondaryStatFlag.RouletteStack,
            SecondaryStatFlag.MagicCircuitFullDriveStack,
            SecondaryStatFlag.GripOfAgony
      };
      Map<SecondaryStatFlag, Pair<Integer, Integer>> restore = new HashMap<>();

      for (SecondaryStatFlag toRestoreCheck : toRestore) {
         if (this.getBuffedValueDefault(toRestoreCheck, 0) != 0) {
            Integer reason = this.getSecondaryStatReason(toRestoreCheck);
            Integer stack = this.getBuffedValueDefault(toRestoreCheck, 0);
            restore.put(toRestoreCheck, new Pair<>(reason, stack));
         }
      }

      int runeDuration = 0;

      try {
         runeDuration = (int) this.getRemainCooltime(80002282);
      } catch (Exception var19) {
      }

      try {
         for (java.lang.reflect.Field field : declaredFields) {
            if (field.isAnnotationPresent(Annotation.class)) {
               Annotation annotation = field.getAnnotation(Annotation.class);
               if (annotation.value().equals("Indie")) {
                  SecondaryStatFlag stat = SecondaryStatFlag.getByName(field.getName());
                  if (flag.check(stat)) {
                     field.setAccessible(true);
                     Object obj = field.get(this.secondaryStat);
                     if (obj != null) {
                        List<IndieTemporaryStatEntry> list = (ArrayList) obj;

                        for (IndieTemporaryStatEntry entry : new ArrayList<>(list)) {
                           if (!GameConstants.isExceptionCancelSkillByDead(stat)
                                 && !GameConstants.isExceptionCancelSkillByDead(entry.getSkillID())) {
                              flag.removeFlag(stat);
                              toRemove.setFlag(stat);
                              removes.add(stat);
                              list.remove(entry);
                              existIndie = true;
                              this.deregisterSecondaryStats(entry.getSkillID(), true);
                           }
                        }
                     }
                  }
               }
            } else if (field.getName().contains("Till")) {
               field.setAccessible(true);
               long till = field.getLong(this.secondaryStat);
               if (till != -99999L) {
                  String name = field.getName().split("Till")[0];
                  int reason = this.secondaryStat.getVarriableInt(name + "Reason");
                  if (!GameConstants.isExceptionCancelSkillByDead(reason)) {
                     SecondaryStatFlag stat = SecondaryStatFlag.getByName(name);
                     if (!GameConstants.isExceptionCancelSkillByDead(stat)) {
                        flag.removeFlag(stat);
                        toRemove.setFlag(stat);
                        removes.add(stat);
                        this.deregisterSecondaryStats(this.secondaryStat.getVarriableInt(name + "Reason"), true);
                        this.secondaryStat.setVarriableLong(name + "Till", -99999L);
                        this.secondaryStat.setVarriableInt(name + "Value", -99999);
                        this.secondaryStat.setVarriableInt(name + "Reason", -99999);
                        this.secondaryStat.setVarriableInt(name + "FromID", -99999);
                     }
                  }
               }
            }
         }
      } catch (Exception var20) {
      }

      if (toRemove.hasBuff()) {
         if (!existIndie) {
            for (int pos = 30; pos >= 1; pos--) {
               for (int j = 31; j >= 0; j--) {
                  int vl = 1 << j;
                  if ((toRemove.getFlags()[pos] & vl) != 0L) {
                     for (SecondaryStatFlag ssf : SecondaryStatFlag.values()) {
                        if (ssf.getBit() == 31 - j + 32 * (30 - pos) && ssf.isIndie()) {
                           existIndie = true;
                           break;
                        }
                     }
                  }
               }

               if (existIndie) {
                  break;
               }
            }
         }

         PacketEncoder packet = new PacketEncoder();
         packet.writeShort(SendPacketOpcode.CANCEL_BUFF.getValue());
         packet.write(existIndie);
         packet.write(existIndie);
         packet.write(0);
         toRemove.encode(packet);
         if (!existIndie) {
            packet.writeInt(0);
         } else {
            this.secondaryStat.encodeIndieTemporaryStats(packet, toRemove, false);
            packet.write(4);
            packet.write(1);
         }

         this.send(packet.getPacket());
         this.deregisterSecondaryStats(removes, true);
         this.getMap().broadcastMessage(this, CWvsContext.BuffPacket.remoteTemporaryStatReset(this, toRemove), false);
      }

      this.checkExtraAbility();
      this.checkLiberationStats();
      this.checkImprintedStone();
      if (DBConfig.isGanglim) {
      }

      if (!restore.isEmpty()) {
         for (Entry<SecondaryStatFlag, Pair<Integer, Integer>> entryx : restore.entrySet()) {
            Integer reason = entryx.getValue().getLeft();
            Integer stack = entryx.getValue().getRight();
            this.temporaryStatSet(entryx.getKey(), reason, Integer.MAX_VALUE, stack);
         }
      }

      if (runeDuration > 0) {
         this.temporaryStatSet(80002282, runeDuration, SecondaryStatFlag.RuneBlocked, 1);
      }
   }

   public void cancelMorphs() {
      this.temporaryStatReset(SecondaryStatFlag.Morph);
   }

   public int getSkillLevel(int skillid) {
      return this.getTotalSkillLevel(skillid);
   }

   public int getTotalSkillLevel(int skillID) {
      switch (skillID) {
         case 27111009:
         case 33001007:
         case 33001008:
         case 33001009:
         case 33001010:
         case 33001011:
         case 33001012:
         case 33001013:
         case 33001014:
         case 33001015:
         case 80001757:
         case 135001009:
         case 152001005:
         case 152101000:
         case 152101004:
         case 152110004:
            return 1;
         default:
            if (this.getHexaCore() != null) {
               int sixthlevel = this.getHexaCore().getSkillLevel(skillID);
               if (sixthlevel > 0) {
                  return sixthlevel;
               }
            }

            if (this.getLinkSkill() != null) {
               int skillLv = 0;
               LinkSkillEntry linkSkill;
               if ((linkSkill = this.getLinkSkill().getLinkSkill(skillID, this.getId())) != null) {
                  skillLv += linkSkill.getSkillLevel();
               }

               int dumpSkill = GameConstants.getDuplicateOfOriginalSkill(skillID);
               if (dumpSkill != 0 && (linkSkill = this.getLinkSkill().getLinkSkill_(dumpSkill, this.getId())) != null) {
                  skillLv += linkSkill.getSkillLevel();
               }

               for (LinkSkillEntry skill : this.getLinkSkill().getLinkSkills()) {
                  if (SkillEncode.getStackedLinkSkill(skill.getRealSkillID()) == skillID
                        && (skill.getLinkingPlayerID() == this.getId() || skill.getLinkedPlayerID() == this.getId())) {
                     skillLv += skill.getSkillLevel();
                  }
               }

               if (skillLv > 0) {
                  return skillLv;
               }
            }

            int level = this.getTotalSkillLevel(SkillFactory.getSkill(skillID), skillID);
            if (level <= 0 && GameConstants.isYetiPinkBean(this.getJob())) {
               if (SkillFactory.getSkillsByJob(13500).contains(skillID)) {
                  return 1;
               }

               if (SkillFactory.getSkillsByJob(13100).contains(skillID)) {
                  return 1;
               }
            }

            if (level <= 0) {
               level = this.getTotalSkillLevel(SkillFactory.getSkill(GameConstants.getLinkedAranSkill(skillID)),
                     skillID);
            }

            if (skillID == 2311003 && level <= 0) {
               level = 1;
            }

            if (skillID == 63121140 && level <= 0) {
               level = 1;
            }

            return level;
      }
   }

   public void silentEnforceMaxHpMp() {
      this.stats.setMp(this.stats.getMp(), this);
      this.stats.setHp(this.stats.getHp(), true, this);
   }

   public void enforceMaxHpMp() {
      Map<MapleStat, Long> statups = new EnumMap<>(MapleStat.class);
      if (this.stats.getMp() > this.stats.getCurrentMaxMp(this)) {
         this.stats.setMp(this.stats.getMp(), this);
         statups.put(MapleStat.MP, this.stats.getMp());
      }

      if (this.stats.getHp() > this.stats.getCurrentMaxHp(this)) {
         this.stats.setHp(this.stats.getHp(), this);
         statups.put(MapleStat.HP, this.stats.getHp());
      }

      if (statups.size() > 0) {
         this.client.getSession().writeAndFlush(CWvsContext.updatePlayerStats(statups, this));
      }
   }

   public Field getMap() {
      return this.map;
   }

   public void setMap(Field newmap) {
      this.map = newmap;
   }

   public void setMap(int PmapId) {
      this.mapid = PmapId;
   }

   public int getMapId() {
      return this.map != null && !this.ccByScript ? this.map.getId() : this.mapid;
   }

   public byte getInitialSpawnpoint() {
      return this.initialSpawnPoint;
   }

   public void setId(int id) {
      this.id = id;
   }

   public int getId() {
      return this.id;
   }

   public String getName() {
      return this.name;
   }

   public final String getBlessOfFairyOrigin() {
      return this.BlessOfFairy_Origin;
   }

   public final String getBlessOfEmpressOrigin() {
      return this.BlessOfEmpress_Origin;
   }

   public final short getLevel() {
      return this.level;
   }

   public final int getFame() {
      return this.fame;
   }

   public final int getFallCounter() {
      return this.fallcounter;
   }

   public final MapleClient getClient() {
      return this.client;
   }

   public final void setClient(MapleClient client) {
      this.client = client;
   }

   public long getExp() {
      return this.exp;
   }

   public short getRemainingAp() {
      return this.remainingAp;
   }

   public int getRemainingSp() {
      return this.remainingSp[GameConstants.getSkillBook(this.job, 0)];
   }

   public int getRemainingSp(int skillbook) {
      return this.remainingSp[skillbook];
   }

   public int[] getRemainingSps() {
      return this.remainingSp;
   }

   public int getRemainingSpSize() {
      int ret = 0;

      for (int i = 0; i < this.remainingSp.length; i++) {
         if (this.remainingSp[i] > 0) {
            ret++;
         }
      }

      return ret;
   }

   public short getHpApUsed() {
      return this.hpApUsed;
   }

   public boolean isHidden() {
      return this.getSecondaryStatReason(SecondaryStatFlag.DarkSight) / 1000000 == 9;
   }

   public boolean isDominant() {
      return this.dominant;
   }

   public void setDominant(boolean active) {
      this.dominant = active;
   }

   public void setHpApUsed(short hpApUsed) {
      this.hpApUsed = hpApUsed;
   }

   public int getSkinColor() {
      return this.skinColor;
   }

   public void setSkinColor(int skinColor) {
      this.skinColor = skinColor;
   }

   public byte getSecondSkinColor() {
      return this.secondSkinColor;
   }

   public void setSecondSkinColor(byte secondSkinColor) {
      this.secondSkinColor = secondSkinColor;
   }

   public short getJob() {
      return this.job;
   }

   public byte getGender() {
      return this.gender;
   }

   public byte getSecondGender() {
      return this.secondgender;
   }

   public int getHair() {
      return this.hair;
   }

   public int getSecondHair() {
      return this.secondhair;
   }

   public int getFace() {
      return this.face;
   }

   public int getSecondFace() {
      return this.secondface;
   }

   public int getDemonMarking() {
      return this.demonMarking;
   }

   public void setDemonMarking(int mark) {
      this.demonMarking = mark;
   }

   public void setName(String name) {
      this.name = name;
   }

   public void setExp(long exp) {
      this.exp = exp;
   }

   public void setHair(int hair) {
      this.hair = hair;
   }

   public void setSecondHair(int secondhair) {
      this.secondhair = secondhair;
   }

   public void setFace(int face) {
      this.face = face;
   }

   public void setSecondFace(int secondface) {
      this.secondface = secondface;
   }

   public void setFame(int fame) {
      this.fame = fame;
   }

   public void setFallCounter(int fallcounter) {
      this.fallcounter = fallcounter;
   }

   public Point getOldPosition() {
      return this.old;
   }

   public void setOldPosition(Point x) {
      this.old = x;
   }

   public void setRemainingAp(short remainingAp) {
      this.remainingAp = remainingAp;
   }

   public void setRemainingSp(int remainingSp) {
      this.remainingSp[GameConstants.getSkillBook(this.job, 0)] = remainingSp;
   }

   public void setRemainingSp(int remainingSp, int skillbook) {
      this.remainingSp[skillbook] = remainingSp;
   }

   public void setGender(byte gender) {
      this.gender = gender;
   }

   public void setSecondGender(byte secondgender) {
      this.secondgender = secondgender;
   }

   public void setInvincible(boolean invinc) {
      this.invincible = invinc;
   }

   public boolean isInvincible() {
      return this.invincible;
   }

   public CheatTracker getCheatTracker() {
      return this.anticheat;
   }

   public Friend getBuddylist() {
      return this.buddylist;
   }

   public void addFame(int famechange) {
      this.fame += famechange;
      this.getTrait(MapleTrait.MapleTraitType.charm).addLocalExp(famechange);
   }

   public void updateFame() {
      this.updateSingleStat(MapleStat.FAME, this.fame);
   }

   public void changeMapBanish(int mapid, String portal, String msg) {
      if (mapid == 15 || mapid == 240000000) {
         mapid = ServerConstants.TownMap;
      }

      this.dropMessage(5, msg);
      Field map = this.client.getChannelServer().getMapFactory().getMap(mapid);
      this.changeMap(map, map.getPortal(portal));
   }

   public void changeMap(Field to, Point pos) {
      if (to.getId() == 680000710 || to.getId() == 15 || to.getId() == 100000000 && DBConfig.isGanglim
            || to.getId() == 993210000 && !DBConfig.isGanglim) {
         to = GameServer.getInstance(this.client.getChannel()).getMapFactory().getMap(ServerConstants.TownMap);
      }

      this.changeMapInternal(to, pos, CField.getWarpToMap(to, 129, this), null);
   }

   public void changeMap(int mapId) {
      Field to = this.client.getChannelServer().getMapFactory().getMap(mapId);
      this.changeMapInternal(to, to.getPortal(0).getPosition(), CField.getWarpToMap(to, 0, this), to.getPortal(0));
   }

   public void changeMap(int mapId, String portal) {
      Field to = this.client.getChannelServer().getMapFactory().getMap(mapId);
      this.changeMapInternal(to, to.getPortal(portal).getPosition(),
            CField.getWarpToMap(to, to.getPortal(portal).getId(), this), null);
   }

   public void changeMap(int mapId, int portal) {
      Field to = this.client.getChannelServer().getMapFactory().getMap(mapId);
      this.changeMapInternal(to, to.getPortal(portal).getPosition(),
            CField.getWarpToMap(to, to.getPortal(portal).getId(), this), null);
   }

   public void changeMap(Field to) {
      if (to != null) {
         if (to.getId() == 680000710 || to.getId() == 15 || to.getId() == 993210000 && !DBConfig.isGanglim) {
            to = GameServer.getInstance(this.client.getChannel()).getMapFactory().getMap(ServerConstants.TownMap);
         }

         this.changeMapInternal(to, to.getPortal(0).getPosition(), CField.getWarpToMap(to, 0, this), to.getPortal(0));
      }
   }

   public void changeMap(Field to, Portal pto) {
      if (to.getId() == 680000710 || to.getId() == 15 || to.getId() == 993210000 && !DBConfig.isGanglim) {
         to = GameServer.getInstance(this.client.getChannel()).getMapFactory().getMap(ServerConstants.TownMap);
      }

      this.changeMapInternal(to, pto.getPosition(), CField.getWarpToMap(to, pto.getId(), this), null);
   }

   public void changeMapNoSCEnd(Field to) {
      if (to.getId() == 680000710 || to.getId() == 15 || to.getId() == 993210000 && !DBConfig.isGanglim) {
         to = GameServer.getInstance(this.client.getChannel()).getMapFactory().getMap(ServerConstants.TownMap);
      }

      this.changeMapInternal(to, to.getPortal(0).getPosition(), CField.getWarpToMap(to, 0, this), to.getPortal(0),
            false);
   }

   public void changeMapNoSCEnd(Field to, Portal pto) {
      if (to.getId() == 680000710 || to.getId() == 15 || to.getId() == 993210000 && !DBConfig.isGanglim) {
         to = GameServer.getInstance(this.client.getChannel()).getMapFactory().getMap(ServerConstants.TownMap);
      }

      this.changeMapInternal(to, pto.getPosition(), CField.getWarpToMap(to, pto.getId(), this), pto, false);
   }

   public void changeMapPortal(Field to, Portal pto) {
      if (to.getId() == 680000710 || to.getId() == 15 || to.getId() == 993210000 && !DBConfig.isGanglim) {
         to = GameServer.getInstance(this.client.getChannel()).getMapFactory().getMap(ServerConstants.TownMap);
      }

      this.changeMapInternal(to, pto.getPosition(), CField.getWarpToMap(to, pto.getId(), this), pto);
   }

   private void changeMapInternal(Field to, Point pos, byte[] warpPacket, Portal pto) {
      this.changeMapInternal(to, pos, warpPacket, pto, true);
   }

   private void changeMapInternal(Field to, Point pos, byte[] warpPacket, Portal pto, boolean stEnd) {
      try {
         if (to == null) {
            return;
         }

         NPCScriptManager.getInstance().dispose(this.getClient());
         if (!this.isAlive()) {
            MapleQuestStatus questStatus = new MapleQuestStatus(MapleQuest.getInstance(1097), 1);
            questStatus.setCustomData("1");
            this.updateQuest(questStatus);
            this.send(CWvsContext.setBuffProtector(0));
         }

         if (DBConfig.isGanglim) {
            this.cancelChairTask();
         }

         if (!DBConfig.isGanglim) {
            this.cancelFishingTask();
         }

         if (!GameConstants.isIllium(this.getJob()) && this.getBuffedValue(SecondaryStatFlag.NewFlying) != null) {
            SecondaryStat stat = this.getSecondaryStat();
            this.setTempKeyValue("NewFlyingReason", stat.NewFlyingReason);
            this.setTempKeyValue("NewFlyingTime", stat.NewFlyingTill);
            this.setTempKeyValue("NewFlyingValue", stat.NewFlyingValue);
            this.temporaryStatReset(SecondaryStatFlag.NewFlying);
         }

         this.setMusicReceive("");
         if (this.getEventInstance() == null || this.getDeathCount() == 0) {
            this.setTransferWhiteFadeOut(false);
            this.setTransferFieldOverlap(false);
            this.setRegisterTransferFieldTime(0L);
            this.setRegisterTransferField(0);
            if (this.getBossMode() == 1 && to.getFieldSetInstance() == null) {
               this.setBossMode(0);
            }
         }

         if (this.getChair() > 0) {
            this.temporaryStatReset(SecondaryStatFlag.RideVehicle);
         }

         this.temporaryStatReset(SecondaryStatFlag.StopPortion);
         if (this.getScriptThread() != null && stEnd) {
            final ScriptEngineNPC sc = this.getScriptThread();
            objects.utils.Timer.EtcTimer.getInstance().schedule(new Runnable() {
               @Override
               public void run() {
                  if (sc != null) {
                     sc.end();
                  }
               }
            }, 2000L);
         }

         if (GameConstants.isIllium(this.getJob())) {
            this.crystalControlPos = null;
         }

         if (this.getPlayerJob() instanceof Kain) {
            this.invokeJobMethod("kainStackClear");
         }

         Center.GameWaitQueue.deleteQueue(this);
         if (!this.getClient().isGm() && to.getId() >= 180000000 && to.getId() <= 180009999) {
            this.ban("맵 이동핵", true, true, true);
            this.serialBan(false);
            this.getClient().disconnect(true);
            return;
         }

         if (to.getId() == ServerConstants.TownMap || to.getId() == 15) {
            this.setCurrentBossPhase(0);
         }

         if (DBConfig.isGanglim
               && this.getEventInstance() == null
               && to.getId() != ServerConstants.StartMap
               && to.getId() != ServerConstants.TownMap
               && this.getOneInfoQuestInteger(1234567, "offTownButton") == 0) {
         }

         if (this.getMapId() != 211070100 && this.getMapId() != 211070102 && this.getMapId() != 211070101) {
            if (this.getMapId() != 401060100 && this.getMapId() != 401060200 && this.getMapId() != 272020210) {
               if (this.getMapId() != 350060400 && this.getMapId() != 350060500 && this.getMapId() != 350060600) {
                  if (this.getMapId() != 450004400 && this.getMapId() != 450004450 && this.getMapId() != 450004500
                        && this.getMapId() != 450004550) {
                     if (this.getMapId() != 350160100 && this.getMapId() != 350160120 && this.getMapId() != 350160140
                           && this.getMapId() != 350160160) {
                        if (this.getMapId() != 450008100
                              && this.getMapId() != 450008150
                              && this.getMapId() != 450008200
                              && this.getMapId() != 450008250
                              && this.getMapId() != 450008300
                              && this.getMapId() != 450008350) {
                           if (this.getMapId() != 450010400 && this.getMapId() != 450010500) {
                              if (!DBConfig.isGanglim) {
                                 if (this.getBuffedValue(SecondaryStatFlag.BlackMageCursePmdReduce) != null
                                       && to.getFieldSetInstance() == null
                                       && !GameConstants.isTogetherPointMap(to.getId())) {
                                    if (this.isMultiMode()) {
                                       this.setMultiMode(false);
                                    }

                                    this.temporaryStatReset(SecondaryStatFlag.BlackMageCursePmdReduce);
                                 }

                                 if (this.getBuffedValue(SecondaryStatFlag.BlackMageCurseForbidPortion) != null
                                       && to.getFieldSetInstance() == null
                                       && !GameConstants.isTogetherPointMap(to.getId())) {
                                    if (this.isMultiMode()) {
                                       this.setMultiMode(false);
                                    }

                                    this.temporaryStatReset(SecondaryStatFlag.BlackMageCurseForbidPortion);
                                 }
                              } else if (to.getId() / 100000 != 9250 && to.getId() != 993026800) {
                                 if (this.getBuffedValue(SecondaryStatFlag.BlackMageCursePmdReduce) != null
                                       && to.getFieldSetInstance() == null
                                       && this.getEventInstance() == null) {
                                    this.temporaryStatReset(SecondaryStatFlag.BlackMageCursePmdReduce);
                                 }

                                 if (this.getBuffedValue(SecondaryStatFlag.BlackMageCurseForbidPortion) != null
                                       && to.getFieldSetInstance() == null
                                       && this.getEventInstance() == null) {
                                    this.temporaryStatReset(SecondaryStatFlag.BlackMageCurseForbidPortion);
                                 }
                              }
                           } else if (to.getId() != 450010400 && to.getId() != 450010500) {
                              this.setStartBMQuest9(false);
                           }
                        } else if (to.getId() != 450008100
                              && to.getId() != 450008150
                              && to.getId() != 450008200
                              && to.getId() != 450008250
                              && to.getId() != 450008300
                              && to.getId() != 450008350) {
                           this.setStartBMQuest7(false);
                        }
                     } else if (to.getId() != 350160100 && to.getId() != 350160120 && to.getId() != 350160140
                           && to.getId() != 150160160) {
                        this.setStartBMQuest6(false);
                     }
                  } else if (to.getId() != 450004450 && to.getId() != 450004550 && to.getId() != 450004500
                        && to.getId() != 450004400) {
                     this.temporaryStatReset(SecondaryStatFlag.BlackMageCurseForbidPortion);
                     this.removeItem(2000047, -50);
                  }
               } else if (to.getId() != 350060400 && to.getId() != 350060500 && to.getId() != 350060600) {
                  this.temporaryStatReset(SecondaryStatFlag.BlackMageCursePmdReduce);
               }
            } else if (to.getId() != this.getMapId()) {
               this.temporaryStatReset(SecondaryStatFlag.BlackMageCursePmdReduce);
            }
         } else if (to.getId() != 211070100 && to.getId() != 211070101 && to.getId() != 211070102
               && to.getId() != 211070450) {
            this.temporaryStatReset(SecondaryStatFlag.BlackMageCursePmdReduce);
         }

         if (to.getId() == 15) {
            this.send(CField.UIPacket.endInGameDirectionMode(1));
         }

         if (this.hasBuffBySkillID(2221011)) {
            this.temporaryStatResetBySkillID(2221011);
         }

         if (GameConstants.isAdele(this.getJob())) {
            int etherPoint = 0;

            for (SecondAtom.Atom atom : new ArrayList<>(this.getSecondAtoms())) {
               if (atom != null && atom.getType().getType() == SecondAtom.SecondAtomType.Order.getType()) {
                  int expire = atom.getExpire();
                  int delta = (int) Math.min((long) expire, System.currentTimeMillis() - atom.getCreateTime());
                  delta = expire - delta;
                  if (delta > 0) {
                     double r = (double) delta / expire;
                     etherPoint += (int) (r * 100.0);
                  }

                  this.removeSecondAtom(atom.getKey());
                  this.getMap().removeSecondAtom(atom.getKey());
               }
            }

            if (etherPoint > 0) {
               this.addEtherPoint(etherPoint / 2);
            }
         }

         if (GameConstants.isFlameWizard(this.getJob())) {
            Integer emberValue = this.getBuffedValue(SecondaryStatFlag.Ember);
            Integer stack = (Integer) this.getJobField("flameDischargeStack");
            if (emberValue != null && stack != null) {
               this.temporaryStatSet(SecondaryStatFlag.Ember, 400021042, Integer.MAX_VALUE, stack);
            }
         }

         this.stopMesoChairTask();
         int nowmapid = this.map.getId();
         if (this.eventInstance != null) {
            this.eventInstance.changedMap(this, to.getId());
         }

         this.cancelFireBombTask();
         if (this.buzzingHouseTask != null && to.getId() != 993017200) {
            this.cancelBuzzingHouseTask();
         }

         LoggingManager.putLog(new TransferFieldLog(this, this.getMapId(), to.getId()));
         boolean pyramid = this.pyramidSubway != null;
         if (this.map.getId() == nowmapid) {
            if (warpPacket != null) {
               this.client.getSession().writeAndFlush(warpPacket);
            }

            boolean shouldChange = !this.isClone()
                  && this.client.getChannelServer().getPlayerStorage().getCharacterById(this.getId()) != null;
            boolean shouldState = this.map.getId() == to.getId();
            if (shouldChange && shouldState) {
               to.setCheckStates(false);
            }

            if (this.getFrozenLinkSerialNumber() > 0L) {
               this.getMap().killAllMonstersFL(false, this.getFrozenLinkSerialNumber());
               this.cancelFrozenLinkTask();
            }

            if (this.hasBuffBySkillID(80001757)) {
               this.temporaryStatReset(SecondaryStatFlag.Inflation);
            }

            if (this.hasBuffBySkillID(80001875)) {
               this.temporaryStatReset(SecondaryStatFlag.FixCooltime);
            }

            if (this.hasBuffBySkillID(80002281)) {
               this.temporaryStatReset(SecondaryStatFlag.RuneOfGreed);
            }

            if (this.hasBuffBySkillID(400011088)) {
               Summoned summoned = this.getSummonBySkillID(400011088);
               this.temporaryStatReset(SecondaryStatFlag.indieSummon);
               this.getMap().broadcastMessage(CField.SummonPacket.removeSummon(summoned, true));
               this.getMap().removeMapObject(summoned);
               this.removeVisibleMapObject(summoned);
               this.removeSummon(summoned);
            }

            if (this.hasBuffBySkillID(80001427)) {
               this.temporaryStatResetBySkillID(80001427);
            }

            if (this.hasBuffBySkillID(80001428)) {
               this.temporaryStatResetBySkillID(80001428);
            }

            if (this.hasBuffBySkillID(80001432)) {
               this.temporaryStatResetBySkillID(80001432);
            }

            if (this.hasBuffBySkillID(80001757)) {
               this.temporaryStatResetBySkillID(80001757);
            }

            if (this.hasBuffBySkillID(80001762)) {
               this.temporaryStatResetBySkillID(80001762);
            }

            if (this.hasBuffBySkillID(80001875)) {
               this.temporaryStatResetBySkillID(80001875);
            }

            if (this.hasBuffBySkillID(80002888)) {
               this.temporaryStatResetBySkillID(80002888);
            }

            if (this.hasBuffBySkillID(80002889)) {
               this.temporaryStatResetBySkillID(80002889);
            }

            if (this.hasBuffBySkillID(80002890)) {
               this.temporaryStatResetBySkillID(80002890);
            }

            if (this.hasBuffBySkillID(131003026)) {
               Summoned summoned = this.getSummonBySkillID(131003026);
               this.temporaryStatResetBySkillID(131003026);
               this.getMap().broadcastMessage(CField.SummonPacket.removeSummon(summoned, true));
               this.getMap().removeMapObject(summoned);
               this.removeVisibleMapObject(summoned);
               this.removeSummon(summoned);
            }

            if (this.hasBuffBySkillID(400021047)) {
               for (Summoned s : this.getMap().getAllSummonsThreadsafe()) {
                  if (s.getSkill() == 400021047 && s.getOwnerId() == this.getId()) {
                     this.getMap().broadcastMessage(CField.SummonPacket.removeSummon(s, true));
                     this.getMap().removeMapObject(s);
                     this.removeVisibleMapObject(s);
                     this.removeSummon(s);
                  }
               }
            }

            if (this.hasBuffBySkillID(80001242)) {
               this.temporaryStatResetBySkillID(80001242);
            }

            if (GameConstants.isEvan(this.getJob())) {
               this.setWreckageCount(0);
            }

            this.onMagicBell();
            this.map.removePlayer(this);
            this.map.onLeaveFieldSet(this, to);
            if (shouldChange) {
               this.map = to;
               this.setPosition(pos);
               to.addPlayer(this);
               this.stats.relocHeal(this);
               if (shouldState) {
                  to.setCheckStates(true);
               }
            }
         }

         if (pyramid && this.pyramidSubway != null) {
            this.pyramidSubway.onChangeMap(this, to.getId());
         }

         if (this.eventInstance != null && this.eventInstance.getFieldSetTimerGuageEndTime() > 0L) {
            this.eventInstance.broadcastTimerGauge();
         }

         if (!this.isAlive()) {
            if (GameConstants.isBlaster(this.getJob())) {
               this.setJobField("rwCylinderC", 0);
               this.invokeJobMethod("setRWCylinder", 37000010, -1, -1, -1);
            }

            this.addHP(500000L, true);
            this.setPlayerDead(false);
         }

         if (this.isEquippedSoulWeapon()) {
            this.temporaryStatSet(this.getEquippedSoulSkill(), Integer.MAX_VALUE, SecondaryStatFlag.SoulMP,
                  this.getSoulCount());
            this.checkSoulState(false);
         }

         if (this.getBossMode() > 0) {
            this.bossMode();
         }

         if (this.map.getBreakTimeFieldLevel() > 0) {
            this.checkHiddenMissionComplete(QuestExConstants.SuddenMKRestField.getQuestID());
         }

         if (DBConfig.isGanglim) {
         }

         if (this.getJob() >= 200 && this.getJob() <= 232) {
            int skillID = ((DefaultMagician) this.getPlayerJob()).memoryChoiceSkillID;
            if (skillID > 0) {
               this.send(CField.setMemoryChoice(skillID));
            }
         }

         if (GameConstants.isDarkKnight(this.getJob()) && this.toRestoreSummon) {
            this.toRestoreSummon = false;
            if (!this.hasBuffBySkillID(1301013)) {
               int skillId = 1301013;
               int skillLevel = this.getSkillLevel(skillId);
               SecondaryStatEffect eff = SkillFactory.getSkill(skillId).getEffect(skillLevel);
               eff.applyTo(this);
            }
         }

         this.invokeJobMethod("cleanUpHashMap");
      } catch (Exception var13) {
         System.out.println(
               "[오류] 캐릭터 changeMapInternal 함수 실행중 오류 발생 (캐릭터 이름: " + this.getName() + " ) : " + var13.toString());
         System.out.println("이동 대상 맵 ID : " + to.getId());
         var13.printStackTrace();
      }
   }

   public void cancelChallenge() {
      if (this.challenge != 0 && this.client.getChannelServer() != null) {
         MapleCharacter chr = this.client.getChannelServer().getPlayerStorage().getCharacterById(this.challenge);
         if (chr != null) {
            chr.dropMessage(6, this.getName() + " has denied your request.");
            chr.setChallenge(0);
         }

         this.dropMessage(6, "Denied the challenge.");
         this.challenge = 0;
      }
   }

   public void leaveMap(Field map) {
      this.controlledLock.writeLock().lock();
      this.visibleMapObjectsLock.writeLock().lock();

      try {
         for (MapleMonster mons : this.controlled) {
            if (mons != null) {
               mons.setController(null);
               mons.setControllerHasAggro(false);
               map.updateMonsterController(mons);
            }
         }

         this.controlled.clear();
         this.visibleMapObjects.clear();
      } finally {
         this.controlledLock.writeLock().unlock();
         this.visibleMapObjectsLock.writeLock().unlock();
      }

      if (this.chair != 0) {
         this.chair = 0;
      }

      this.clearLinkMid();
      this.cancelChallenge();
      if (!this.getMechDoors().isEmpty()) {
         this.removeMechDoor();
      }

      this.cancelMapTimeLimitTask();
      if (this.getTrade() != null) {
         MapleTrade.cancelTrade(this.getTrade(), this.client, this);
      }

      if (DBConfig.isGanglim) {
         this.finishGiftShowX3(map, true);
      }
   }

   public void refreshGiftShowX3() {
      if (DBConfig.isGanglim) {
         String currentDate = GameConstants.getCurrentDate_NoTime2();
         String dbDate = this.getOneInfoQuest(100857, "date");
         if (this.getOneInfoQuest(100857, "count").equals("")
               || !dbDate.isEmpty()
                     && Integer.parseInt(currentDate.replace("/", "")) != Integer.parseInt(dbDate.replace("/", ""))) {
            this.setKeyValue(100857, "count", "0");
            this.setKeyValue(100857, "feverCnt", "0");
            this.setKeyValue(100857, "date", GameConstants.getCurrentDate_NoTime2());
         }
      }
   }

   public void finishGiftShowX3(Field currentMap, boolean changeMap) {
   }

   public static byte[] ShowMSClock(int duration) {
      PacketEncoder mplew = new PacketEncoder();
      mplew.writeShort(SendPacketOpcode.MS_CLOCK.getValue());
      mplew.writeInt(duration);
      return mplew.getPacket();
   }

   public void startGiftShowX3() {
      this.setKeyValue(100857, "count", "0");
      int afterCnt = this.getKeyValue(100857, "feverCnt") + 1;
      SecondaryStatManager statManager = new SecondaryStatManager(this.getClient(), this.getSecondaryStat());
      statManager.changeStatValue(SecondaryStatFlag.MagicBell, 80003082, afterCnt);
      statManager.temporaryStatSet();
      this.setKeyValue(100857, "feverCnt", afterCnt + "");
      this.setKeyValue(100857, "genMobKillCount", "0");
      this.send(ShowMSClock(30000));
      List<Spawns> randomSpawn = new ArrayList<>(this.getMap().getMonsterSpawn());
      Collections.shuffle(randomSpawn);
      int i = 0;

      for (Spawns spawnPoint : randomSpawn) {
         MapleMonster mob = MapleLifeFactory.getMonster(9833971);
         mob.setOwner(this.getId());
         this.getMap().spawnMonsterOnGroundBelow(mob, spawnPoint.getPosition());
         if (++i >= 5) {
            break;
         }
      }

      Field currentMap = this.getMap();
      objects.utils.Timer.MapTimer.getInstance().schedule(() -> this.finishGiftShowX3(currentMap, false), 30000L);
   }

   public void addStolenSkill(int skillID, int skillLV) {
      this.invokeJobMethod("addStolenSkill", skillID, skillLV);
   }

   public void changeJob(int newJob) {
      this.changeJob(newJob, false);
   }

   public void changeJob(int newJob, boolean freeJobChange) {
      try {
         short preJob = this.job;
         if (newJob >= 3310 && newJob <= 3312) {
            this.send(CWvsContext.updateJaguar(this));
         }

         if (GameConstants.isPhantom(preJob) && !GameConstants.isPhantom(newJob)) {
            this.stolenSkills.clear();
         }

         this.temporaryStatReset(SecondaryStatFlag.ShadowPartner);
         this.job = (short) newJob;
         this.updateSingleStat(MapleStat.JOB, newJob);
         if (!GameConstants.isNovice(newJob)) {
            if (GameConstants.isPhantom(this.job)) {
               if (this.job == 2412) {
                  Skill skil1 = SkillFactory.getSkill(20031209);
                  this.changeSingleSkillLevel(skil1, 0, (byte) 0);
                  Skill skil2 = SkillFactory.getSkill(20031210);
                  this.changeSingleSkillLevel(skil2, 1, (byte) skil2.getMaxLevel());
               }

               this.client.getSession().writeAndFlush(CField.updateCardStack(0));
               this.resetRunningStack();
            }

            if (!GameConstants.isEvan(newJob) && !GameConstants.isResist(newJob) && !GameConstants.isMercedes(newJob)) {
               this.remainingSp[GameConstants.getSkillBook(newJob, 0)]++;
               if (newJob % 10 >= 2) {
                  this.remainingSp[GameConstants.getSkillBook(newJob, 0)] += 2;
               }
            } else {
               int changeSp = newJob != 2200 && newJob != 2210 && newJob != 2211 && newJob != 2213 ? 5 : 3;
               if (GameConstants.isResist(this.job) && newJob != 3100 && newJob != 3200 && newJob != 3300
                     && newJob != 3500) {
                  changeSp = 3;
               }

               this.remainingSp[GameConstants.getSkillBook(newJob, 0)] += changeSp;
               this.client.getSession().writeAndFlush(CWvsContext.InfoPacket.getSPMsg((byte) changeSp, (short) newJob));
            }

            if (newJob % 10 >= 1 && this.level >= 70) {
               if (!freeJobChange) {
                  this.remainingAp = (short) (this.remainingAp + 5);
               }

               this.updateSingleStat(MapleStat.AVAILABLEAP, this.remainingAp);
               Skill skil = SkillFactory.getSkill(PlayerStats.getSkillByJob(1007, this.getJob()));
               if (skil != null && this.getSkillLevel(skil) <= 0) {
                  this.changeSingleSkillLevel(skil, skil.getMaxLevel(), (byte) skil.getMaxLevel());
               }
            }

            if (!this.isGM()) {
               this.resetStatsByJob(true);
               if (!GameConstants.isEvan(newJob)) {
                  if (this.getLevel() > (newJob == 200 ? 8 : 10) && newJob % 100 == 0 && newJob % 1000 / 100 > 0) {
                     this.remainingSp[GameConstants.getSkillBook(newJob, 0)] += 3
                           * (this.getLevel() - (newJob == 200 ? 8 : 10));
                  }
               } else if (newJob == 2200) {
                  MapleQuest.getInstance(22100).forceStart(this, 0, null);
                  MapleQuest.getInstance(22100).forceComplete(this, 0);
                  this.expandInventory((byte) 1, 4);
                  this.expandInventory((byte) 2, 4);
                  this.expandInventory((byte) 3, 4);
                  this.expandInventory((byte) 4, 4);
                  this.client.getSession().writeAndFlush(CField.NPCPacket.getEvanTutorial("UI/tutorial/evan/14/0"));
               }
            }

            this.updateSingleStat(MapleStat.AVAILABLESP, 0L);
         }

         long maxhp = this.stats.getMaxHp();
         long maxmp = this.stats.getMaxMp();
         this.playerBasicJob = CommonJob.setJob(newJob);
         this.playerBasicJob.setPlayer(this);
         switch (this.job) {
            case 100:
            case 1100:
            case 2100:
            case 3200:
               maxhp += Randomizer.rand(200, 250);
               break;
            case 110:
            case 120:
            case 130:
            case 1110:
            case 2110:
            case 3210:
               maxhp += Randomizer.rand(300, 350);
               break;
            case 200:
            case 2200:
            case 2210:
               maxmp += Randomizer.rand(100, 150);
               break;
            case 210:
            case 220:
            case 230:
               maxmp += Randomizer.rand(400, 450);
               break;
            case 300:
            case 400:
            case 500:
            case 2300:
            case 3300:
            case 3500:
               maxhp += Randomizer.rand(100, 150);
               maxmp += Randomizer.rand(25, 50);
               break;
            case 310:
            case 320:
            case 410:
            case 420:
            case 430:
            case 510:
            case 520:
            case 530:
            case 1310:
            case 1410:
            case 2310:
            case 3310:
            case 3510:
               maxhp += Randomizer.rand(200, 250);
               maxhp += Randomizer.rand(150, 200);
               break;
            case 800:
            case 900:
               maxhp += 500000L;
               maxmp += 500000L;
               break;
            case 3100:
               maxhp += Randomizer.rand(200, 250);
               break;
            case 3110:
               maxhp += Randomizer.rand(300, 350);
         }

         if (maxhp >= 500000L) {
            maxhp = 500000L;
         }

         if (maxmp >= 500000L) {
            maxmp = 500000L;
         }

         if (GameConstants.isDemonSlayer(this.job)) {
            maxmp = 10L;
         }

         if (this.job == 301) {
            this.changeSkillLevel(1298, 1, 4);
         } else if (this.job == 330) {
            this.changeSkillLevel(1298, 2, 4);
         } else if (this.job == 331) {
            this.changeSkillLevel(1298, 3, 4);
         } else if (this.job == 332) {
            this.changeSkillLevel(1298, 4, 4);
         }

         this.stats.setInfo(maxhp, maxmp, maxhp, maxmp);
         Map<MapleStat, Long> statup = new EnumMap<>(MapleStat.class);
         statup.put(MapleStat.MAXHP, maxhp);
         statup.put(MapleStat.MAXMP, maxmp);
         statup.put(MapleStat.HP, maxhp);
         statup.put(MapleStat.MP, maxmp);
         this.stats.recalcLocalStats(this);
         this.client.getSession().writeAndFlush(CWvsContext.updatePlayerStats(statup, this));
         ChangeJob e = new ChangeJob(this.getId(), preJob, newJob);
         this.map.broadcastMessage(this, e.encodeForRemote(), false);
         this.silentPartyUpdate();
         this.guildUpdate();
         if (this.dragon != null) {
            this.map.broadcastMessage(CField.removeDragon(this.id));
            this.dragon = null;
         }

         if (newJob >= 2200 && newJob <= 2218) {
            if (this.getBuffedValue(SecondaryStatFlag.RideVehicle) != null) {
               this.temporaryStatReset(SecondaryStatFlag.RideVehicle);
            }

            this.makeDragon();
         }

         this.maxSkillByAutoJob();
         if (this.getLevel() >= 260 && this.getHexaCore() != null) {
            for (int coreId : HexaMatrixConstants.getAllJobCores(preJob)) {
               if (this.getHexaCore().getSkillCoreLevel(coreId) > 0) {
                  this.getHexaCore().setSkillCoreLevel(this, coreId, 0);
                  this.getHexaCore().removeSkillCore(coreId);
               }
            }

            for (int coreIdx : HexaMatrixConstants.getAllJobCores(newJob)) {
               if (this.getHexaCore().getSkillCoreLevel(coreIdx) == 0) {
                  this.getHexaCore().setSkillCoreLevel(this, coreIdx, 1);
               }
            }

            this.send(CWvsContext.onCharacterModified(this, -1L));
            HyperHandler.updateSkills(this, 0);
         }
      } catch (Exception var14) {
         FileoutputUtil.outputFileError("Log_Script_Except.rtf", var14);
      }
   }

   public void baseSkills() {
      Map<Skill, SkillEntry> list = new HashMap<>();
      if (GameConstants.getJobClass(this.job) >= 3) {
         List<Integer> skills = SkillFactory.getSkillsByJob(this.job);
         if (skills != null) {
            for (int i : skills) {
               Skill skil = SkillFactory.getSkill(i);
               if (GameConstants.isSkillNeedMasterLevel(skil.getId())) {
                  list.put(skil, new SkillEntry(0, (byte) skil.getMasterLevel(), -1L));
               }
            }
         }
      }

      if (this.job >= 2211 && this.job <= 2218) {
         Skill skil = SkillFactory.getSkill(22111001);
         if (skil != null && this.getSkillLevel(skil) <= 0) {
            list.put(skil, new SkillEntry(0, (byte) 20, -1L));
         }
      }

      if (GameConstants.isMercedes(this.job)) {
         int[] ss = new int[] { 20021000, 20021001, 20020002, 20020022, 20020109, 20021110, 20020111, 20020112 };

         for (int ix : ss) {
            Skill skil = SkillFactory.getSkill(ix);
            if (skil != null && this.getSkillLevel(skil) <= 0) {
               list.put(skil, new SkillEntry(1, (byte) 1, -1L));
            }
         }

         Skill skil = SkillFactory.getSkill(20021181);
         if (skil != null && this.getSkillLevel(skil) <= 0) {
            list.put(skil, new SkillEntry(-1, (byte) 0, -1L));
         }

         skil = SkillFactory.getSkill(20021166);
         if (skil != null && this.getSkillLevel(skil) <= 0) {
            list.put(skil, new SkillEntry(-1, (byte) 0, -1L));
         }
      }

      if (GameConstants.isDemonSlayer(this.job)) {
         int[] ss1 = new int[] { 30011000, 30011001, 30010002, 30010185, 30010112, 30010111, 30010110, 30010022,
               30011109 };

         for (int ixx : ss1) {
            Skill skilx = SkillFactory.getSkill(ixx);
            if (skilx != null && this.getSkillLevel(skilx) <= 0) {
               list.put(skilx, new SkillEntry(1, (byte) 1, -1L));
            }
         }

         int[] ss2 = new int[] { 30011170, 30011169, 30011168, 30011167, 30010166, 30010184, 30010183, 30010186 };

         for (int ixxx : ss2) {
            Skill skilx = SkillFactory.getSkill(ixxx);
            if (skilx != null && this.getSkillLevel(skilx) <= 0) {
               list.put(skilx, new SkillEntry(-1, (byte) -1, -1L));
            }
         }
      }

      if (!list.isEmpty()) {
         this.changeSkillsLevel(list);
      }
   }

   public void makeDragon() {
      this.dragon = new Dragon(this);
      this.map.broadcastMessage(CField.spawnDragon(this.dragon));
   }

   public Dragon getDragon() {
      return this.dragon;
   }

   public void gainAp(short ap) {
      this.remainingAp += ap;
      this.updateSingleStat(MapleStat.AVAILABLEAP, this.remainingAp);
   }

   public void gainSP(int sp) {
      this.remainingSp[GameConstants.getSkillBook(this.job, 0)] += sp;
      this.updateSingleStat(MapleStat.AVAILABLESP, 0L);
      this.client.getSession().writeAndFlush(CWvsContext.InfoPacket.getSPMsg((byte) sp, this.job));
   }

   public void gainSP(int sp, int skillbook) {
      this.remainingSp[skillbook] = this.remainingSp[skillbook] + sp;
      this.updateSingleStat(MapleStat.AVAILABLESP, 0L);
      this.client.getSession().writeAndFlush(CWvsContext.InfoPacket.getSPMsg((byte) sp, (short) 0));
   }

   public void resetSP(int sp) {
      for (int i = 0; i < this.remainingSp.length; i++) {
         this.remainingSp[i] = sp;
      }

      this.updateSingleStat(MapleStat.AVAILABLESP, 0L);
   }

   public void resetAPSP() {
      this.resetSP(0);
      this.gainAp((short) (-this.remainingAp));
   }

   public List<Integer> getProfessions() {
      List<Integer> prof = new ArrayList<>();

      for (int i = 9200; i <= 9204; i++) {
         if (this.getProfessionLevel(i * 10000) > 0) {
            prof.add(i);
         }
      }

      return prof;
   }

   public byte getProfessionLevel(int id) {
      int ret = this.getSkillLevel(id);
      return ret <= 0 ? 0 : (byte) (ret >>> 24 & 0xFF);
   }

   public short getProfessionExp(int id) {
      int ret = this.getSkillLevel(id);
      return ret <= 0 ? 0 : (short) (ret & 65535);
   }

   public boolean addProfessionLevel(int id) {
      int ret = this.getProfessionLevel(id);
      byte maxLevel = (byte) (id != 92000000 && id != 92010000 ? 12 : 10);
      if (ret > 0 && ret < maxLevel) {
         int traitGain = (int) Math.pow(2.0, ret + 1);
         if (this.getProfessionExp(id) >= GameConstants.getProfessionEXP(ret)) {
            String name = "";
            switch (id) {
               case 92000000:
                  this.changeProfessionLevelExp(id, ret + 1, 0, (byte) 10);
                  this.traits.get(MapleTrait.MapleTraitType.sense).addExp(traitGain, this);
                  name = "약초채집";
                  break;
               case 92010000:
                  this.changeProfessionLevelExp(id, ret + 1, 0, (byte) 10);
                  this.traits.get(MapleTrait.MapleTraitType.will).addExp(traitGain, this);
                  name = "채광";
                  break;
               case 92020000:
                  this.changeProfessionLevelExp(id, ret + 1, 0, (byte) 12);
                  this.traits.get(MapleTrait.MapleTraitType.craft).addExp(traitGain, this);
                  name = "장비제작";
                  break;
               case 92030000:
                  this.changeProfessionLevelExp(id, ret + 1, 0, (byte) 12);
                  this.traits.get(MapleTrait.MapleTraitType.craft).addExp(traitGain, this);
                  name = "장신구제작";
                  break;
               case 92040000:
                  this.changeProfessionLevelExp(id, ret + 1, 0, (byte) 12);
                  this.traits.get(MapleTrait.MapleTraitType.craft).addExp(traitGain, this);
                  name = "연금술";
            }

            AchievementFactory.checkMakingskillLvup(this, id, ret + 1);
            this.dropMessage(-5, name + "의 레벨이 올랐습니다.");
            return true;
         } else {
            return false;
         }
      } else {
         return false;
      }
   }

   public void addProfessionExp(int id, int expGain) {
      int ret = this.getProfessionLevel(id);
      if (ret > 0) {
         byte maxLevel = (byte) (id != 92000000 && id != 92010000 ? 12 : 10);
         if (ret < maxLevel) {
            int newExp = this.getProfessionExp(id) + expGain;
            if (newExp >= GameConstants.getProfessionEXP(ret)) {
               newExp = Math.min(newExp, GameConstants.getProfessionEXP(ret));
            }

            this.changeProfessionLevelExp(id, ret, newExp, maxLevel);
         }
      }
   }

   public void changeProfessionLevelExp(int id, int level, int exp, byte maxLevel) {
      this.changeSingleSkillLevel(SkillFactory.getSkill(id), ((level & 0xFF) << 24) + (exp & 65535), maxLevel);
   }

   public void changeSingleSkillLevel(Skill skill, int newLevel, byte newMasterlevel) {
      if (skill != null) {
         this.changeSingleSkillLevel(skill, newLevel, newMasterlevel, SkillFactory.getDefaultSExpiry(skill));
      }
   }

   public void changeSingleSkillLevel(Skill skill, int newLevel, byte newMasterlevel, boolean devote) {
      this.changeSingleSkillLevel(skill, newLevel, newMasterlevel, SkillFactory.getDefaultSExpiry(skill), devote);
   }

   public void changeSingleSkillLevel(Skill skill, int newLevel, byte newMasterlevel, long expiration) {
      this.changeSingleSkillLevel(skill, newLevel, newMasterlevel, expiration, false);
   }

   public void changeSingleSkillLevel(Skill skill, int newLevel, byte newMasterlevel, long expiration, boolean devote) {
      Map<Skill, SkillEntry> list = new HashMap<>();
      boolean hasRecovery = false;
      boolean recalculate = false;
      if (skill.getId() / 100000 != 920) {
         if (newMasterlevel == 0) {
            newMasterlevel = 1;
         }

         if (newLevel > newMasterlevel) {
            newLevel = newMasterlevel;
         }
      }

      if (this.changeSkillData(skill, newLevel, newMasterlevel, expiration)) {
         list.put(skill, new SkillEntry(newLevel, newMasterlevel, expiration));
         if (GameConstants.isRecoveryIncSkill(skill.getId())) {
            hasRecovery = true;
         }

         recalculate = true;
      }

      if (!list.isEmpty()) {
         this.client.getSession()
               .writeAndFlush(CWvsContext.updateSkills(list, !devote, devote, (byte) (devote ? 7 : 10)));
         this.reUpdateStat(hasRecovery, recalculate);
      }
   }

   public void changeSkillsLevel(Map<Skill, SkillEntry> ss) {
      if (!ss.isEmpty()) {
         Map<Skill, SkillEntry> list = new HashMap<>();
         boolean hasRecovery = false;
         boolean recalculate = false;

         for (Entry<Skill, SkillEntry> data : ss.entrySet()) {
            if (this.changeSkillData(data.getKey(), data.getValue().skillevel, data.getValue().masterlevel,
                  data.getValue().expiration)) {
               list.put(data.getKey(), data.getValue());
               if (GameConstants.isRecoveryIncSkill(data.getKey().getId())) {
                  hasRecovery = true;
               }

               if (data.getKey().getId() < 80000000) {
                  recalculate = true;
               }
            }
         }

         if (!list.isEmpty()) {
            this.client.getSession().writeAndFlush(CWvsContext.updateSkills(list, true, false, (byte) 10));
            this.reUpdateStat(hasRecovery, recalculate);
         }
      }
   }

   private void reUpdateStat(boolean hasRecovery, boolean recalculate) {
      this.setSaveFlag(this.getSaveFlag() | CharacterSaveFlag.SKILLS.getFlag());
      if (hasRecovery) {
         this.stats.relocHeal(this);
      }

      if (recalculate) {
         this.stats.recalcLocalStats(this);
      }
   }

   public boolean changeSkillData(Skill skill, int newLevel, byte newMasterlevel, long expiration) {
      if (skill != null
            && (GameConstants.isApplicableSkill(skill.getId()) || GameConstants.isApplicableSkill_(skill.getId()))) {
         if (newLevel <= 0 && newMasterlevel <= 0) {
            if (!this.skills.containsKey(skill)) {
               return false;
            }

            this.skills.remove(skill);
         } else {
            this.skills.put(skill, new SkillEntry(newLevel, newMasterlevel, expiration));
         }

         return true;
      } else {
         return false;
      }
   }

   public void updateMatrixSkills() {
      this.lockVCoreSkillsWriteLock();

      try {
         this.updateMatrixSkillsNoLock();
      } finally {
         this.unlockVCoreSkillsWriteLock();
      }
   }

   public void updateMatrixSkillsNoLock() {
      Map<Skill, SkillEntry> z = new HashMap<>();
      this.getVCoreSkillsNoLock().forEach(core -> {
         Skill skill1 = SkillFactory.getSkill(core.getSkill1());
         Skill skill2 = SkillFactory.getSkill(core.getSkill2());
         Skill skill3 = SkillFactory.getSkill(core.getSkill3());
         if (skill1 != null) {
            z.put(skill1, new SkillEntry(0, (byte) 50, -1L));
         }

         if (skill2 != null) {
            z.put(skill2, new SkillEntry(0, (byte) 50, -1L));
         }

         if (skill3 != null) {
            z.put(skill3, new SkillEntry(0, (byte) 50, -1L));
         }
      });
      this.getVCoreSkillsNoLock().forEach(core -> {
         if (core.getState() == 2) {
            Skill skill1 = SkillFactory.getSkill(core.getSkill1());
            Skill skill2 = SkillFactory.getSkill(core.getSkill2());
            Skill skill3 = SkillFactory.getSkill(core.getSkill3());
            VCoreData.VCoreInfo info = VCoreData.getCoreInfo(core.getCoreId());
            if (info != null) {
               int maxLevel = 25;
               if (info != null) {
                  maxLevel = info.getType() == 0 ? 25 : 50;
               }

               VMatrixSlot slot = this.getVMatrixSlot(core.getPosition());
               int enforceLevel = 0;
               if (slot != null) {
                  enforceLevel = slot.getSlotEnforcement();
                  if (info.getType() == 0) {
                     maxLevel += 5;
                  } else if (info.getType() == 1) {
                     maxLevel += 10;
                  }
               }

               if (skill1 != null) {
                  if (z.get(skill1) != null) {
                     z.get(skill1).skillevel = Math.min(maxLevel,
                           z.get(skill1).skillevel + core.getLevel() + enforceLevel);
                  } else {
                     z.put(skill1,
                           new SkillEntry(
                                 Math.min(maxLevel, this.getSkillLevel(skill1) + core.getLevel() + enforceLevel),
                                 (byte) maxLevel, -1L));
                  }
               }

               if (skill2 != null) {
                  if (z.get(skill2) != null) {
                     z.get(skill2).skillevel = Math.min(maxLevel,
                           z.get(skill2).skillevel + core.getLevel() + enforceLevel);
                  } else {
                     z.put(skill2,
                           new SkillEntry(
                                 Math.min(maxLevel, this.getSkillLevel(skill2) + core.getLevel() + enforceLevel),
                                 (byte) maxLevel, -1L));
                  }
               }

               if (skill3 != null) {
                  if (z.get(skill3) != null) {
                     z.get(skill3).skillevel = Math.min(maxLevel,
                           z.get(skill3).skillevel + core.getLevel() + enforceLevel);
                  } else {
                     z.put(skill3,
                           new SkillEntry(
                                 Math.min(maxLevel, this.getSkillLevel(skill3) + core.getLevel() + enforceLevel),
                                 (byte) maxLevel, -1L));
                  }
               }
            }
         }
      });
      z.entrySet().stream().sorted((s1, s2) -> s1.getKey().getId() - s2.getKey().getId());
      this.getClient().getSession().writeAndFlush(CWvsContext.updateMatrixSkills(z));
   }

   public void changeSkillLevel(int skill, int newLevel, int newMasterLevel) {
      this.changeSkillLevel(SkillFactory.getSkill(skill), newLevel, newMasterLevel);
   }

   public void changeSkillLevel(Skill skill, int newLevel, int newMasterlevel) {
      this.changeSkillLevel_Skip(skill, newLevel, newMasterlevel);
   }

   public void changeSkillLevel_Skip(Skill skil, int skilLevel, int masterLevel) {
      this.changeSkillLevel_Skip(skil, skilLevel, (byte) masterLevel, true);
   }

   public void changeSkillLevel_Skip(Skill skil, int skilLevel, byte masterLevel, boolean write) {
      Map<Skill, SkillEntry> enry = new HashMap<>(1);
      enry.put(skil, new SkillEntry(skilLevel, masterLevel, -1L));
      this.changeSkillLevel_Skip(enry, write);
   }

   public void changeSkillLevel_Skip(Map<Skill, SkillEntry> skill, boolean write) {
      if (!skill.isEmpty()) {
         Map<Skill, SkillEntry> newL = new HashMap<>();

         for (Entry<Skill, SkillEntry> z : skill.entrySet()) {
            if (z.getKey() != null) {
               newL.put(z.getKey(), z.getValue());
               if (z.getValue().skillevel <= 0 && z.getValue().masterlevel == 0) {
                  if (!this.skills.containsKey(z.getKey())) {
                     continue;
                  }

                  this.skills.remove(z.getKey());
               } else {
                  this.skills.put(z.getKey(), z.getValue());
               }

               if (z.getKey().getId() == 400051008) {
                  if (z.getValue().skillevel > 0) {
                     SecondaryStatEffect effect = SkillFactory.getSkill(400051008).getEffect(z.getValue().skillevel);
                     if (effect != null) {
                        this.setAutoChargeCycle(effect.getQ() * 1000);
                        this.setAutoChargeMaxStack(effect.getY());
                     }
                  }
               } else if (z.getKey().getId() == 3311002) {
                  if (z.getValue().skillevel <= 0) {
                     this.setAutoChargeSkillID(0);
                  } else {
                     SecondaryStatEffect effect = SkillFactory.getSkill(3311002).getEffect(z.getValue().skillevel);
                     if (effect != null) {
                        this.setAutoChargeMaxStack(effect.getY());
                        this.setAutoChargeCycle(effect.getS2() * 1000);
                     }
                  }
               }
            }
         }

         if (write && !newL.isEmpty()) {
            this.client.getSession().writeAndFlush(CWvsContext.updateSkills(newL, true, false, (byte) 10));
            this.setSaveFlag(this.getSaveFlag() | CharacterSaveFlag.SKILLS.getFlag());
         }
      }
   }

   public void finalFact() {
      if (this.getBuffedEffect(SecondaryStatFlag.ReincarnationAccept) != null) {
         this.addMPHP(this.getStat().getCurrentMaxHp(this), this.getStat().getMaxMp());
         int type = this.getBuffedValue(SecondaryStatFlag.ReincarnationAccept);
         int skillId = 1320020 + type;
         Skill skill = SkillFactory.getSkill(skillId);
         int skilllevel = this.getSkillLevel(1320016);
         SecondaryStatEffect effect = skill.getEffect(skilllevel);
         int z = effect.getZ();
         if (this.getTotalSkillLevel(1320047) > 0) {
            SecondaryStatEffect effect2 = SkillFactory.getSkill(1320047).getEffect(this.getTotalSkillLevel(1320047));
            if (effect2 != null) {
               z = Math.max(0, z - z * effect2.getZ() / 100);
            }
         }

         this.setReincarnationCount(z);
         this.setReincarnationMaxCount(z);
         this.setStartReincarnationTime(System.currentTimeMillis());
         Map<SecondaryStatFlag, Integer> statups = new HashMap<>();
         statups.put(SecondaryStatFlag.Reincarnation, type);
         statups.put(SecondaryStatFlag.indiePartialNotDamaged, 1);
         this.temporaryStatSet(1320019, skilllevel, effect.getDuration(), statups, true);
         Map<SecondaryStatFlag, Integer> statups2 = new HashMap<>();
         statups2.put(SecondaryStatFlag.ReincarnationActivate, z);
         this.temporaryStatSet(skillId, skilllevel, effect.getU() * 1000, statups2, false);
         Map<SecondaryStatFlag, Integer> statups3 = new HashMap<>();
         statups3.put(SecondaryStatFlag.indieSummon, 1);
         this.temporaryStatSet(1320016, skilllevel, effect.getCooldown(this), statups3, true);
         PacketEncoder p = new PacketEncoder();
         p.write(false);
         SkillEffect e = new SkillEffect(this.id, this.level, 1320016, 1, p);
         this.send(e.encodeForLocal());
         this.getMap().broadcastMessage(this, e.encodeForRemote(), false);
         int cooldown = effect.getCooldown(this);
         this.addCooldown(1320019, System.currentTimeMillis(), cooldown);
         this.getClient().getSession().writeAndFlush(CField.skillCooldown(1320019, cooldown));
      }
   }

   public void playerDead() {
      this.playerDead(true);
   }

   public void playerDead(boolean bmDecrementDC) {
      try {
         if (this.getSkillLevel(1320016) > 0) {
            Skill skill = SkillFactory.getSkill(1320016);
            if (this.getCooldownLimit(1320019) == 0L
                  && this.getBuffedValue(SecondaryStatFlag.ReincarnationAccept) != null) {
               this.finalFact();
               return;
            }
         }

         if (this.getBuffedValue(SecondaryStatFlag.HeavensDoor) != null) {
            SecondaryStatEffect effect = this.getBuffedEffect(SecondaryStatFlag.HeavensDoor);
            if (effect != null) {
               this.addHP(this.getStat().getCurrentMaxHp(this), true);
               this.temporaryStatReset(SecondaryStatFlag.HeavensDoor);
               return;
            }
         }

         if (this.getBuffedValue(SecondaryStatFlag.FlareTrick) != null) {
            SecondaryStatEffect effect = this.getBuffedEffect(SecondaryStatFlag.FlareTrick);
            if (effect != null) {
               int delta = (int) (this.getStat().getCurrentMaxHp(this) * 0.01) * effect.getY();
               this.addHP(delta, true);
               this.temporaryStatReset(SecondaryStatFlag.FlareTrick);
               this.temporaryStatSet(effect.getSourceId(), effect.getX() * 1000, SecondaryStatFlag.NotDamaged, 1);
               return;
            }
         }

         if (this.getBuffedValue(SecondaryStatFlag.ReviveOnce) != null) {
            SecondaryStatEffect effect = this.getBuffedEffect(SecondaryStatFlag.ReviveOnce);
            if (effect != null) {
               if (effect.getSourceId() == 14111030) {
                  int count = 0;
                  List<Summoned> summonList = new ArrayList<>();

                  try {
                     for (Summoned summon : this.getSummonsReadLock()) {
                        if (summon.getSkill() == 14000027
                              || summon.getSkill() == 14100027
                              || summon.getSkill() == 14110029
                              || summon.getSkill() == 14120008
                              || summon.getSkill() == 14110033
                              || summon.getSkill() == 14120017) {
                           summonList.add(summon);
                        }
                     }
                  } finally {
                     this.unlockSummonsReadLock();
                  }

                  count = summonList.size();
                  if (count > 0) {
                     new ArrayList<>(summonList).forEach(s -> {
                        this.getMap().broadcastMessage(CField.SummonPacket.removeSummon(s, true));
                        this.getMap().removeMapObject(s);
                        this.removeVisibleMapObject(s);
                        this.removeSummon(s);
                        summonList.remove(s);
                     });
                  }

                  int w = count * effect.getW();
                  int x = effect.getX();
                  int delta = (int) (this.getStat().getCurrentMaxHp(this) * 0.01) * (w + x);
                  int subTime = effect.getSubTime();
                  Map<SecondaryStatFlag, Integer> list = new HashMap<>();
                  list.put(SecondaryStatFlag.indiePartialNotDamaged, 1);
                  this.temporaryStatSet(14110030, this.getTotalSkillLevel(14111030), effect.getY() * 1000, list);
                  int deltaPerSecond = delta / (subTime / 1000);
                  this.setDarknessAscensionHP(deltaPerSecond);
                  this.setDarknessAscension(subTime / 1000 + 2);
                  int cooldown = effect.getCooldown(this);
                  this.client.getSession().writeAndFlush(CField.skillCooldown(14111030, cooldown));
                  this.addCooldown(14111030, System.currentTimeMillis(), cooldown);
                  this.addHP(50L, true);
                  this.darknessAscensionTask = objects.utils.Timer.BuffTimer.getInstance().register(() -> {
                     if (this.getDarknessAscensionHP() > 0) {
                        this.setDarknessAscension(this.getDarknessAscension() - 1);
                        if (this.getDarknessAscension() >= 2) {
                           this.addHP(this.getDarknessAscensionHP());
                        }

                        if (this.getDarknessAscension() <= 0) {
                           this.temporaryStatReset(SecondaryStatFlag.ReviveOnce);
                           this.setDarknessAscensionHP(0);
                           this.setDarknessAscension(0);
                           if (this.darknessAscensionTask != null) {
                              this.darknessAscensionTask.cancel(true);
                              this.darknessAscensionTask = null;
                           }
                        }
                     }
                  }, 1000L);
               } else if (effect.getSourceId() == 24111002) {
                  Integer value = this.getBuffedValue(SecondaryStatFlag.ReviveOnce);
                  if (value != null) {
                     this.addHP((int) (value.intValue() * (this.getStat().getCurrentMaxHp(this) * 0.01)), true);
                     this.temporaryStatSet(24111002, effect.getY() * 1000, SecondaryStatFlag.NotDamaged, 1);
                     this.temporaryStatReset(SecondaryStatFlag.ReviveOnce);
                  }
               } else if (effect.getSourceId() == 25111209) {
                  this.addHP(1000L, true);
                  this.temporaryStatSet(25111209, effect.getY() * 1000, SecondaryStatFlag.NotDamaged, 1);
                  this.temporaryStatReset(SecondaryStatFlag.ReviveOnce);
                  this.client.getSession().writeAndFlush(CField.skillCooldown(25111209, effect.getCooldown(this)));
                  this.addCooldown(25111209, System.currentTimeMillis(), effect.getCooldown(this));
                  SpecialSkillEffect e = new SpecialSkillEffect(this.getId(), 25111209, null);
                  this.send(e.encodeForLocal());
                  this.getMap().broadcastMessage(this, e.encodeForRemote(), false);
               }
            }

            return;
         }

         this.checkSpecialCoreSkills("die", 0, null);
         if (this.getEventInstance() != null) {
            this.getEventInstance().playerKilled(this);
         }

         if (bmDecrementDC) {
            this.getMap().onPlayerDead(this);
         }

         if (GameConstants.isKain(this.job)) {
            this.gripOfAgonyMobCount = 0;
            this.gripOfAgonyBossCount = 0;
            this.temporaryStatReset(SecondaryStatFlag.GripOfAgony);
         }

         MapleMonster hillah = this.getMap().getMonsterById(8870100);
         if (hillah != null) {
            int stack = 0;
            if (hillah.getBuff(MobTemporaryStatFlag.HILLAH_STACK) != null) {
               stack = hillah.getBuff(MobTemporaryStatFlag.HILLAH_STACK).getX();
            }

            stack = Math.min(5, stack + 1);
            int[][] addValue = new int[][] { { 0, 1200, 5, 5 }, { 0, 1500, 10, 10 }, { 200, 3000, 45, 45 },
                  { 1000, 2000, 20, 20 }, { 2000, 2250, 25, 25 } };
            hillah.setMobStatusAddData(addValue[stack - 1]);
            hillah.applyStatus(new MobTemporaryStatEffect(MobTemporaryStatFlag.HILLAH_STACK, Math.min(5, stack), 0,
                  new MobSkillInfo(0, 0), true));
            hillah.applyStatus(new MobTemporaryStatEffect(MobTemporaryStatFlag.ADD_BUFF_STAT, 1, 0, null, false));
         }

         if (this.getMap() instanceof Field_FerociousBattlefield
               && this.getBuffedValue(SecondaryStatFlag.DuskDarkness) != null) {
            Field_FerociousBattlefield f = (Field_FerociousBattlefield) this.getMap();

            for (MapleCharacter player : f.getCharactersThreadsafe()) {
               if (player.getId() != this.getId()) {
                  f.setDuskGaugeByOnHit(player);
               }
            }

            PacketEncoder packet = new PacketEncoder();
            packet.writeShort(SendPacketOpcode.DUSK_DEAD_ON_FEAR.getValue());
            packet.writeInt(this.getId());
            f.broadcastMessage(packet.getPacket());
         }

         this.dotHP = 0;
         this.lastDOTTime = 0L;
         if (!GameConstants.isNovice(this.job) && !this.inPVP()) {
            if (FieldLimitType.NO_EXP_DECREASE.check(this.getMap().getFieldLimit())) {
               return;
            }

            int charms = this.getItemQuantity(5130000, false);
            if (charms > 0) {
               MapleInventoryManipulator.removeById(this.client, MapleInventoryType.CASH, 5130000, 1, true, false);
               if (--charms > 255) {
                  charms = 255;
               }

               UseCharmEffect e = new UseCharmEffect(this.getId(), true, charms, 0, 5130000);
               this.send(e.encodeForLocal());
            } else {
               float diepercentage = 0.0F;
               long expforlevel = this.getNeededExp();
               if (!this.map.isTown() && !FieldLimitType.RegularExpLoss.check(this.map.getFieldLimit())) {
                  diepercentage = 0.1F - this.traits.get(MapleTrait.MapleTraitType.charisma).getLevel() / 20 / 100.0F;
               } else {
                  diepercentage = 0.01F;
               }

               long v10 = this.exp - (long) ((double) expforlevel * diepercentage);
               if (v10 < 0L) {
                  v10 = 0L;
               }

               this.exp = v10;
            }

            this.updateSingleStat(MapleStat.EXP, this.exp);
         }

         if (!this.stats.checkEquipDurabilitys(this, -100)) {
            this.dropMessage(5, "An item has run out of durability but has no inventory room to go to.");
         }

         if (this.pyramidSubway != null) {
            this.stats.setHp(50L, this);
            this.pyramidSubway.fail(this);
         }
      } catch (Exception var15) {
         System.out.println("PlayerDead Err");
         var15.printStackTrace();
      }
   }

   public void updatePartyMemberHP() {
      if (this.party != null && this.client.getChannelServer() != null) {
         int channel = this.client.getChannel();

         for (PartyMemberEntry partychar : this.party.getPartyMember().getPartyMemberList()) {
            if (partychar != null && partychar.getFieldID() == this.getMapId() && partychar.getChannel() == channel) {
               MapleCharacter other = this.client.getChannelServer().getPlayerStorage()
                     .getCharacterByName(partychar.getName());
               if (other != null) {
                  other.getClient()
                        .getSession()
                        .writeAndFlush(CField.updatePartyMemberHP(this.getId(), (int) this.stats.getHp(),
                              (int) this.stats.getCurrentMaxHp(this)));
               }
            }
         }
      }
   }

   public void receivePartyMemberHP() {
      if (this.party != null) {
         int channel = this.client.getChannel();

         for (PartyMemberEntry partychar : this.party.getPartyMember().getPartyMemberList()) {
            if (partychar != null && partychar.getFieldID() == this.getMapId() && partychar.getChannel() == channel) {
               MapleCharacter other = this.client.getChannelServer().getPlayerStorage()
                     .getCharacterByName(partychar.getName());
               if (other != null) {
                  this.client
                        .getSession()
                        .writeAndFlush(CField.updatePartyMemberHP(other.getId(), (int) other.getStat().getHp(),
                              (int) other.getStat().getCurrentMaxHp(other)));
               }
            }
         }
      }
   }

   public void healHP(long delta) {
      this.healHP(delta, false);
   }

   public void healHP(long delta, boolean forced) {
      this.healHP(delta, forced, false);
   }

   public void healHP(long delta, boolean forced, boolean show) {
      if (delta <= 0L || !this.isPlayerDead() || forced) {
         if (delta > 0L && this.getBuffedValue(SecondaryStatFlag.DebuffIncHP) != null && !forced) {
            delta -= (int) (delta * 0.01 * this.getBuffedValue(SecondaryStatFlag.DebuffIncHP).intValue());
         }

         this.addHP(delta, forced);
         if (show) {
            HPHeal e = new HPHeal(this.getId(), (int) delta);
            this.send(e.encodeForLocal());
            this.getMap().broadcastMessage(this, e.encodeForRemote(), false);
         }
      }
   }

   public void healMP(long delta) {
      if (delta <= 0L || !this.isPlayerDead()) {
         this.addMP(delta);
      }
   }

   public void addHP(long delta) {
      this.addHP(delta, false);
   }

   public void addHP(long delta, boolean forced) {
      this.addHP(delta, forced, true);
   }

   public void addHP(long delta, boolean forced, boolean bmDecrementDC) {
      if (delta <= 0L || !this.isPlayerDead() || forced) {
         if (delta > 0L || this.getMapId() != 15) {
            if (delta > 0L && this.getBuffedValue(SecondaryStatFlag.DebuffIncHP) != null && !forced) {
               delta -= (int) (delta * 0.01 * this.getBuffedValue(SecondaryStatFlag.DebuffIncHP).intValue());
            }

            long hp = this.checkRevenant(delta);
            if (this.stats.setHp(hp, false, this, bmDecrementDC)) {
               this.updateSingleStat(MapleStat.HP, this.stats.getHp());
               this.checkDead();
            }
         }
      }
   }

   public void addMP(long delta) {
      if (delta <= 0L || !this.isPlayerDead()) {
         this.addMP(delta, false);
      }
   }

   public void addMP(long delta, boolean ignore) {
      if (delta <= 0L || !this.isPlayerDead()) {
         if (delta < 0L && GameConstants.isDemonSlayer(this.getJob()) || !GameConstants.isDemonSlayer(this.getJob())
               || ignore) {
            if (GameConstants.isDemonSlayer(this.getJob())) {
               int d = (int) (this.getStat().getCurrentMaxMp(this) - this.getStat().getMp());
               int d2 = (int) (d - delta);
               if (d2 < 0) {
                  delta += d2;
               }

               if (this.getCooldownLimit(31121054) != 0L) {
                  this.addAbsorbForce((int) delta);
                  SecondaryStatEffect eff = SkillFactory.getSkill(31121054)
                        .getEffect(this.getTotalSkillLevel(31121054));
                  if (eff != null && this.getAbsorbForce() >= eff.getY()) {
                     this.changeCooldown(31121054, -eff.getW() * 1000L);
                     this.setAbsorbForce(0);
                  }
               }
            }

            if (this.stats.setMp(this.stats.getMp() + delta, this)) {
               this.updateSingleStat(MapleStat.MP, this.stats.getMp());
            }
         }
      }
   }

   public void addMPHP(long hpDiff, long mpDiff) {
      this.addMPHP(hpDiff, mpDiff, false);
   }

   public void addMPHP(long hpDiff, long mpDiff, boolean forced) {
      if (hpDiff <= 0L || !this.isPlayerDead() || forced) {
         if (hpDiff > 0L || this.getMapId() != 15) {
            Map<MapleStat, Long> statups = new EnumMap<>(MapleStat.class);
            if (hpDiff > 0L && this.getBuffedValue(SecondaryStatFlag.DebuffIncHP) != null && !forced) {
               hpDiff -= (int) (hpDiff * 0.01 * this.getBuffedValue(SecondaryStatFlag.DebuffIncHP).intValue());
            }

            long hp = this.checkRevenant(hpDiff);
            if (this.stats.setHp(hp, this)) {
               statups.put(MapleStat.HP, this.stats.getHp());
            }

            if ((mpDiff < 0L || !GameConstants.isDemonSlayer(this.getJob()))
                  && this.stats.setMp(this.stats.getMp() + mpDiff, this)) {
               statups.put(MapleStat.MP, this.stats.getMp());
            }

            if (statups.size() > 0) {
               this.client.getSession().writeAndFlush(CWvsContext.updatePlayerStats(statups, this));
               this.checkDead();
            }
         }
      }
   }

   public void updateSingleStat(MapleStat stat, long newval) {
      this.updateSingleStat(stat, newval, false);
   }

   public void send(byte[] packet) {
      this.getClient().getSession().writeAndFlush(packet);
   }

   public void updateSingleStat(MapleStat stat, long newval, boolean itemReaction) {
      Map<MapleStat, Long> statup = new EnumMap<>(MapleStat.class);
      statup.put(stat, newval);
      this.client.getSession().writeAndFlush(CWvsContext.updatePlayerStats(statup, itemReaction, this));
   }

   public void gainExp(double total, boolean show, boolean inChat, boolean white) {
      if (total > 0.0) {
         this.stats.checkEquipLevels(this, (int) total);
      }

      ExpIncreaseInfo info = new ExpIncreaseInfo(white, inChat, 0, (long) total);
      this.addExpUpdate(info, show, (long) total, (long) total);
   }

   public void gainExpLong(long total) {
      this.gainExpLong(total, false, false);
   }

   public void gainExpLong(long total, boolean inChat, boolean white) {
      ExpIncreaseInfo info = new ExpIncreaseInfo(white, inChat, 0, total);
      this.addExpUpdate(info, true, total, total);
   }

   public void gainExpMonster(MapleMonster monster, long baseExp, boolean show, boolean isLastHit, boolean isComboExp) {
      ExpIncreaseInfo info = new ExpIncreaseInfo(isLastHit, false, this.getMap().getBreakTimeFieldExpRate(), baseExp);
      info.setCurseState(this);
      info.setEventBonusExp(this);
      info.setPartyBonusExp(this);
      info.setItemBonusExp(this);
      info.setPlusExpBuffExp(this);
      info.setPsdBonusExpRate(this, monster);
      info.setIndieBonusExp(this, monster);
      info.setBaseAddExp(this);
      info.setRestFieldBonusExp(this);
      long totalExp = info.getAllExp();
      this.addExpUpdate(info, show, baseExp, totalExp);
   }

   public void addExpUpdate(ExpIncreaseInfo info, boolean show, long baseExp, long totalExp) {
      this.gainExpLock.writeLock().lock();

      try {
         long needed = this.getNeededExp();
         if ((this.level < 300 || DBConfig.isGanglim) && (this.level < 777 || !DBConfig.isGanglim)) {
            if (DBConfig.isGanglim) {
               for (this.exp += totalExp; this.exp >= needed; this.exp = totalExp) {
                  needed = this.getNeededExp();
                  this.levelUp();
                  this.exp = 0L;
                  totalExp -= needed;
                  if (totalExp < 0L) {
                     break;
                  }
               }
            } else if (this.exp + totalExp < needed && this.exp < needed) {
               this.exp += totalExp;
            } else {
               this.exp += totalExp;
               this.levelUp();
               long nextLevel = GameConstants.getExpNeededForLevel(this.level);
               long ee = totalExp - needed;
               if (ee >= nextLevel) {
                  ee = nextLevel - 1L;
               }

               this.setExp(ee);
            }
         } else {
            baseExp = 0L;
            this.setExp(0L);
         }

         if (baseExp != 0L) {
            if (this.exp < 0L) {
               this.setExp(0L);
            }

            this.updateSingleStat(MapleStat.EXP, this.getExp());
            if (show) {
               this.client.getSession().writeAndFlush(CWvsContext.InfoPacket.gainExp(info));
            }
         }
      } finally {
         this.gainExpLock.writeLock().unlock();
      }
   }

   public void forceReAddItem_NoUpdate(Item item, MapleInventoryType type) {
      this.getInventory(type).removeSlot(item.getPosition());
      this.getInventory(type).addFromDB(item);
   }

   public void forceReAddItem(Item item, MapleInventoryType type) {
      this.forceReAddItem_NoUpdate(item, type);
      if (type != MapleInventoryType.UNDEFINED) {
         this.client.getSession().writeAndFlush(CWvsContext.InventoryPacket.updateEquipSlot(item));
      }
   }

   public void forceReAddItem_Flag(Item item, MapleInventoryType type) {
      this.forceReAddItem_NoUpdate(item, type);
      if (type != MapleInventoryType.UNDEFINED) {
         this.client.getSession().writeAndFlush(CWvsContext.InventoryPacket.updateEquipSlot(item));
      }
   }

   public void silentPartyUpdate() {
      if (this.party != null) {
         Center.Party.updateParty(this.party.getId(), PartyOperation.SilentUpdate, new PartyMemberEntry(this));
      }
   }

   public boolean isSuperGM() {
      return this.gmLevel >= ServerConstants.PlayerGMRank.SUPERGM.getLevel();
   }

   public boolean isIntern() {
      return this.gmLevel >= ServerConstants.PlayerGMRank.INTERN.getLevel();
   }

   public boolean isGM() {
      return this.gmLevel >= ServerConstants.PlayerGMRank.GM.getLevel();
   }

   public boolean isAdmin() {
      return this.gmLevel >= ServerConstants.PlayerGMRank.ADMIN.getLevel();
   }

   public int getGMLevel() {
      return this.gmLevel;
   }

   public boolean hasGmLevel(int level) {
      return this.gmLevel >= level;
   }

   public void setGMLevel(byte level) {
      this.gmLevel = level;
   }

   public void gainItem(int code, int quantity) {
      MapleInventoryManipulator.addById(this.client, code, (short) quantity, "");
   }

   public final void gainItem(int id, int quantity, boolean randomStats, long period, String gm_log) {
      if (quantity >= 0) {
         MapleItemInformationProvider ii = MapleItemInformationProvider.getInstance();
         MapleInventoryType type = GameConstants.getInventoryType(id);
         if (!MapleInventoryManipulator.checkSpace(this.client, id, quantity, "")) {
            return;
         }

         if (quantity < 0 && this.getChangeEmotionTime() != 0L
               && System.currentTimeMillis() - this.getChangeEmotionTime() <= 2000L) {
            this.ban("아이템 복사 시도로 인한 영구 정지", true, true, true);
            return;
         }

         if (type.equals(MapleInventoryType.EQUIP) && !GameConstants.isThrowingStar(id)
               && !GameConstants.isBullet(id)) {
            Equip item = (Equip) (randomStats ? ii.randomizeStats((Equip) ii.getEquipById(id)) : ii.getEquipById(id));
            if (period > 0L) {
               item.setExpiration(System.currentTimeMillis() + period);
            }

            if (item.getItemId() == 1114402
                  || item.getItemId() == 1114401
                  || item.getItemId() == 1112921
                  || DBConfig.isGanglim && item.getItemId() == 1112916
                  || item.getItemId() == 1112917
                  || item.getItemId() == 1032999
                  || item.getItemId() == 1032998) {
               item.setUniqueId(MapleInventoryIdentifier.getInstance());
            }

            if (GameConstants.isFairyPendant(item.getItemId())) {
               item.setUniqueId(MapleInventoryIdentifier.getInstance());
            }

            item.setGMLog(StringUtil.getAllCurrentTime() + "에 " + gm_log);
            MapleInventoryManipulator.addbyItem(this.client, item);
         } else {
            MapleInventoryManipulator.addById(
                  this.client,
                  id,
                  (short) quantity,
                  "",
                  null,
                  period,
                  StringUtil.getAllCurrentTime()
                        + "?????? "
                        + this.getName()
                        + "???????????? ?멨????????占? gainItem ???????у???????멨?????? ???????????? ??????????????????.");
         }
      } else {
         MapleInventoryManipulator.removeById(this.client, GameConstants.getInventoryType(id), id, -quantity, true,
               true);
      }

      this.client.getSession().writeAndFlush(CWvsContext.InfoPacket.getShowItemGain(id, (short) quantity, true));
   }

   public final MapleInventory getInventory(MapleInventoryType type) {
      return this.inventory[type.ordinal()];
   }

   public final MapleInventory[] getInventorys() {
      return this.inventory;
   }

   public final void expirationTask(boolean pending, boolean firstLoad) {
      MapleItemInformationProvider ii = MapleItemInformationProvider.getInstance();
      if (pending) {
         if (this.pendingExpiration != null) {
            for (Integer z : this.pendingExpiration) {
               this.client.getSession().writeAndFlush(CWvsContext.InfoPacket.itemExpired(z));
               if (!firstLoad) {
                  Pair<Integer, String> replace = ii.replaceItemInfo(z);
                  if (replace != null && replace.left > 0 && replace.right.length() > 0) {
                     this.dropMessage(5, replace.right);
                  }
               }
            }
         }

         this.pendingExpiration = null;
         if (this.pendingSkills != null) {
            this.client.getSession()
                  .writeAndFlush(CWvsContext.updateSkills(this.pendingSkills, true, false, (byte) 10));

            for (Skill zx : this.pendingSkills.keySet()) {
               this.client.getSession().writeAndFlush(CWvsContext.serverNotice(5,
                     "[" + SkillFactory.getSkillName(zx.getId()) + "] 스킬이 유효기간이 만료되어 사라졌습니다."));
            }
         }

         this.pendingSkills = null;
      } else {
         MapleQuestStatus stat = this.getQuestNoAdd(MapleQuest.getInstance(122700));
         List<Integer> ret = new ArrayList<>();
         long currenttime = System.currentTimeMillis();
         List<Triple<MapleInventoryType, Item, Boolean>> toberemove = new ArrayList<>();
         List<Item> tobeunlock = new ArrayList<>();
         int pendantID = 0;
         int shieldID = 0;
         if (!DBConfig.isGanglim) {
            Item shield = this.getInventory(MapleInventoryType.EQUIPPED).getItem((short) -10);
            if (shield != null && GameConstants.isShield(shield.getItemId())) {
               Equip equip = (Equip) this.getInventory(MapleInventoryType.EQUIPPED).getItem((short) -11);
               if (equip != null && !GameConstants.isOneHandWeapon(equip.getItemId())) {
                  toberemove.add(new Triple<>(MapleInventoryType.EQUIPPED, shield, false));
                  MapleCabinet cabinet = this.getCabinet();
                  if (cabinet != null) {
                     Item eqp = shield.copy();
                     cabinet.addCabinetItem(
                           new MapleCabinetItem(
                                 cabinet.getNextIndex(), System.currentTimeMillis() + 2678400000L, "[두손무기 방패 착용]",
                                 "두손무기에 방패 착용 오류로 인하여 장착 해제된 아이템입니다.", eqp));
                     this.send(CField.maplecabinetResult(8));
                     this.setSaveFlag(this.getSaveFlag() | CharacterSaveFlag.CABINET.getFlag());
                     this.setUnequipShield(true);
                     shieldID = shield.getItemId();
                  }
               }
            }

            Item clothes = this.getInventory(MapleInventoryType.EQUIPPED).getItem((short) -105);
            if (clothes != null && clothes.getItemId() / 10000 == 105) {
               Item pants = this.getInventory(MapleInventoryType.EQUIPPED).getItem((short) -106);
               if (pants != null) {
                  toberemove.add(new Triple<>(MapleInventoryType.EQUIPPED, pants, false));
                  MapleCabinet cabinet = this.getCabinet();
                  if (cabinet != null) {
                     Item eqp = pants.copy();
                     cabinet.addCabinetItem(
                           new MapleCabinetItem(
                                 cabinet.getNextIndex(),
                                 System.currentTimeMillis() + 2678400000L,
                                 "[한벌옷 하의 캐시장비 장착 오류]",
                                 "한벌옷에 하의 캐시장비 중복 장착 오류로 인하여 장착 해제된 아이템입니다.",
                                 eqp));
                     this.send(CField.maplecabinetResult(8));
                     this.setSaveFlag(this.getSaveFlag() | CharacterSaveFlag.CABINET.getFlag());
                     this.setUnequipPants(true);
                     shieldID = pants.getItemId();
                  }
               }
            }

            clothes = this.getInventory(MapleInventoryType.EQUIPPED).getItem((short) -1203);
            if (clothes != null && clothes.getItemId() / 10000 == 105) {
               Item pants = this.getInventory(MapleInventoryType.EQUIPPED).getItem((short) -1204);
               if (pants != null) {
                  toberemove.add(new Triple<>(MapleInventoryType.EQUIPPED, pants, false));
                  MapleCabinet cabinet = this.getCabinet();
                  if (cabinet != null) {
                     Item eqp = pants.copy();
                     cabinet.addCabinetItem(
                           new MapleCabinetItem(
                                 cabinet.getNextIndex(),
                                 System.currentTimeMillis() + 2678400000L,
                                 "[한벌옷 하의 캐시장비 장착 오류]",
                                 "한벌옷에 하의 캐시장비 중복 장착 오류로 인하여 장착 해제된 아이템입니다.",
                                 eqp));
                     this.send(CField.maplecabinetResult(8));
                     this.setSaveFlag(this.getSaveFlag() | CharacterSaveFlag.CABINET.getFlag());
                     this.setUnequipPants(true);
                     shieldID = pants.getItemId();
                  }
               }
            }

            clothes = this.getInventory(MapleInventoryType.EQUIPPED).getItem((short) -1505);
            if (clothes != null && clothes.getItemId() / 10000 == 105) {
               Item pants = this.getInventory(MapleInventoryType.EQUIPPED).getItem((short) -1508);
               if (pants != null) {
                  toberemove.add(new Triple<>(MapleInventoryType.EQUIPPED, pants, false));
                  MapleCabinet cabinet = this.getCabinet();
                  if (cabinet != null) {
                     Item eqp = pants.copy();
                     cabinet.addCabinetItem(
                           new MapleCabinetItem(
                                 cabinet.getNextIndex(),
                                 System.currentTimeMillis() + 2678400000L,
                                 "[한벌옷 하의 캐시장비 장착 오류]",
                                 "한벌옷에 하의 캐시장비 중복 장착 오류로 인하여 장착 해제된 아이템입니다.",
                                 eqp));
                     this.send(CField.maplecabinetResult(8));
                     this.setSaveFlag(this.getSaveFlag() | CharacterSaveFlag.CABINET.getFlag());
                     this.setUnequipPants(true);
                     shieldID = pants.getItemId();
                  }
               }
            }
         }

         for (MapleInventoryType inv : MapleInventoryType.values()) {
            for (Item item : this.getInventory(inv)) {
               long expiration = item.getExpiration();
               if (expiration != -1L && GameConstants.isPet(item.getItemId()) && currenttime > expiration) {
                  MaplePet pet = item.getPet();
                  if (pet != null) {
                     for (int i = 0; i < 3; i++) {
                        MaplePet p = this.getPet(i);
                        if (p != null && pet.getUniqueId() == p.getUniqueId()) {
                           pet.setSummoned((byte) 0);
                           pet.saveToDb();
                           this.removePet(pet, false);
                        }
                     }

                     toberemove.add(new Triple<>(inv, item, false));
                  }
               }

               if ((expiration == -1L || GameConstants.isPet(item.getItemId()) || currenttime <= expiration)
                     && (!firstLoad || !ii.isLogoutExpire(item.getItemId()))) {
                  if (item.getItemId() == 5000054 && item.getPet() != null && item.getPet().getSecondsLeft() <= 0) {
                     toberemove.add(new Triple<>(inv, item, false));
                  } else if (item.getItemId() == 1122334) {
                     this.setFairyExp((byte) 0);
                  }
               } else if (ItemFlag.PROTECTED.check(item.getFlag())) {
                  tobeunlock.add(item);
               } else if (currenttime > expiration) {
                  toberemove.add(new Triple<>(inv, item, false));
               }
            }
         }

         for (Triple<MapleInventoryType, Item, Boolean> itemz : toberemove) {
            Item item = itemz.getMid();
            this.getInventory(itemz.getLeft()).removeItem(item.getPosition(), item.getQuantity(), false);
            if (itemz.getRight()
                  && this.getInventory(GameConstants.getInventoryType(item.getItemId())).getNextFreeSlot() > -1) {
               item.setPosition(this.getInventory(GameConstants.getInventoryType(item.getItemId())).getNextFreeSlot());
               this.getInventory(GameConstants.getInventoryType(item.getItemId())).addFromDB(item);
            } else if (item.getItemId() != pendantID && item.getItemId() != shieldID) {
               ret.add(item.getItemId());
            }

            if (!firstLoad) {
               Pair<Integer, String> replace = ii.replaceItemInfo(item.getItemId());
               if (replace != null && replace.left > 0) {
                  Item theNewItem = null;
                  if (GameConstants.getInventoryType(replace.left) == MapleInventoryType.EQUIP) {
                     theNewItem = ii.getEquipById(replace.left);
                     theNewItem.setPosition(item.getPosition());
                  } else {
                     theNewItem = new Item(replace.left, item.getPosition(), (short) 1, 0);
                  }

                  this.getInventory(itemz.getLeft()).addFromDB(theNewItem);
               }
            }
         }

         for (Item itemz : tobeunlock) {
            itemz.setExpiration(-1L);
            itemz.setFlag((byte) (itemz.getFlag() - ItemFlag.PROTECTED.getValue()));
         }

         this.pendingExpiration = ret;
         Map<Skill, SkillEntry> skilz = new HashMap<>();
         List<Skill> toberem = new ArrayList<>();

         for (Entry<Skill, SkillEntry> skil : this.skills.entrySet()) {
            if (skil.getValue().expiration != -1L && currenttime > skil.getValue().expiration) {
               toberem.add(skil.getKey());
            }
         }

         for (Skill skilx : toberem) {
            skilz.put(skilx, new SkillEntry(0, (byte) 0, -1L));
            this.skills.remove(skilx);
            this.setSaveFlag(this.getSaveFlag() | CharacterSaveFlag.SKILLS.getFlag());
         }

         this.pendingSkills = skilz;
         if (stat != null && stat.getCustomData() != null && Long.parseLong(stat.getCustomData()) < currenttime) {
            this.quests.remove(MapleQuest.getInstance(7830));
            this.quests.remove(MapleQuest.getInstance(122700));
         }
      }
   }

   public MapleShop getShop() {
      return this.shop;
   }

   public void setShop(MapleShop shop) {
      this.shop = shop;
   }

   public long getMeso() {
      return this.meso;
   }

   public final int[] getSavedLocations() {
      return this.savedLocations;
   }

   public int getSavedLocation(SavedLocationType type) {
      return this.savedLocations[type.getValue()];
   }

   public void saveLocation(SavedLocationType type) {
      this.savedLocations[type.getValue()] = this.getMapId();
      this.setSaveFlag(this.getSaveFlag() | CharacterSaveFlag.SAVED_LOCATION.getFlag());
   }

   public void saveLocation(SavedLocationType type, int mapz) {
      this.savedLocations[type.getValue()] = mapz;
      this.setSaveFlag(this.getSaveFlag() | CharacterSaveFlag.SAVED_LOCATION.getFlag());
   }

   public void clearSavedLocation(SavedLocationType type) {
      this.savedLocations[type.getValue()] = -1;
      this.setSaveFlag(this.getSaveFlag() | CharacterSaveFlag.SAVED_LOCATION.getFlag());
   }

   public void gainMeso(long gain, boolean show, boolean exclusive) {
      this.gainMeso(gain, show, exclusive, 0);
   }

   public void gainMeso(long gain, boolean show, boolean exclusive, int changeMoney) {
      this.gainMeso(gain, show, false, exclusive, changeMoney);
   }

   public void gainMeso(long gain, boolean show) {
      this.gainMeso(gain, show, true, 0);
   }

   public void gainMeso(long gain, boolean show, boolean inChat, boolean exclusive) {
      this.gainMeso(gain, show, inChat, exclusive, 0);
   }

   public void gainMeso(long gain, boolean show, boolean inChat, boolean exclusive, int changeMoney) {
      if (this.meso + gain < 0L) {
         this.client.getSession().writeAndFlush(CWvsContext.enableActions(this, exclusive));
      } else {
         this.meso += gain;
         this.updateSingleStat(MapleStat.MESO, this.meso, false);
         this.client.getSession().writeAndFlush(CWvsContext.enableActions(this, exclusive));
         if (show && gain != 0L) {
            this.client.getSession().writeAndFlush(CWvsContext.onMesoPickupResult((int) gain));
            this.client.getSession().writeAndFlush(CWvsContext.InfoPacket.showMesoGain(gain, inChat, changeMoney));
         }

         Center.ServerSave.characterMesoMap.put(this.getId(), this.meso);
      }
   }

   public void setMeso(long meso) {
      this.meso = meso;
      Center.ServerSave.characterMesoMap.put(this.getId(), meso);
   }

   public void controlMonster(MapleMonster monster, boolean aggro) {
      if (!this.clone && monster != null) {
         monster.setController(this);
         this.controlledLock.writeLock().lock();

         try {
            this.controlled.add(monster);
         } finally {
            this.controlledLock.writeLock().unlock();
         }

         this.client.getSession().writeAndFlush(MobPacket.controlMonster(monster, false, aggro));
         monster.sendStatus(this.client);
      }
   }

   public void stopControllingMonster(MapleMonster monster) {
      if (!this.clone && monster != null) {
         this.controlledLock.writeLock().lock();

         try {
            if (this.controlled.contains(monster)) {
               this.controlled.remove(monster);
            }
         } finally {
            this.controlledLock.writeLock().unlock();
         }
      }
   }

   public void checkMonsterAggro(MapleMonster monster) {
      if (!this.clone && monster != null) {
         if (monster.getController() == this) {
            monster.setControllerHasAggro(true);
         } else {
            monster.switchController(this, true);
         }
      }
   }

   public int getControlledSize() {
      return this.controlled.size();
   }

   public int getAccountID() {
      return this.accountid;
   }

   public void checkHasteQuestComplete(int questID) {
      MapleQuestStatus q = this.quests.get(MapleQuest.getInstance(questID));
      if (q != null
            && q.getQuest() != null
            && q.getQuest().getId() >= QuestExConstants.HasteEventNormalMob.getQuestID()
            && q.getQuest().getId() <= QuestExConstants.HasteEventSuddenMK.getQuestID()
            && q.getStatus() == 1) {
         boolean forceComplete = false;
         int index = -1;
         switch (QuestExConstants.getQuest(q.getQuest().getId())) {
            case HasteEventNormalMob:
            case HasteEventEliteMob:
               index = q.getQuest().getId() - QuestExConstants.HasteEventInit.getQuestID();
               forceComplete = true;
               break;
            case HasteEventRandomPortal:
               index = 3;
               this.updateOneInfo(
                     QuestExConstants.HasteEventRandomPortal.getQuestID(),
                     "count",
                     String.valueOf(Integer.parseInt(
                           this.getOneInfo(QuestExConstants.HasteEventRandomPortal.getQuestID(), "count")) + 1));
               if (Integer
                     .parseInt(this.getOneInfo(QuestExConstants.HasteEventRandomPortal.getQuestID(), "count")) >= 3) {
                  forceComplete = true;
               }
               break;
            case HasteEventFireWolf:
               index = 4;
               this.updateOneInfo(
                     QuestExConstants.HasteEventFireWolf.getQuestID(),
                     "count",
                     String.valueOf(
                           Integer.parseInt(this.getOneInfo(QuestExConstants.HasteEventFireWolf.getQuestID(), "count"))
                                 + 1));
               forceComplete = true;
               break;
            case HasteEventRuneAct:
               index = 5;
               this.updateOneInfo(
                     QuestExConstants.HasteEventRuneAct.getQuestID(),
                     "RunAct",
                     String.valueOf(
                           Integer.parseInt(this.getOneInfo(QuestExConstants.HasteEventRuneAct.getQuestID(), "RunAct"))
                                 + 1));
               if (Integer.parseInt(this.getOneInfo(QuestExConstants.HasteEventRuneAct.getQuestID(), "RunAct")) >= 5) {
                  forceComplete = true;
               }
               break;
            case HasteEventSuddenMK:
               index = 6;
               this.updateOneInfo(
                     QuestExConstants.HasteEventSuddenMK.getQuestID(),
                     "suddenMK",
                     String.valueOf(Integer.parseInt(
                           this.getOneInfo(QuestExConstants.HasteEventSuddenMK.getQuestID(), "suddenMK")) + 1));
               forceComplete = true;
         }

         if (forceComplete) {
            q.getQuest().forceComplete(this, 0);
            int count = 0;

            for (int i = 1; i <= 6; i++) {
               if (this.getOneInfo(QuestExConstants.HasteEvent.getQuestID(), "M" + i).equals("1")) {
                  count++;
               }
            }

            String str;
            if (count == 6) {
               str = "오늘의 미션을 전부 클리어 하셨습니다.";
            } else {
               str = "일일 미션 " + (count + 1) + "개 완료! " + (count + 1) + "번째 상자를 클릭하세요!";
            }

            this.updateOneInfo(QuestExConstants.HasteEvent.getQuestID(), "M" + index, "1");
            this.updateOneInfo(
                  QuestExConstants.HasteEvent.getQuestID(),
                  "unlockBox",
                  Integer.parseInt(this.getOneInfo(QuestExConstants.HasteEvent.getQuestID(), "unlockBox")) + 1 + "");
            this.updateOneInfo(QuestExConstants.HasteEvent.getQuestID(), "str", str);
         }
      }
   }

   public void checkHiddenMissionComplete(int questID) {
      this.checkHiddenMissionComplete(questID, 1);
   }

   public void checkHiddenMissionComplete(int questID, int killCount) {
      MapleQuestStatus q = this.quests.get(MapleQuest.getInstance(questID));
      if (q != null
            && q.getQuest() != null
            && !DBConfig.isGanglim
            && q.getQuest().getId() >= QuestExConstants.SuddenMKNormalMob1.getQuestID()
            && q.getQuest().getId() <= QuestExConstants.SuddenMKInnerPortal.getQuestID()) {
         boolean forceComplete = false;
         switch (QuestExConstants.getQuest(q.getQuest().getId())) {
            case SuddenMKNormalMob1:
            case SuddenMKNormalMob2:
            case SuddenMKNormalMob3:
               if (q.getMobKills() == null) {
                  q.setMobKills(9101025, 0);
               }

               q.setMobKills(9101025, q.getMobKills(9101025) + killCount);
               this.client.getSession().writeAndFlush(CWvsContext.InfoPacket.updateQuestMobKills(q));
               int count = 100 * (q.getQuest().getId() - QuestExConstants.SuddenMKInit.getQuestID());
               if (q.getMobKills(9101025) >= count) {
                  forceComplete = true;
               }
               break;
            case SuddenMKComboKill1:
            case SuddenMKComboKill2:
            case SuddenMKComboKill3:
               this.updateOneInfo(q.getQuest().getId(), "ComboK", this.getMonsterCombo() + "");
               break;
            case SuddenMKMultiKill1:
            case SuddenMKMultiKill2:
            case SuddenMKMultiKill3:
               this.updateOneInfo(q.getQuest().getId(), "MultiKC", this.getMultiKillCount() + "");
               break;
            case SuddenMKRuneAct:
            case SuddenMKRestField:
            case SuddenMKEliteBoss:
            case SuddenMKFireWolf:
            case SuddenMKRandomPortal:
            case SuddenMKInnerPortal:
               forceComplete = true;
               break;
            case SuddenMKEliteMob1:
            case SuddenMKEliteMob2:
            case SuddenMKEliteMob3:
               if (q.getMobKills() == null) {
                  q.setMobKills(9101223, 0);
               }

               q.setMobKills(9101223, q.getMobKills(9101223) + 1);
               this.client.getSession().writeAndFlush(CWvsContext.InfoPacket.updateQuestMobKills(q));
               count = q.getQuest().getId() - QuestExConstants.SuddenMKRestField.getQuestID();
               if (q.getMobKills(9101223) >= count) {
                  forceComplete = true;
               }
         }

         if ((q.getQuest().getId() < QuestExConstants.SuddenMKNormalMob1.getQuestID()
               || q.getQuest().getId() > QuestExConstants.SuddenMKNormalMob3.getQuestID())
               && (q.getQuest().getId() < QuestExConstants.SuddenMKEliteMob1.getQuestID()
                     || q.getQuest().getId() > QuestExConstants.SuddenMKEliteMob3.getQuestID())) {
            if (forceComplete || q.getQuest().canComplete(this, null)) {
               q.getQuest().forceComplete(this, 0);
               this.updateOneInfo(QuestExConstants.SuddenMKInit.getQuestID(), "state", "3");
            }
         } else if (forceComplete) {
            q.getQuest().forceComplete(this, 0);
            this.updateOneInfo(QuestExConstants.SuddenMKInit.getQuestID(), "state", "3");
         }
      }
   }

   public void mobKilled(int id, int count, int skillID) {
      if (DBConfig.isGanglim) {
         if (id == 9101025 && this.getEventInstance() == null) {
            int[] questIDList = new int[] { 9991111, 9991112 };

            for (int questID : questIDList) {
               int kCount = this.getOneInfoQuestInteger(questID, "Count");
               int maxCount = this.getOneInfoQuestInteger(questID, "MaxCount");
               if (this.getOneInfoQuestInteger(questID, "Clear") == 1 && maxCount > kCount) {
                  int newCount = kCount + count;
                  this.updateOneInfo(questID, "Count", String.valueOf(newCount));
                  this.send(CWvsContext.getScriptProgressMessage("레벨 범위 몬스터 " + newCount + " / " + maxCount));
               }
            }
         }

         String qKey = this.getKeyValue("Quest_" + id);
         if (qKey != null) {
            int value = Integer.parseInt(qKey);
            int newValue = value + count;
            String qm = this.getKeyValue("QuestMax_" + id);
            String max = this.getKeyValue("QuestMax_" + id);
            if (max != null && !max.isEmpty()) {
               int questMax = qm == null ? 0 : Integer.parseInt(max);
               if (value < questMax) {
                  this.setKeyValue("Quest_" + id, String.valueOf(newValue));
                  MapleMonster mob = MapleLifeFactory.getMonster(id);
                  if (mob != null) {
                     this.send(CWvsContext
                           .getScriptProgressMessage(mob.getStats().getName() + " " + newValue + " / " + questMax));
                  }
               }
            }
         }
      }

      if (!DBConfig.isGanglim && id == 9101025) {
         int questId = 1235859;
         int clearCount = this.getOneInfoQuestInteger(questId, "praise_dailyQuest_ClearCount");
         int mobCount = this.getOneInfoQuestInteger(questId, "praise_dailyQuest_MobCount");
         if (clearCount < 20) {
            mobCount += count;
            if (mobCount >= 15000) {
               clearCount++;
               mobCount -= 15000;
               PraisePoint point = this.getPraisePoint();
               point.setTotalPoint(point.getTotalPoint() + 100);
               point.setPoint(point.getPoint() + 100);
               this.updateOneInfo(3887, "point", String.valueOf(point.getPoint()));
               this.setSaveFlag(this.getSaveFlag() | CharacterSaveFlag.PRAISE_POINT.getFlag());
               this.dropMessage(5, "[칭찬 포인트 일일 퀘스트] 레벨 범위 몬스터 15,000마리를 처치하여 100 칭찬 포인트가 지급됩니다.");
               this.dropMessage(5,
                     "[칭찬 포인트 일일 퀘스트] 오늘 " + clearCount + "번 클리어 하셨습니다. " + (20 - clearCount) + "번 더 클리어 하실 수 있습니다.");
            }

            this.updateOneInfo(questId, "praise_dailyQuest_ClearCount", String.valueOf(clearCount), false);
            this.updateOneInfo(questId, "praise_dailyQuest_MobCount", String.valueOf(mobCount), false);
            if (clearCount >= 20) {
               this.dropMessage(-7, "오늘의 칭찬 포인트 일일 퀘스트가 모두 완료되었습니다.");
            } else {
               this.dropMessage(-7, "[칭찬 포인트 일일 퀘스트 (" + clearCount + "/20)] 레벨 범위 몬스터 " + mobCount + "/15000");
            }
         }
      }

      for (MapleQuestStatus q : this.quests.values()) {
         if (q.getQuest().getId() >= QuestExConstants.SuddenMKComboKill1.getQuestID()
               && q.getQuest().getId() <= QuestExConstants.SuddenMKMultiKill3.getQuestID()) {
            this.checkHiddenMissionComplete(q.getQuest().getId(), count);
         } else if (q.getQuest().getId() >= QuestExConstants.SuddenMKNormalMob1.getQuestID()
               && q.getQuest().getId() <= QuestExConstants.SuddenMKNormalMob3.getQuestID()
               && id == 9101025) {
            this.checkHiddenMissionComplete(q.getQuest().getId(), count);
         } else if (q.getQuest().getId() >= QuestExConstants.SuddenMKEliteMob1.getQuestID()
               && q.getQuest().getId() <= QuestExConstants.SuddenMKEliteMob3.getQuestID()
               && id == 9101223) {
            this.checkHiddenMissionComplete(q.getQuest().getId(), count);
         } else if (q.getQuest().getId() >= QuestExConstants.SuddenMKEliteBoss.getQuestID() && id >= 8220022
               && id <= 8220026) {
            this.checkHiddenMissionComplete(q.getQuest().getId(), count);
         } else if (q.getStatus() == 1
               && q.hasMobKills()
               && (q.getQuest().getId() != QuestExConstants.NeoEventNormalMob.getQuestID() || id != 9101025)
               && (q.getQuest().getId() != QuestExConstants.NeoEventEliteMob.getQuestID() || id != 9101223)) {
            int mobID = id;
            if (id >= 8220022 && id <= 8220026) {
               mobID = 9101064;
            }

            if (mobID >= 9833106 && mobID <= 9833110) {
               mobID = 9101089;
            }

            if (q.getQuest().getId() == 34133 && mobID == 8641003) {
               mobID = 9101085;
            }

            if (q.getQuest().getId() == 34136 && mobID == 8641006) {
               mobID = 9101086;
            }

            if (q.getQuest().getId() == 39007 && (mobID == 3503002 || mobID == 3503003)) {
               mobID = 9101215;
            }

            if (q.getQuest().getId() == 39008 && (mobID == 3503004 || mobID == 3503005)) {
               mobID = 9101216;
            }

            if (q.getQuest().getId() == 39011 && (mobID == 3503006 || mobID == 3503007)) {
               mobID = 9101217;
            }

            if (q.getQuest().getId() == 39012 && (mobID == 3503008 || mobID == 3503009)) {
               mobID = 9101218;
            }

            if (q.mobKilled(mobID, count, skillID)) {
               if (q.maxMob(mobID) >= 1000) {
                  this.client.getPlayer().updateOneInfo(q.getQuest().getId(), "m0", q.getMobKills().get(mobID) + "");
               }

               this.client.getSession().writeAndFlush(CWvsContext.InfoPacket.updateQuestMobKills(q));
               if (q.getQuest().canComplete(this, null)) {
                  if (q.getQuest().getId() == QuestExConstants.HasteEventNormalMob.getQuestID()
                        || q.getQuest().getId() == QuestExConstants.HasteEventEliteMob.getQuestID()) {
                     this.checkHasteQuestComplete(q.getQuest().getId());
                  }

                  if (q.getQuest().getId() == 100569) {
                     this.updateOneInfo(100565, "questNum", "100568");
                  }

                  if (q.getQuest().getId() == 100575) {
                     this.updateOneInfo(100565, "questNum", "100574");
                  }

                  if (q.getQuest().getId() == 100577) {
                     this.updateOneInfo(100565, "questNum", "100576");
                  }

                  this.client.getSession().writeAndFlush(CWvsContext.getShowQuestCompletion(q.getQuest().getId()));
               }
            }
         }
      }
   }

   public final List<MapleQuestStatus> getStartedQuests() {
      List<MapleQuestStatus> ret = new LinkedList<>();

      for (MapleQuestStatus q : this.quests.values()) {
         if (q.getStatus() == 1 && !q.getQuest().isBlocked()) {
            ret.add(q);
         }
      }

      return ret;
   }

   public final List<MapleQuestStatus> getCompletedQuests() {
      List<MapleQuestStatus> ret = new LinkedList<>();

      for (MapleQuestStatus q : this.quests.values()) {
         if (q.getStatus() == 2 && !q.getQuest().isBlocked()) {
            ret.add(q);
         }
      }

      return ret;
   }

   public final List<Pair<Integer, Long>> getCompletedMedals() {
      List<Pair<Integer, Long>> ret = new ArrayList<>();

      for (MapleQuestStatus q : this.quests.values()) {
         if (q.getStatus() == 2
               && !q.getQuest().isBlocked()
               && q.getQuest().getMedalItem() > 0
               && GameConstants.getInventoryType(q.getQuest().getMedalItem()) == MapleInventoryType.EQUIP) {
            ret.add(new Pair<>(q.getQuest().getId(), q.getCompletionTime()));
         }
      }

      return ret;
   }

   public Map<Skill, SkillEntry> getSkills() {
      return Collections.unmodifiableMap(this.skills);
   }

   public int getTotalSkillLevel(Skill skill) {
      return skill == null ? 0 : this.getTotalSkillLevel(skill, skill.getId());
   }

   public int getTotalSkillLevel(Skill skill, int realSkillID) {
      if (skill == null) {
         return 0;
      } else {
         SkillEntry ret = this.skills.get(skill);
         if (ret != null && ret.skillevel > 0) {
            if (skill.getId() >= 80000400 && skill.getId() <= 80000422) {
               return ret.skillevel;
            } else if (skill.getId() / 100000 == 920) {
               return ret.skillevel;
            } else {
               int level = 0;
               Skill s = SkillFactory.getSkill(realSkillID);
               if (s != null) {
                  if (s.combatOrders()) {
                     level = Math.min(
                           skill.getTrueMax(),
                           ret.skillevel
                                 + (s.isBeginnerSkill() ? 0
                                       : (skill.getMaxLevel() > 10 ? this.stats.incAllskill : 0)
                                             + this.stats.getSkillIncrement(skill.getId())));
                     if (!s.isHyper() && !s.isBeginnerSkill() && !GameConstants.is5thSkill(realSkillID)) {
                        level += this.stats.combatOrders;
                        if (s.getPsd() > 0) {
                           level += this.stats.passivePlus;
                        }
                     }
                  } else {
                     level = ret.skillevel
                           + (s.isBeginnerSkill() ? 0
                                 : (s.getMaxLevel() > 10 ? this.stats.incAllskill : 0)
                                       + this.stats.getSkillIncrement(skill.getId()));
                     if (!s.isHyper() && !s.isBeginnerSkill() && !GameConstants.is5thSkill(realSkillID)) {
                        level += this.stats.combatOrders;
                        if (s.getPsd() > 0) {
                           level += this.stats.passivePlus;
                        }
                     }

                     level = Math.min(skill.getTrueMax(), level);
                  }
               }

               if (skill.getId() >= 400000000) {
                  for (VMatrixSlot slot : this.getVMatrixSlots()) {
                     VCore core = null;

                     for (VCore vcore : this.getVCoreSkillsNoLock()) {
                        if (vcore.getCoreId() == slot.getEquippedCore()
                              && (vcore.getSkill1() == skill.getId() || vcore.getSkill2() == skill.getId()
                                    || vcore.getSkill3() == skill.getId())) {
                           core = vcore;
                           break;
                        }
                     }

                     if (core != null) {
                        level += slot.getSlotEnforcement();
                     }
                  }
               }

               return level;
            }
         } else {
            return ret == null && realSkillID / 10000 == 50006 && this.getHexaCore() != null
                  ? this.getHexaCore().getSkillLevel(realSkillID)
                  : 0;
         }
      }
   }

   public int getVCoreSkillPureLevel(int skillID) {
      int result = 0;

      for (VMatrixSlot slot : this.getVMatrixSlots()) {
         for (VCore vcore : this.getVCoreSkillsNoLock()) {
            if (vcore.getCoreId() == slot.getEquippedCore()
                  && (vcore.getSkill1() == skillID || vcore.getSkill2() == skillID || vcore.getSkill3() == skillID)) {
               result += vcore.getLevel();
               break;
            }
         }
      }

      if (result < 0) {
         result = 0;
      }

      if (result > 50) {
         result = 50;
      }

      return result;
   }

   public int getAllSkillLevels() {
      int rett = 0;

      for (Entry<Skill, SkillEntry> ret : this.skills.entrySet()) {
         if (!ret.getKey().isBeginnerSkill() && !ret.getKey().isSpecialSkill() && ret.getValue().skillevel > 0) {
            rett += ret.getValue().skillevel;
         }
      }

      return rett;
   }

   public long getSkillExpiry(Skill skill) {
      if (skill == null) {
         return 0L;
      } else {
         SkillEntry ret = this.skills.get(skill);
         return ret != null && ret.skillevel > 0 ? ret.expiration : 0L;
      }
   }

   public int getSkillLevel(Skill skill) {
      if (skill == null) {
         return 0;
      } else {
         SkillEntry ret = this.skills.get(skill);
         return ret != null && ret.skillevel > 0 ? ret.skillevel : 0;
      }
   }

   public byte getMasterLevel(int skill) {
      return this.getMasterLevel(SkillFactory.getSkill(skill));
   }

   public byte getMasterLevel(Skill skill) {
      SkillEntry ret = this.skills.get(skill);
      return ret == null ? 0 : ret.masterlevel;
   }

   public void levelUp() {
      boolean refresh = false;
      this.levelUpLock.writeLock().lock();

      try {
         if (GameConstants.isKOC(this.job)) {
            if (this.level <= 70) {
               this.remainingAp = (short) (this.remainingAp + 6);
            } else {
               this.remainingAp = (short) (this.remainingAp + 5);
            }
         } else {
            this.remainingAp = (short) (this.remainingAp + 5);
         }

         long maxhp = this.stats.getMaxHp();
         long maxmp = this.stats.getMaxMp();
         if (GameConstants.isNovice(this.job) && this.job != 3001 && this.job != 10000) {
            maxhp += Randomizer.rand(24, 32);
            maxmp += Randomizer.rand(20, 24);
         } else if (this.job != 3001 && this.job != 10000) {
            if ((this.job < 100 || this.job > 132) && !GameConstants.isAdele(this.job)) {
               if (this.job >= 200 && this.job <= 232) {
                  maxhp += Randomizer.rand(20, 36);
                  maxmp += Randomizer.rand(44, 63);
               } else if ((this.job < 300 || this.job > 332)
                     && (this.job < 400 || this.job > 434)
                     && (this.job < 1300 || this.job > 1312)
                     && (this.job < 1400 || this.job > 1412)
                     && (this.job < 3300 || this.job > 3312)) {
                  if ((this.job < 2300 || this.job > 2312) && (this.job < 6300 || this.job > 6312)) {
                     if (this.job >= 3100 && this.job <= 3122) {
                        maxhp += Randomizer.rand(70, 105);
                     } else if ((this.job < 500 || this.job > 532) && !GameConstants.isArk(this.job)) {
                        if (this.job >= 1100 && this.job <= 1112) {
                           maxhp += Randomizer.rand(70, 100);
                           maxmp += Randomizer.rand(10, 20);
                        } else if (this.job >= 1200 && this.job <= 1212) {
                           maxhp += Randomizer.rand(20, 38);
                           maxmp += Randomizer.rand(50, 75);
                        } else if (this.job >= 2200 && this.job <= 2218) {
                           maxhp += Randomizer.rand(25, 40);
                           maxmp += Randomizer.rand(50, 80);
                        } else if ((this.job < 2700 || this.job > 2712) && (this.job < 15200 || this.job > 15212)
                              && !GameConstants.isLara(this.job)) {
                           if (this.job >= 1500 && this.job <= 1512) {
                              maxhp += Randomizer.rand(56, 67);
                              maxmp += Randomizer.rand(34, 47);
                           } else if (this.job >= 2100 && this.job <= 2112) {
                              maxhp += Randomizer.rand(100, 130);
                              maxmp += Randomizer.rand(10, 15);
                           } else if (this.job >= 2400 && this.job <= 2412) {
                              maxhp += Randomizer.rand(56, 67);
                              maxmp += Randomizer.rand(74, 100);
                           } else if (this.job >= 3700 && this.job <= 3712) {
                              maxhp += Randomizer.rand(56, 67);
                              maxmp += Randomizer.rand(74, 100);
                           } else if (this.job >= 3500 && this.job <= 3512) {
                              maxhp += Randomizer.rand(56, 67);
                              maxmp += Randomizer.rand(34, 47);
                           } else if (this.job >= 3600 && this.job <= 3612) {
                              maxhp += Randomizer.rand(100, 130);
                              maxmp += Randomizer.rand(10, 15);
                           } else if (this.job >= 2500 && this.job <= 2512) {
                              maxhp += Randomizer.rand(66, 77);
                              maxmp += Randomizer.rand(44, 57);
                           } else if (this.job >= 3200 && this.job <= 3212) {
                              maxhp += Randomizer.rand(30, 36);
                              maxmp += Randomizer.rand(44, 63);
                           } else if (this.job >= 5100 && this.job <= 5112) {
                              maxhp += Randomizer.rand(70, 105);
                              maxmp += Randomizer.rand(10, 20);
                           } else if (this.job >= 6100 && this.job <= 6112) {
                              maxhp += Randomizer.rand(70, 105);
                              maxmp += Randomizer.rand(10, 20);
                           } else if (this.job >= 6500 && this.job <= 6512) {
                              maxhp += Randomizer.rand(56, 67);
                           } else if (this.job >= 10100 && this.job <= 10112) {
                              maxhp += Randomizer.rand(70, 105);
                           } else if (this.job >= 14000 && this.job <= 14212) {
                              maxhp += Randomizer.rand(70, 105);
                           } else if (this.job >= 6400 && this.job <= 6412) {
                              maxhp += Randomizer.rand(70, 105);
                              maxmp += Randomizer.rand(74, 100);
                           } else if ((this.job < 16000 || this.job > 16412) && !GameConstants.isKhali(this.getJob())) {
                              if (GameConstants.isYetiPinkBean(this.job)) {
                                 maxhp += Randomizer.rand(56, 67);
                                 maxmp += Randomizer.rand(44, 63);
                              }
                           } else {
                              maxhp += Randomizer.rand(70, 105);
                              maxmp += Randomizer.rand(74, 100);
                           }
                        } else {
                           maxhp += Randomizer.rand(25, 40);
                           maxmp += Randomizer.rand(60, 100);
                        }
                     } else {
                        maxhp += Randomizer.rand(50, 60);
                        maxmp += Randomizer.rand(37, 50);
                     }
                  } else {
                     maxhp += Randomizer.rand(45, 66);
                     maxmp += Randomizer.rand(35, 43);
                  }
               } else {
                  maxhp += Randomizer.rand(34, 55);
                  maxmp += Randomizer.rand(28, 40);
               }
            } else {
               maxhp += Randomizer.rand(70, 105);
               maxmp += Randomizer.rand(10, 20);
            }
         } else {
            maxhp += Randomizer.rand(52, 56);
         }

         maxmp += this.stats.getTotalInt() / 10;
         this.exp = this.exp - this.getNeededExp();
         this.level++;
         if (DBConfig.isGanglim && this.level == 300) {
            this.level++;
         }

         if (!DBConfig.isGanglim) {
            if (this.level == 200) {
               int[] professionSkillIDs = new int[] { 92000000, 92010000, 92020000, 92030000, 92040000 };

               for (int professionSkill : professionSkillIDs) {
                  if (this.getProfessionLevel(professionSkill) <= 0) {
                     this.changeProfessionLevelExp(professionSkill, 1, 0, (byte) 10);
                  }
               }
            }

            if (this.level == 300) {
               try {
                  MapleCabinet cabinet = this.getCabinet();
                  if (cabinet == null) {
                     this.dropMessage(5,
                           "보관함을 열람하는 과정에서 오류가 발생하여 300레벨 보상을 수령하지 못했습니다. 해당 화면을 운영자에게 문의하시면 아이템이 지급됩니다.");
                  } else {
                     SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
                     String fDate = sdf.format(System.currentTimeMillis());
                     Item item = new Item(3014042, (short) 0, (short) 1, 0);
                     item.setGMLog(CurrentTime.getAllCurrentTime() + "에 300레벨 달성 보상으로 지급된 아이템.");
                     cabinet.addCabinetItem(
                           new MapleCabinetItem(cabinet.getNextIndex(), System.currentTimeMillis() + 604800000L,
                                 "[GM 선물]", fDate + "에 레벨보상으로 지급된 아이템입니다.", item));
                     this.send(CField.maplecabinetResult(8));
                     this.setSaveFlag(this.getSaveFlag() | CharacterSaveFlag.CABINET.getFlag());
                     this.dropMessage(5, "[알림] 300레벨 달성 선물이 도착하였습니다. 메이플 보관함을 통해 수령해주시기 바랍니다.");
                  }
               } catch (Exception var34) {
                  this.dropMessage(5, "보관함을 열람하는 과정에서 오류가 발생하여 300레벨 보상을 수령하지 못했습니다. 해당 화면을 운영자에게 문의하시면 아이템이 지급됩니다.");
                  var34.printStackTrace();
               }
            }
         }

         if (DBConfig.isGanglim) {
            try (Connection con = DBConnection.getConnection()) {
               try (PreparedStatement ps = con
                     .prepareStatement("UPDATE `characters` SET `levelUpTime` = ? WHERE `id` = ?")) {
                  ps.setTimestamp(1, new Timestamp(System.currentTimeMillis()));
                  ps.setInt(2, this.getId());
                  ps.executeUpdate();
               } catch (SQLException var38) {
                  SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss.SSS");
                  Date resultdate = new Date(System.currentTimeMillis());
                  System.err
                        .println("레벨업 타임스탬프 업데이트 오류 발생 캐릭터명 : " + this.getName() + " 시간 : " + sdf.format(resultdate));
                  var38.printStackTrace();
               }
            } catch (SQLException var40) {
               var40.printStackTrace();
            }
         }

         this.accountTotalLevel++;
         if (this.accountTotalLevel >= 500 && !DBConfig.isGanglim) {
            if (this.getGuild() != null && this.getGuildId() == 9999) {
               Center.Guild.leaveGuild(this.getMGC());
               this.send(CField.addPopupSay(9062000, 5000, "계정 내 통합레벨이 500을 넘어 계정 내 모든 캐릭터가 #b초보자A#k길드에서 자동으로 탈퇴되었습니다.",
                     ""));
            }

            if (this.getGuild() != null && this.getGuildId() == 10000) {
               Center.Guild.leaveGuild(this.getMGC());
               this.send(CField.addPopupSay(9062000, 5000, "계정 내 통합레벨이 500을 넘어 계정 내 모든 캐릭터가 #b초보자B#k길드에서 자동으로 탈퇴되었습니다.",
                     ""));
            }

            DBConnection db = new DBConnection();

            try (Connection con = DBConnection.getConnection()) {
               PreparedStatement ps = con
                     .prepareStatement("SELECT `guildid`, `id` FROM characters WHERE `accountid` = ?");
               ps.setInt(1, this.getAccountID());
               ResultSet rs = ps.executeQuery();

               while (rs.next()) {
                  int guildID = rs.getInt("guildid");
                  int playerID = rs.getInt("id");
                  if (guildID == 9999 || guildID == 10000) {
                     GuildCharacter mgc = new GuildCharacter(playerID, (short) 1, "", (byte) 0, 100, (byte) 0, 0,
                           (byte) 0, guildID, 0L, 0, 0L, 0L, false);
                     Center.Guild.leaveGuild(mgc);
                  }
               }

               rs.close();
               ps.close();
            } catch (SQLException var36) {
               System.out.println(var36.toString());
            }
         }

         if (this.level >= 220 && !DBConfig.isGanglim) {
            if (this.getGuild() != null && this.getGuildId() == 9999) {
               Center.Guild.leaveGuild(this.getMGC());
               this.send(CField.addPopupSay(9062000, 5000, "캐릭터의 레벨이 220을 넘어 #b초보자A#k길드에서 자동으로 탈퇴되었습니다.", ""));
            }

            if (this.getGuild() != null && this.getGuildId() == 10000) {
               Center.Guild.leaveGuild(this.getMGC());
               this.send(CField.addPopupSay(9062000, 5000, "캐릭터의 레벨이 220을 넘어 #b초보자B#k길드에서 자동으로 탈퇴되었습니다.", ""));
            }
         }

         UnmodifiableIterator var48 = QuestExConstants.bossEnterQuests.keySet().iterator();

         while (var48.hasNext()) {
            Integer key = (Integer) var48.next();
            if (this.level >= (Integer) QuestExConstants.bossEnterQuests.get(key) && this.getQuestStatus(key) != 2) {
               this.forceCompleteQuest(key);
            }
         }

         if (this.level == 10 & !DBConfig.isGanglim) {
            this.dropMessage(5, "[알림] 적정레벨 장비지원상자가 지급되었습니다. 소비창을 확인해주세요.");
            this.gainItem(2430443, 1, false, -1L, "적정레벨 장비상자 아이템");
         }

         if (this.level >= 30 && GameConstants.isYetiPinkBean(this.getJob())) {
            for (Integer sList : SkillFactory.getSkillsByJob(this.getJob())) {
               Skill skill = SkillFactory.getSkill(sList);
               if (skill.getReqLev() == this.level && this.getSkillLevel(skill.getId()) < 1) {
                  this.changeSkillLevel(skill, 1, 1);
               }
            }

            if (this.getQuestStatus(100566) == 1 && this.getOneInfoQuestInteger(100565, "questNum") != 100565) {
               this.updateOneInfo(100565, "questNum", "100565");
            }
         }

         if (DBConfig.isGanglim && this.level == 50 && DBConfig.isGanglim) {
            int[] questList = new int[] { 6500, 12396 };

            for (int i : questList) {
               if (this.getQuestStatus(i) != 2) {
                  this.forceCompleteQuest(i);
               }
            }

            for (int ix = 0; ix < 3; ix++) {
               CharacterPotentialHolder isvh = new CharacterPotentialHolder(70000015, (byte) (1 + ix * 2), (byte) 40,
                     (byte) 0, false);
               this.innerSkills.add(isvh);
               this.setSaveFlag(this.getSaveFlag() | CharacterSaveFlag.INNER_SKILL.getFlag());
               this.getClient()
                     .getSession()
                     .writeAndFlush(CField.updateInnerPotential((byte) (ix + 1), isvh.getSkillId(),
                           isvh.getSkillLevel(), isvh.getRank()));
            }
         }

         this.AutoJob();
         if (this.level >= 200) {
            if (this.getMap() instanceof Field_YutaGolden) {
               this.changeMap(ServerConstants.TownMap);
               this.dropMessage(5, "[알림] 200레벨이 달성되어 황금논밭에서 퇴장됩니다.");
            }

            if (!DBConfig.isGanglim && this.getOneInfoQuestInteger(1234566, "get_symbol") == 0
                  && this.getOneInfoQuestInteger(1234567, "get_symbol") == 0) {
               MapleItemInformationProvider ii = MapleItemInformationProvider.getInstance();
               Item item = new Item(2630437, (short) 0, (short) 100, 0, MapleInventoryIdentifier.getInstance());
               MapleCabinet cabinet = this.getCabinet();
               if (cabinet != null) {
                  SimpleDateFormat sdf = new SimpleDateFormat("yyyy년 MM월 dd일 HH시 mm분");
                  Calendar CAL = new GregorianCalendar(Locale.KOREA);
                  String fDate = sdf.format(CAL.getTime());
                  cabinet.addCabinetItem(
                        new MapleCabinetItem(cabinet.getNextIndex(), System.currentTimeMillis() + 259200000L,
                              "[200레벨 보상]", fDate + "에 지급된 보상입니다.", item));
                  this.send(CField.maplecabinetResult(8));
                  this.setSaveFlag(this.getSaveFlag() | CharacterSaveFlag.CABINET.getFlag());
                  this.dropMessage(5, "[알림] 200레벨 보상 선택 아케인심볼 교환권 100개가 지급되었습니다. [메이플 보관함]을 확인해주세요.");
                  this.dropMessage(1, "200레벨 보상 선택 아케인심볼 교환권 100개가 지급되었습니다.\r\n[메이플 보관함]을 확인해주세요.");
                  this.updateOneInfo(1234566, "get_symbol", "1");
                  this.updateOneInfo(1234567, "get_symbol", "1");
               }
            }
         }

         short maxLv = (short) (DBConfig.isGanglim ? 999 : 300);
         if (this.level > maxLv) {
            this.level = maxLv;
         }

         this.checkLevelBuff();
         if (GameConstants.isZero(this.getJob()) && this.level % 5 == 0) {
            this.maxSkillByAutoJob();
         }

         if (this.level == 275 && !this.isGM()) {
            if (!DBConfig.isGanglim) {
               StringBuilder sb = new StringBuilder("[축하] ");
               Item medal = this.getInventory(MapleInventoryType.EQUIPPED).getItem((short) -46);
               if (medal != null) {
                  sb.append("<");
                  sb.append(MapleItemInformationProvider.getInstance().getName(medal.getItemId()));
                  sb.append("> ");
               }

               sb.append(this.getName());
               sb.append(" 님이 레벨 " + this.level + "을(를) 달성했습니다! 모두 축하해 주세요.");
               Center.Broadcast.broadcastMessage(CWvsContext.serverNotice(6, sb.toString()));
            }

            if (this.getOneInfoQuestInteger(1234566, "check_honor_chair") == 0 && !DBConfig.isGanglim) {
               MapleItemInformationProvider ii = MapleItemInformationProvider.getInstance();
               Item item = new Item(3014028, (short) 0, (short) 1, 0, MapleInventoryIdentifier.getInstance());
               MapleCabinet cabinet = this.getCabinet();
               if (cabinet != null) {
                  SimpleDateFormat sdf = new SimpleDateFormat("yyyy년 MM월 dd일 HH시 mm분");
                  Calendar CAL = new GregorianCalendar(Locale.KOREA);
                  String fDate = sdf.format(CAL.getTime());
                  cabinet.addCabinetItem(
                        new MapleCabinetItem(cabinet.getNextIndex(), System.currentTimeMillis() + 259200000L,
                              "[275레벨 보상]", fDate + "에 지급된 보상입니다.", item));
                  this.send(CField.maplecabinetResult(8));
                  this.setSaveFlag(this.getSaveFlag() | CharacterSaveFlag.CABINET.getFlag());
                  if (DBConfig.isGanglim) {
                     this.send(CField.chatMsg(1, "찬란한 명예의 상징이 지급되었습니다. [메이플 보관함]을 통해 수령 가능합니다."));
                     this.dropMessage(1, "찬란한 명예의 상징이 지급되었습니다.\r\n[메이플 보관함]을 통해 수령 가능합니다.");
                  } else {
                     this.dropMessage(5, "[알림] 275레벨 보상 찬란한 명예의 상징이 지급되었습니다. [메이플 보관함]을 확인해주세요.");
                     this.dropMessage(1, "275레벨 보상 찬란한 명예의 상징이 지급되었습니다.\r\n[메이플 보관함]을 확인해주세요.");
                  }

                  this.updateOneInfo(1234566, "check_honor_chair", "1");
               }
            }
         } else if (this.level == 300 && !this.isGM() && !DBConfig.isGanglim) {
            StringBuilder sb = new StringBuilder("[축하] ");
            Item medal = this.getInventory(MapleInventoryType.EQUIPPED).getItem((short) -46);
            if (medal != null) {
               sb.append("<");
               sb.append(MapleItemInformationProvider.getInstance().getName(medal.getItemId()));
               sb.append("> ");
            }

            sb.append(this.getName());
            sb.append(" 님이 레벨 " + this.level + "을(를) 달성했습니다! 모두 축하해 주세요.");
            Center.Broadcast.broadcastMessage(CWvsContext.serverNotice(6, sb.toString()));
         }

         maxhp = Math.min(500000L, Math.abs(maxhp));
         maxmp = Math.min(500000L, Math.abs(maxmp));
         if (GameConstants.isDemonSlayer(this.job)) {
            maxmp = 10L;
         } else if (GameConstants.isZero(this.job)) {
            maxmp = 100L;
            if (!this.getZeroInfo().isBeta() && this.getSkillLevel(101100203) > 0) {
               SecondaryStatEffect reinForceBody = SkillFactory.getSkill(101100203)
                     .getEffect(this.getSkillLevel(101100203));
               maxmp += maxmp * reinForceBody.getMDF() / 100L;
            }
         }

         Map<MapleStat, Long> statup = new EnumMap<>(MapleStat.class);
         statup.put(MapleStat.MAXHP, maxhp);
         statup.put(MapleStat.MAXMP, maxmp);
         statup.put(MapleStat.HP, maxhp);
         statup.put(MapleStat.MP, GameConstants.isDemonSlayer(this.job) ? GameConstants.getMPByJob(this) : maxmp);
         statup.put(MapleStat.EXP, this.exp);
         statup.put(MapleStat.LEVEL, (long) this.level);
         if (LoginInformationProvider.isExtendedSpJob(this.job)) {
            if (GameConstants.isZero(this.job) && this.level >= 100) {
               this.remainingSp[0] = this.remainingSp[0] + 3;
               this.remainingSp[1] = this.remainingSp[1] + 3;
            } else if (this.level >= 11 && this.level < 100) {
               this.remainingSp[GameConstants.getSkillBook(this.job, this.level)] += 3;
            } else if (this.level >= 100 && this.level <= 140) {
               if (this.level <= 110) {
                  this.remainingSp[GameConstants.getSkillBook(this.job, this.level)] += 3;
                  if (this.level % 10 == 0 || this.level % 10 == 3 || this.level % 10 == 6 || this.level % 10 == 9) {
                     this.remainingSp[GameConstants.getSkillBook(this.job, this.level)] += 3;
                  }
               } else if (this.level > 110 && this.level <= 120) {
                  this.remainingSp[GameConstants.getSkillBook(this.job, this.level)] += 4;
                  if (this.level % 10 == 0 || this.level % 10 == 3 || this.level % 10 == 6 || this.level % 10 == 9) {
                     this.remainingSp[GameConstants.getSkillBook(this.job, this.level)] += 4;
                  }
               } else if (this.level > 120 && this.level <= 130) {
                  this.remainingSp[GameConstants.getSkillBook(this.job, this.level)] += 5;
                  if (this.level % 10 == 0 || this.level % 10 == 3 || this.level % 10 == 6 || this.level % 10 == 9) {
                     this.remainingSp[GameConstants.getSkillBook(this.job, this.level)] += 5;
                  }
               } else if (this.level > 130 && this.level < 140) {
                  this.remainingSp[GameConstants.getSkillBook(this.job, this.level)] += 6;
                  if (this.level % 10 == 0 || this.level % 10 == 3 || this.level % 10 == 6 || this.level % 10 == 9) {
                     this.remainingSp[GameConstants.getSkillBook(this.job, this.level)] += 6;
                  }
               } else if (this.level == 140) {
                  this.remainingSp[GameConstants.getSkillBook(this.job, this.level)] += 10;
               }
            }
         } else if (this.level >= 11 && this.level < 100) {
            this.remainingSp[GameConstants.getSkillBook(this.job, 0)] += 3;
         } else if (this.level >= 100 && this.level <= 140) {
            if (this.level <= 110) {
               this.remainingSp[GameConstants.getSkillBook(this.job, 0)] += 3;
               if (this.level % 10 == 0 || this.level % 10 == 3 || this.level % 10 == 6 || this.level % 10 == 9) {
                  this.remainingSp[GameConstants.getSkillBook(this.job, 0)] += 3;
               }
            } else if (this.level > 110 && this.level <= 120) {
               this.remainingSp[GameConstants.getSkillBook(this.job, 0)] += 4;
               if (this.level % 10 == 0 || this.level % 10 == 3 || this.level % 10 == 6 || this.level % 10 == 9) {
                  this.remainingSp[GameConstants.getSkillBook(this.job, 0)] += 4;
               }
            } else if (this.level > 120 && this.level <= 130) {
               this.remainingSp[GameConstants.getSkillBook(this.job, 0)] += 5;
               if (this.level % 10 == 0 || this.level % 10 == 3 || this.level % 10 == 6 || this.level % 10 == 9) {
                  this.remainingSp[GameConstants.getSkillBook(this.job, 0)] += 5;
               }
            } else if (this.level > 130 && this.level < 140) {
               this.remainingSp[GameConstants.getSkillBook(this.job, 0)] += 6;
               if (this.level % 10 == 0 || this.level % 10 == 3 || this.level % 10 == 6 || this.level % 10 == 9) {
                  this.remainingSp[GameConstants.getSkillBook(this.job, 0)] += 6;
               }
            } else if (this.level == 140) {
               this.remainingSp[GameConstants.getSkillBook(this.job, 0)] += 10;
            }
         }

         if (this.level >= 200 && !GameConstants.isYetiPinkBean(this.getJob())) {
            MapleQuest quest = MapleQuest.getInstance(1465);
            MapleQuestStatus qs = this.getQuest(quest);
            if (quest != null && qs.getStatus() != 2) {
               MapleQuest.getInstance(1465).forceComplete(this, 2003);
               this.giveDefaultVMatrixSkill();
               this.send(CField.makeEffectScreen("Effect/5skill.img/screen"));
               this.send(CField.playSE("Sound/SoundEff.img/5thJob"));
            }

            int[] quests = new int[] { 1478 };

            for (int a : quests) {
               quest = MapleQuest.getInstance(a);
               qs = this.getQuest(a);
               if (quest != null && qs.getStatus() != 2) {
                  MapleQuest.getInstance(a).forceComplete(this, 2003);
               }
            }

            if (GameConstants.isEunWol(this.getJob())) {
               quest = MapleQuest.getInstance(1542);
               qs = this.getQuest(quest);
               if (quest != null && qs.getStatus() != 2) {
                  MapleQuest.getInstance(1542).forceComplete(this, 2003);
                  this.send(CWvsContext.getScriptProgressMessage("[정령결속 극대화]를 통해 그리운 랑의 모습을 구현할 수 있게 되었습니다."));
               }
            }
         }

         if (this.level >= 260) {
            MapleQuest questx = MapleQuest.getInstance(1484);
            MapleQuestStatus qsx = this.getQuest(questx);
            if (questx != null && qsx.getStatus() != 2) {
               MapleQuest.getInstance(1484).forceComplete(this, 2003);
            }
         }

         this.stepUpCheck(this.level);
         AchievementFactory.checkUserLvUp(this);
         if (GameConstants.isZero(this.job)) {
            if (this.level == 120 || this.level == 140 || this.level == 160 || this.level == 180) {
               this.linkSkill.updateOwnLinkSkill(this);
            }
         } else if (this.level == 70 || this.level == 120) {
            this.linkSkill.updateOwnLinkSkill(this);
         }

         if (this.level == 100 && GameConstants.isDemonSlayer(this.getJob())) {
            this.removeAndChangeEquip(1099004, (short) -10);
         }

         if (this.level == 100 && GameConstants.isDemonAvenger(this.getJob())) {
            this.removeAndChangeEquip(1099004, (short) -10);
         }

         if (this.level == 110 && GameConstants.isZero(this.getJob())) {
            MapleQuest questx = MapleQuest.getInstance(40905);
            MapleQuestStatus qsx = this.getQuest(questx);
            if (questx != null && qsx.getStatus() != 2) {
               MapleQuest.getInstance(40905).forceComplete(this, 2003);
            }
         }

         if (this.level >= 160) {
            MapleQuest questx = MapleQuest.getInstance(3521);
            MapleQuestStatus qsx = this.getQuest(questx);
            if (questx != null && qsx.getStatus() != 2) {
               MapleQuest.getInstance(3521).forceComplete(this, 2003);
            }
         }

         if (this.level >= 190) {
            if (this.getOneInfo(39160, "start") == null) {
               this.updateOneInfo(39160, "start", "1");
               this.updateOneInfo(39165, "start", "1");
            }

            for (int storyQuest : StoryQuests.Haven) {
               MapleQuest questx = MapleQuest.getInstance(storyQuest);
               MapleQuestStatus qsx = this.getQuest(questx);
               if (questx != null && qsx.getStatus() != 2) {
                  MapleQuest.getInstance(storyQuest).forceComplete(this, 2003);
               }
            }

            for (int storyQuestx : StoryQuests.DarkWorldTree) {
               MapleQuest questx = MapleQuest.getInstance(storyQuestx);
               MapleQuestStatus qsx = this.getQuest(questx);
               if (questx != null && qsx.getStatus() != 2) {
                  MapleQuest.getInstance(storyQuestx).forceComplete(this, 2003);
               }
            }
         }

         if (this.level >= 260) {
            int questId = QuestExConstants.SixthJobQuest.getQuestID();
            MapleQuest questx = MapleQuest.getInstance(questId);
            MapleQuestStatus qsx = this.getQuest(questx);
            if (questx != null && qsx.getStatus() != 2) {
               MapleQuest.getInstance(questId).forceComplete(this, 2003);
            }

            if (this.hexaCore == null) {
               this.hexaCore = new HexaCore(this.getId());
            }

            for (int coreId : HexaMatrixConstants.getAllJobCores(this.getJob())) {
               if (this.hexaCore.getSkillCoreLevel(coreId) == 0) {
                  this.hexaCore.setSkillCoreLevel(this, coreId, 1);
               }
            }

            refresh = true;
         }

         if (this.level >= 200) {
            MapleQuest questxx = MapleQuest.getInstance(1466);
            MapleQuestStatus qsxx = this.getQuest(questxx);
            if (questxx != null && qsxx.getStatus() != 2) {
               MapleQuest.getInstance(1466).forceComplete(this, 2003);
            }

            if (this.level >= 200) {
               for (int arcaneStoryQuest : ArcaneStoryQuests.VanishingJourney) {
                  questxx = MapleQuest.getInstance(arcaneStoryQuest);
                  qsxx = this.getQuest(questxx);
                  if (questxx != null && qsxx.getStatus() != 2) {
                     MapleQuest.getInstance(arcaneStoryQuest).forceComplete(this, 2003);
                  }
               }
            }

            if (this.level >= 205) {
               for (int arcaneStoryQuestx : ArcaneStoryQuests.ReverseCity) {
                  questxx = MapleQuest.getInstance(arcaneStoryQuestx);
                  qsxx = this.getQuest(questxx);
                  if (questxx != null && qsxx.getStatus() != 2) {
                     MapleQuest.getInstance(arcaneStoryQuestx).forceComplete(this, 2003);
                  }
               }
            }

            if (this.level >= 210) {
               for (int arcaneStoryQuestxx : ArcaneStoryQuests.ChewChew) {
                  questxx = MapleQuest.getInstance(arcaneStoryQuestxx);
                  qsxx = this.getQuest(questxx);
                  if (questxx != null && qsxx.getStatus() != 2) {
                     MapleQuest.getInstance(arcaneStoryQuestxx).forceComplete(this, 2003);
                  }
               }
            }

            if (this.level >= 215) {
               for (int arcaneStoryQuestxxx : ArcaneStoryQuests.YumYumIsland) {
                  questxx = MapleQuest.getInstance(arcaneStoryQuestxxx);
                  qsxx = this.getQuest(questxx);
                  if (questxx != null && qsxx.getStatus() != 2) {
                     MapleQuest.getInstance(arcaneStoryQuestxxx).forceComplete(this, 2003);
                  }
               }
            }

            if (this.level >= 220) {
               for (int arcaneStoryQuestxxxx : ArcaneStoryQuests.Lacheln) {
                  questxx = MapleQuest.getInstance(arcaneStoryQuestxxxx);
                  qsxx = this.getQuest(questxx);
                  if (questxx != null && qsxx.getStatus() != 2) {
                     MapleQuest.getInstance(arcaneStoryQuestxxxx).forceComplete(this, 2003);
                  }
               }
            }

            if (this.level >= 225) {
               for (int arcaneStoryQuestxxxxx : ArcaneStoryQuests.Arcana) {
                  questxx = MapleQuest.getInstance(arcaneStoryQuestxxxxx);
                  qsxx = this.getQuest(questxx);
                  if (questxx != null && qsxx.getStatus() != 2) {
                     MapleQuest.getInstance(arcaneStoryQuestxxxxx).forceComplete(this, 2003);
                  }
               }
            }

            if (this.level >= 230) {
               if (!this.getOneInfoQuest(34271, "32").equals("h1")) {
                  this.updateOneInfo(34271, "32", "h1");
               }

               for (int arcaneStoryQuestxxxxxx : ArcaneStoryQuests.Morass) {
                  questxx = MapleQuest.getInstance(arcaneStoryQuestxxxxxx);
                  qsxx = this.getQuest(questxx);
                  if (questxx != null && qsxx.getStatus() != 2) {
                     MapleQuest.getInstance(arcaneStoryQuestxxxxxx).forceComplete(this, 2003);
                  }
               }
            }

            if (this.level >= 235) {
               for (int arcaneStoryQuestxxxxxxx : ArcaneStoryQuests.Esfera) {
                  questxx = MapleQuest.getInstance(arcaneStoryQuestxxxxxxx);
                  qsxx = this.getQuest(questxx);
                  if (questxx != null && qsxx.getStatus() != 2) {
                     MapleQuest.getInstance(arcaneStoryQuestxxxxxxx).forceComplete(this, 2003);
                  }
               }
            }

            if (this.level >= 240) {
               for (int arcaneStoryQuestxxxxxxxx : ArcaneStoryQuests.Sellas) {
                  questxx = MapleQuest.getInstance(arcaneStoryQuestxxxxxxxx);
                  qsxx = this.getQuest(questxx);
                  if (questxx != null && qsxx.getStatus() != 2) {
                     MapleQuest.getInstance(arcaneStoryQuestxxxxxxxx).forceComplete(this, 2003);
                  }
               }
            }

            if (this.level >= 245) {
               for (int arcaneStoryQuestxxxxxxxxx : ArcaneStoryQuests.MoonBridge) {
                  questxx = MapleQuest.getInstance(arcaneStoryQuestxxxxxxxxx);
                  qsxx = this.getQuest(questxx);
                  if (questxx != null && qsxx.getStatus() != 2) {
                     MapleQuest.getInstance(arcaneStoryQuestxxxxxxxxx).forceComplete(this, 2003);
                  }
               }
            }

            if (this.level >= 250) {
               for (int arcaneStoryQuestxxxxxxxxxx : ArcaneStoryQuests.LabyrinthofSuffering) {
                  questxx = MapleQuest.getInstance(arcaneStoryQuestxxxxxxxxxx);
                  qsxx = this.getQuest(questxx);
                  if (questxx != null && qsxx.getStatus() != 2) {
                     MapleQuest.getInstance(arcaneStoryQuestxxxxxxxxxx).forceComplete(this, 2003);
                  }
               }
            }

            if (this.level >= 255) {
               for (int arcaneStoryQuestxxxxxxxxxxx : ArcaneStoryQuests.Limina) {
                  questxx = MapleQuest.getInstance(arcaneStoryQuestxxxxxxxxxxx);
                  qsxx = this.getQuest(questxx);
                  if (questxx != null && qsxx.getStatus() != 2) {
                     MapleQuest.getInstance(arcaneStoryQuestxxxxxxxxxxx).forceComplete(this, 2003);
                  }
               }

               for (int arcaneStoryQuestxxxxxxxxxxxx : ArcaneStoryQuests.TheDayAfter) {
                  questxx = MapleQuest.getInstance(arcaneStoryQuestxxxxxxxxxxxx);
                  qsxx = this.getQuest(questxx);
                  if (questxx != null && qsxx.getStatus() != 2) {
                     MapleQuest.getInstance(arcaneStoryQuestxxxxxxxxxxxx).forceComplete(this, 2003);
                  }
               }
            }

            if (this.level >= 260) {
               for (int arcaneStoryQuestxxxxxxxxxxxxx : ArcaneStoryQuests.Borderless) {
                  questxx = MapleQuest.getInstance(arcaneStoryQuestxxxxxxxxxxxxx);
                  qsxx = this.getQuest(questxx);
                  if (questxx != null && qsxx.getStatus() != 2) {
                     MapleQuest.getInstance(arcaneStoryQuestxxxxxxxxxxxxx).forceComplete(this, 2003);
                  }
               }

               for (int arcaneStoryQuestxxxxxxxxxxxxxx : ArcaneStoryQuests.Sernium1) {
                  questxx = MapleQuest.getInstance(arcaneStoryQuestxxxxxxxxxxxxxx);
                  qsxx = this.getQuest(questxx);
                  if (questxx != null && qsxx.getStatus() != 2) {
                     MapleQuest.getInstance(arcaneStoryQuestxxxxxxxxxxxxxx).forceComplete(this, 2003);
                  }
               }
            }

            if (this.level >= 260) {
               for (int arcaneStoryQuestxxxxxxxxxxxxxxx : ArcaneStoryQuests.Sernium2) {
                  questxx = MapleQuest.getInstance(arcaneStoryQuestxxxxxxxxxxxxxxx);
                  qsxx = this.getQuest(questxx);
                  if (questxx != null && qsxx.getStatus() != 2) {
                     MapleQuest.getInstance(arcaneStoryQuestxxxxxxxxxxxxxxx).forceComplete(this, 2003);
                  }
               }
            }

            if (this.level >= 265) {
               for (int arcaneStoryQuestxxxxxxxxxxxxxxxx : ArcaneStoryQuests.HotelArcs) {
                  questxx = MapleQuest.getInstance(arcaneStoryQuestxxxxxxxxxxxxxxxx);
                  qsxx = this.getQuest(questxx);
                  if (questxx != null && qsxx.getStatus() != 2) {
                     MapleQuest.getInstance(arcaneStoryQuestxxxxxxxxxxxxxxxx).forceComplete(this, 2003);
                  }
               }
            }

            if (this.level >= 270) {
               for (int arcaneStoryQuestxxxxxxxxxxxxxxxxx : ArcaneStoryQuests.Audium) {
                  questxx = MapleQuest.getInstance(arcaneStoryQuestxxxxxxxxxxxxxxxxx);
                  qsxx = this.getQuest(questxx);
                  if (questxx != null && qsxx.getStatus() != 2) {
                     MapleQuest.getInstance(arcaneStoryQuestxxxxxxxxxxxxxxxxx).forceComplete(this, 2003);
                  }
               }
            }

            if (this.level >= 275) {
               for (int arcaneStoryQuestxxxxxxxxxxxxxxxxxx : ArcaneStoryQuests.Dowonkyung) {
                  questxx = MapleQuest.getInstance(arcaneStoryQuestxxxxxxxxxxxxxxxxxx);
                  qsxx = this.getQuest(questxx);
                  if (questxx != null && qsxx.getStatus() != 2) {
                     MapleQuest.getInstance(arcaneStoryQuestxxxxxxxxxxxxxxxxxx).forceComplete(this, 2003);
                  }
               }
            }

            if (this.level >= 280) {
               for (int arcaneStoryQuestxxxxxxxxxxxxxxxxxxx : ArcaneStoryQuests.Arteria) {
                  questxx = MapleQuest.getInstance(arcaneStoryQuestxxxxxxxxxxxxxxxxxxx);
                  qsxx = this.getQuest(questxx);
                  if (questxx != null && qsxx.getStatus() != 2) {
                     MapleQuest.getInstance(arcaneStoryQuestxxxxxxxxxxxxxxxxxxx).forceComplete(this, 2003);
                  }
               }
            }
         }

         if (GameConstants.isAdele(this.getJob()) && this.level >= 200 && this.getTotalSkillLevel(150020006) == 0) {
            this.changeSkillLevel(150020006, 10, 10);
         }

         statup.put(MapleStat.AVAILABLEAP, (long) this.remainingAp);
         statup.put(MapleStat.AVAILABLESP, (long) this.remainingSp[GameConstants.getSkillBook(this.job, this.level)]);
         this.stats.setInfo(maxhp, maxmp, this.getStat().getCurrentMaxHp(this), this.getStat().getCurrentMaxMp(this));
         this.client.getSession().writeAndFlush(CWvsContext.updatePlayerStats(statup, this));
         NormalEffect e = new NormalEffect(this.getId(), EffectHeader.LevelUp);
         this.map.broadcastMessage(this, e.encodeForRemote(), false);
         this.silentPartyUpdate();
         this.guildUpdate();
         if (GameConstants.isEvan(this.job)) {
            if (this.level == 10) {
               this.changeJob(2210);
            } else if (this.level == 30) {
               this.changeJob(2211);
            } else if (this.level == 60) {
               this.changeJob(2214);
            } else if (this.level == 100) {
               this.changeJob(2217);
            }
         }

         this.stats.recalcLocalStats(this, false);
         this.addMPHP(this.getStat().getCurrentMaxHp(this), this.getStat().getCurrentMaxMp(this), true);
      } finally {
         this.levelUpLock.writeLock().unlock();
         if (refresh) {
            try {
               this.send(CWvsContext.onCharacterModified(this, -1L));
               HyperHandler.updateSkills(this, 0);
            } catch (Exception var30) {
            }
         }
      }
   }

   private void stepUpCheck(int nlevel) {
      if (nlevel >= 40 && this.isQuestStarted(501526)) {
         if (this.getOneInfoQuestInteger(501526, "value") < 1) {
            this.updateOneInfo(501526, "value", "1");
         }

         if (this.getOneInfoQuestInteger(501524, "state") < 2) {
            this.updateOneInfo(501524, "state", "2");
         }
      }

      if (nlevel >= 45 && this.isQuestStarted(501527)) {
         if (this.getOneInfoQuestInteger(501527, "value") < 1) {
            this.updateOneInfo(501527, "value", "1");
         }

         if (this.getOneInfoQuestInteger(501524, "state") < 2) {
            this.updateOneInfo(501524, "state", "2");
         }
      }

      if (nlevel >= 55 && this.isQuestStarted(501529)) {
         if (this.getOneInfoQuestInteger(501529, "value") < 1) {
            this.updateOneInfo(501529, "value", "1");
         }

         if (this.getOneInfoQuestInteger(501524, "state") < 2) {
            this.updateOneInfo(501524, "state", "2");
         }
      }

      if (nlevel >= 60 && this.isQuestStarted(501530)) {
         if (this.getOneInfoQuestInteger(501530, "value") < 1) {
            this.updateOneInfo(501530, "value", "1");
         }

         if (this.getOneInfoQuestInteger(501524, "state") < 2) {
            this.updateOneInfo(501524, "state", "2");
         }
      }

      if (nlevel >= 70 && this.isQuestStarted(501532)) {
         if (this.getOneInfoQuestInteger(501532, "value") < 1) {
            this.updateOneInfo(501532, "value", "1");
         }

         if (this.getOneInfoQuestInteger(501524, "state") < 2) {
            this.updateOneInfo(501524, "state", "2");
         }
      }

      if (nlevel >= 90 && this.isQuestStarted(501535)) {
         if (this.getOneInfoQuestInteger(501535, "value") < 1) {
            this.updateOneInfo(501535, "value", "1");
         }

         if (this.getOneInfoQuestInteger(501524, "state") < 2) {
            this.updateOneInfo(501524, "state", "2");
         }
      }

      if (nlevel >= 100 && this.isQuestStarted(501536)) {
         if (this.getOneInfoQuestInteger(501536, "value") < 1) {
            this.updateOneInfo(501536, "value", "1");
         }

         if (this.getOneInfoQuestInteger(501524, "state") < 2) {
            this.updateOneInfo(501524, "state", "2");
         }
      }

      if (nlevel >= 101 && this.isQuestStarted(501537)) {
         if (this.getOneInfoQuestInteger(501537, "value") < 1) {
            this.updateOneInfo(501537, "value", "1");
         }

         if (this.getOneInfoQuestInteger(501524, "state") < 2) {
            this.updateOneInfo(501524, "state", "2");
         }
      }

      if (nlevel >= 107 && this.isQuestStarted(501539)) {
         if (this.getOneInfoQuestInteger(501539, "value") < 1) {
            this.updateOneInfo(501539, "value", "1");
         }

         if (this.getOneInfoQuestInteger(501524, "state") < 2) {
            this.updateOneInfo(501524, "state", "2");
         }
      }

      if (nlevel >= 110 && this.isQuestStarted(501540)) {
         if (this.getOneInfoQuestInteger(501540, "value") < 1) {
            this.updateOneInfo(501540, "value", "1");
         }

         if (this.getOneInfoQuestInteger(501524, "state") < 2) {
            this.updateOneInfo(501524, "state", "2");
         }
      }

      if (nlevel >= 130 && this.isQuestStarted(501542)) {
         if (this.getOneInfoQuestInteger(501542, "value") < 1) {
            this.updateOneInfo(501542, "value", "1");
         }

         if (this.getOneInfoQuestInteger(501524, "state") < 2) {
            this.updateOneInfo(501524, "state", "2");
         }
      }

      if (nlevel >= 190 && this.isQuestStarted(501549)) {
         if (this.getOneInfoQuestInteger(501549, "value") < 1) {
            this.updateOneInfo(501549, "value", "1");
         }

         if (this.getOneInfoQuestInteger(501524, "state") < 2) {
            this.updateOneInfo(501524, "state", "2");
         }
      }

      if (nlevel >= 200 && this.isQuestStarted(501550)) {
         if (this.getOneInfoQuestInteger(501550, "value") < 1) {
            this.updateOneInfo(501550, "value", "1");
         }

         if (this.getOneInfoQuestInteger(501524, "state") < 2) {
            this.updateOneInfo(501524, "state", "2");
         }
      }
   }

   public boolean AutoJob() {
      if (this.getOneInfoQuest(122870, "AutoJob") != null) {
         if (this.level >= 20) {
            String var1 = this.getOneInfoQuest(122870, "AutoJob");
            byte var2 = -1;
            switch (var1.hashCode()) {
               case 51601:
                  if (var1.equals("430")) {
                     var2 = 0;
                  }
               default:
                  switch (var2) {
                     case 0:
                        if (this.getJob() < 430) {
                           this.getClient().getSession()
                                 .writeAndFlush(CWvsContext.getScriptProgressMessage("[암흑을 기억하는자] 세미듀어러로 전직하였습니다."));
                           this.changeJob(430);
                           return true;
                        }
                  }
            }
         }

         if (this.level >= 30) {
            String var3 = this.getOneInfoQuest(122870, "AutoJob");
            switch (var3) {
               case "15410":
                  if (this.getJob() < 15410) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[칼리] 칼리로 전직하였습니다."));
                     this.changeJob(15410);
                     return true;
                  }
                  break;
               case "110":
                  if (this.getJob() < 110) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[양손검술의 기사] 파이터로 전직하였습니다."));
                     this.changeJob(110);
                     return true;
                  }
                  break;
               case "120":
                  if (this.getJob() < 120) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[한손검술의 기사] 페이지로 전직하였습니다."));
                     this.changeJob(120);
                     return true;
                  }
                  break;
               case "130":
                  if (this.getJob() < 130) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[창술의 기사] 스피어맨로 전직하였습니다."));
                     this.changeJob(130);
                     return true;
                  }
                  break;
               case "210":
                  if (this.getJob() < 210) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[불*독] 위자드로 전직하였습니다."));
                     this.changeJob(210);
                     return true;
                  }
                  break;
               case "220":
                  if (this.getJob() < 220) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[얼음*번개] 위자드로 전직하였습니다."));
                     this.changeJob(220);
                     return true;
                  }
                  break;
               case "230":
                  if (this.getJob() < 230) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[힐*버프] 클레릭으로 전직하였습니다."));
                     this.changeJob(230);
                     return true;
                  }
                  break;
               case "310":
                  if (this.getJob() < 310) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[사격수] 헌터로 전직하였습니다."));
                     this.changeJob(310);
                     return true;
                  }
                  break;
               case "320":
                  if (this.getJob() < 320) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[명사수] 사수로 전직하였습니다."));
                     this.changeJob(320);
                     return true;
                  }
                  break;
               case "330":
                  if (this.getJob() < 330) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[저주와 고대의 힘] 에인션트 아처로 전직하였습니다."));
                     this.changeJob(330);
                     return true;
                  }
                  break;
               case "410":
                  if (this.getJob() < 410) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[표창 암살 입문기] 어쌔신로 전직하였습니다."));
                     this.changeJob(410);
                     return true;
                  }
                  break;
               case "420":
                  if (this.getJob() < 420) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[단도 암살 입문기] 시프로 전직하였습니다."));
                     this.changeJob(420);
                     return true;
                  }
                  break;
               case "510":
                  if (this.getJob() < 510) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[너클 입문기] 인파이터로 전직하였습니다."));
                     this.changeJob(510);
                     return true;
                  }
                  break;
               case "520":
                  if (this.getJob() < 520) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[건 입문기] 건슬링거로 전직하였습니다."));
                     this.changeJob(520);
                     return true;
                  }
                  break;
               case "430":
                  if (this.getJob() < 431) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[암흑 속의 과거] 듀어러로 전직하였습니다."));
                     this.changeJob(431);
                     return true;
                  }
                  break;
               case "530":
                  if (this.getJob() < 530) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[캐논 입문기] 캐논슈터로 전직하였습니다."));
                     this.changeJob(530);
                     return true;
                  }
                  break;
               case "1110":
                  if (this.getJob() < 1110) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[시그너스 입문기] 빛의 기사로 전직하였습니다."));
                     this.changeJob(1110);
                     return true;
                  }
                  break;
               case "1210":
                  if (this.getJob() < 1210) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[시그너스 입문기] 불의 기사로 전직하였습니다."));
                     this.changeJob(1210);
                     return true;
                  }
                  break;
               case "1310":
                  if (this.getJob() < 1310) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[시그너스 입문기] 바람의 기사로 전직하였습니다."));
                     this.changeJob(1310);
                     return true;
                  }
                  break;
               case "1410":
                  if (this.getJob() < 1410) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[시그너스 입문기] 어둠의 기사로 전직하였습니다."));
                     this.changeJob(1410);
                     return true;
                  }
                  break;
               case "1510":
                  if (this.getJob() < 1510) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[시그너스 입문기] 번개의 기사로 전직하였습니다."));
                     this.changeJob(1510);
                     return true;
                  }
                  break;
               case "2110":
                  if (this.getJob() < 2110) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[영웅의 본능] 아란으로 전직하였습니다."));
                     this.changeJob(2110);
                     return true;
                  }
                  break;
               case "2210":
                  if (this.getJob() < 2211) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[두번째 걸음] 에반으로 전직하였습니다."));
                     this.changeJob(2211);
                     return true;
                  }
                  break;
               case "2310":
                  if (this.getJob() < 2310) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[영웅의 본능] 메르세데스로 전직하였습니다."));
                     this.changeJob(2310);
                     return true;
                  }
                  break;
               case "2410":
                  if (this.getJob() < 2410) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[영웅의 본능] 팬텀으로 전직하였습니다."));
                     this.changeJob(2410);
                     return true;
                  }
                  break;
               case "2510":
                  if (this.getJob() < 2510) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[영웅의 본능] 은월으로 전직하였습니다."));
                     this.changeJob(2510);
                     return true;
                  }
                  break;
               case "2710":
                  if (this.getJob() < 2710) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[영웅의 본능] 루미너스로 전직하였습니다."));
                     this.changeJob(2710);
                     return true;
                  }
                  break;
               case "3110":
                  if (this.getJob() < 3110) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[레지스탕스 입문기] 데몬슬레이어로 전직하였습니다."));
                     this.changeJob(3110);
                     return true;
                  }
                  break;
               case "3120":
                  if (this.getJob() < 3120) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[레지스탕스 입문기] 데몬어벤져로 전직하였습니다."));
                     this.changeJob(3120);
                     return true;
                  }
                  break;
               case "3210":
                  if (this.getJob() < 3210) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[레지스탕스 입문기] 배틀메이지로 전직하였습니다."));
                     this.changeJob(3210);
                     return true;
                  }
                  break;
               case "3310":
                  if (this.getJob() < 3310) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[레지스탕스 입문기] 와일드헌터로 전직하였습니다."));
                     this.changeJob(3310);
                     return true;
                  }
                  break;
               case "3510":
                  if (this.getJob() < 3510) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[레지스탕스 입문기] 메카닉으로 전직하였습니다."));
                     this.changeJob(3510);
                     return true;
                  }
                  break;
               case "3610":
                  if (this.getJob() < 3610) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[레지스탕스 입문기] 제논으로 전직하였습니다."));
                     this.changeJob(3610);
                     return true;
                  }
                  break;
               case "3710":
                  if (this.getJob() < 3710) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[레지스탕스 입문기] 블래스터으로 전직하였습니다."));
                     this.changeJob(3710);
                     return true;
                  }
                  break;
               case "5110":
                  if (this.getJob() < 5110) {
                     this.removeAndChangeEquip(1098001, (short) -10);
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[시그너스 단장] 빛의 기사로 전직하였습니다."));
                     this.changeJob(5110);
                     return true;
                  }
                  break;
               case "6110":
                  if (this.getJob() < 6110) {
                     this.removeAndChangeEquip(1352501, (short) -10);
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[노바 수련생] 카이저로 전직하였습니다."));
                     this.changeJob(6110);
                     return true;
                  }
                  break;
               case "6410":
                  if (this.getJob() < 6410) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[노바 수련생] 카데나로 전직하였습니다."));
                     this.changeJob(6410);
                     return true;
                  }
                  break;
               case "15210":
                  if (this.getJob() < 15210) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[레프 수련생] 일리움으로 전직하였습니다."));
                     this.changeJob(15210);
                     return true;
                  }
                  break;
               case "15510":
                  if (this.getJob() < 15510) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[레프 수련생] 아크로 전직하였습니다."));
                     this.changeJob(15510);
                     return true;
                  }
                  break;
               case "6510":
                  if (this.getJob() < 6510) {
                     this.removeAndChangeEquip(1352602, (short) -10);
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[노바 수련생] 엔젤릭버스터로 전직하였습니다."));
                     this.changeJob(6510);
                     return true;
                  }
                  break;
               case "14210":
                  if (this.getJob() < 14210) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[초능력의 깨달음] 키네시스로 전직하였습니다."));
                     this.changeJob(14210);
                     return true;
                  }
                  break;
               case "16410":
                  if (this.getJob() < 16410) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[아니마 수련생] 호영으로 전직하였습니다."));
                     this.changeJob(16410);
                     return true;
                  }
                  break;
               case "15110":
                  if (this.getJob() < 15110) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[레프 수련생] 아델로 전직하였습니다."));
                     this.changeJob(15110);
                     return true;
                  }
               case "6310":
                  if (this.getJob() < 6310) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[노바 수련생] 카인으로 전직하였습니다."));
                     this.changeJob(6310);
                     return true;
                  }
                  break;
               case "16210":
                  if (this.getJob() < 16210) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[아니마 수련생] 라라로 전직하였습니다."));
                     this.changeJob(16210);
                     return true;
                  }
            }
         }

         if (this.level >= 55) {
            String var4 = this.getOneInfoQuest(122870, "AutoJob");
            byte var8 = -1;
            switch (var4.hashCode()) {
               case 51601:
                  if (var4.equals("430")) {
                     var8 = 0;
                  }
               default:
                  switch (var8) {
                     case 0:
                        if (this.getJob() < 432) {
                           this.getClient().getSession()
                                 .writeAndFlush(CWvsContext.getScriptProgressMessage("[암흑의 정체성] 듀얼마스터로 전직하였습니다."));
                           this.changeJob(432);
                           return true;
                        }
                  }
            }
         }

         if (this.level >= 60) {
            String var5 = this.getOneInfoQuest(122870, "AutoJob");
            switch (var5) {
               case "15410":
                  if (this.getJob() < 15411) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[칼리] 칼리로 전직하였습니다."));
                     this.changeJob(15411);
                     return true;
                  }
                  break;
               case "110":
                  if (this.getJob() < 111) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[영혼 검술의 기사] 크루세이더로 전직하였습니다."));
                     this.changeJob(111);
                     return true;
                  }
                  break;
               case "120":
                  if (this.getJob() < 121) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[속성 검술의 기사] 나이트로 전직하였습니다."));
                     this.changeJob(121);
                     return true;
                  }
                  break;
               case "130":
                  if (this.getJob() < 131) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[드래곤 창술의 기사] 드래곤 나이트로 전직하였습니다."));
                     this.changeJob(131);
                     return true;
                  }
                  break;
               case "210":
                  if (this.getJob() < 211) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[불*독] 메이지로 전직하였습니다."));
                     this.changeJob(211);
                     return true;
                  }
                  break;
               case "220":
                  if (this.getJob() < 221) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[얼음*번개] 메이지로 전직하였습니다."));
                     this.changeJob(221);
                     return true;
                  }
                  break;
               case "230":
                  if (this.getJob() < 231) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[힐*버프] 프리스트로 전직하였습니다."));
                     this.changeJob(231);
                     return true;
                  }
                  break;
               case "310":
                  if (this.getJob() < 311) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[연쇄 사격수] 레인저로 전직하였습니다."));
                     this.changeJob(311);
                     return true;
                  }
                  break;
               case "320":
                  if (this.getJob() < 321) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[백발백중 명사수] 저격수로 전직하였습니다."));
                     this.changeJob(321);
                     return true;
                  }
                  break;
               case "330":
                  if (this.getJob() < 331) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[체이서의 길] 체이서로 전직하였습니다."));
                     this.changeJob(331);
                     return true;
                  }
                  break;
               case "410":
                  if (this.getJob() < 411) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[암살 전문가] 허밋로 전직하였습니다."));
                     this.changeJob(411);
                     return true;
                  }
                  break;
               case "420":
                  if (this.getJob() < 421) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[암흑자] 시프 마스터로 전직하였습니다."));
                     this.changeJob(421);
                     return true;
                  }
                  break;
               case "510":
                  if (this.getJob() < 511) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[드래곤 너클 파이터] 버커니어로 전직하였습니다."));
                     this.changeJob(511);
                     return true;
                  }
                  break;
               case "520":
                  if (this.getJob() < 521) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[건 마스터리] 발키리로 전직하였습니다."));
                     this.changeJob(521);
                     return true;
                  }
                  break;
               case "430":
                  if (this.getJob() < 433) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[암흑을 알아버린자] 슬래셔로 전직하였습니다."));
                     this.changeJob(433);
                     return true;
                  }
                  break;
               case "530":
                  if (this.getJob() < 531) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[캐논 마스터리] 캐논슈터로 전직하였습니다."));
                     this.changeJob(531);
                     return true;
                  }
                  break;
               case "2110":
                  if (this.getJob() < 2111) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[영웅의 깨달음] 아란으로 전직하였습니다."));
                     this.changeJob(2111);
                     return true;
                  }
                  break;
               case "2210":
                  if (this.getJob() < 2214) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[진화의 드래곤] 에반으로 전직하였습니다."));
                     this.changeJob(2214);
                     return true;
                  }
                  break;
               case "2310":
                  if (this.getJob() < 2311) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[영웅의 깨달음] 메르세데스로 전직하였습니다."));
                     this.changeJob(2311);
                     return true;
                  }
                  break;
               case "2410":
                  if (this.getJob() < 2411) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[영웅의 깨달음] 팬텀으로 전직하였습니다."));
                     this.changeJob(2411);
                     return true;
                  }
                  break;
               case "2510":
                  if (this.getJob() < 2511) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[영웅의 깨달음] 은월으로 전직하였습니다."));
                     this.changeJob(2511);
                     return true;
                  }
                  break;
               case "2710":
                  if (this.getJob() < 2711) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[영웅의 깨달음] 루미너스로 전직하였습니다."));
                     this.changeJob(2711);
                     return true;
                  }
                  break;
               case "3110":
                  if (this.getJob() < 3111) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[레지스탕스 요원] 데몬슬레이어로 전직하였습니다."));
                     this.changeJob(3111);
                     return true;
                  }
                  break;
               case "3120":
                  if (this.getJob() < 3121) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[레지스탕스 요원] 데몬어벤져로 전직하였습니다."));
                     this.changeJob(3121);
                     return true;
                  }
                  break;
               case "3210":
                  if (this.getJob() < 3211) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[레지스탕스 요원] 배틀메이지로 전직하였습니다."));
                     this.changeJob(3211);
                     return true;
                  }
                  break;
               case "3310":
                  if (this.getJob() < 3311) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[레지스탕스 요원] 와일드헌터로 전직하였습니다."));
                     this.changeJob(3311);
                     return true;
                  }
                  break;
               case "3510":
                  if (this.getJob() < 3511) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[레지스탕스 요원] 메카닉으로 전직하였습니다."));
                     this.changeJob(3511);
                     return true;
                  }
                  break;
               case "3610":
                  if (this.getJob() < 3611) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[레지스탕스 요원] 제논으로 전직하였습니다."));
                     this.changeJob(3611);
                     return true;
                  }
                  break;
               case "3710":
                  if (this.getJob() < 3711) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[레지스탕스 요원] 블래스터로 전직하였습니다."));
                     this.changeJob(3711);
                     return true;
                  }
                  break;
               case "5110":
                  if (this.getJob() < 5111) {
                     this.removeAndChangeEquip(1098002, (short) -10);
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[시그너스 단장] 빛의 기사로 전직하였습니다."));
                     this.changeJob(5111);
                     return true;
                  }
                  break;
               case "6110":
                  if (this.getJob() < 6111) {
                     this.removeAndChangeEquip(1352502, (short) -10);
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[노바의 수호자] 카이저로 전직하였습니다."));
                     this.changeJob(6111);
                     return true;
                  }
                  break;
               case "6410":
                  if (this.getJob() < 6411) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[노바의 수호자] 카데나로 전직하였습니다."));
                     this.changeJob(6411);
                     return true;
                  }
                  break;
               case "6510":
                  if (this.getJob() < 6511) {
                     this.removeAndChangeEquip(1352603, (short) -10);
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[노바의 수호자] 엔젤릭버스터로 전직하였습니다."));
                     this.changeJob(6511);
                     return true;
                  }
                  break;
               case "1110":
                  if (this.getJob() < 1111) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[시그너스 정식 기사] 소울 마스터로 전직하였습니다."));
                     this.changeJob(1111);
                     return true;
                  }
                  break;
               case "1210":
                  if (this.getJob() < 1211) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[시그너스 정식 기사] 플레임 위자드로 전직하였습니다."));
                     this.changeJob(1211);
                     return true;
                  }
                  break;
               case "1310":
                  if (this.getJob() < 1311) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[시그너스 정식 기사] 윈드 브레이커로 전직하였습니다."));
                     this.changeJob(1311);
                     return true;
                  }
                  break;
               case "1410":
                  if (this.getJob() < 1411) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[시그너스 정식 기사] 나이트 워커로 전직하였습니다."));
                     this.changeJob(1411);
                     return true;
                  }
                  break;
               case "1510":
                  if (this.getJob() < 1511) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[시그너스 정식 기사] 스트라이커로 전직하였습니다."));
                     this.changeJob(1511);
                     return true;
                  }
                  break;
               case "14210":
                  if (this.getJob() < 14211) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[초능력의 깨달음] 키네시스로 전직하였습니다."));
                     this.changeJob(14211);
                     return true;
                  }
                  break;
               case "15210":
                  if (this.getJob() < 15211) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[레프의 수호자] 일리움으로 전직하였습니다."));
                     this.changeJob(15211);
                     return true;
                  }
                  break;
               case "15510":
                  if (this.getJob() < 15511) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[레프의 수호자] 아크로 전직하였습니다."));
                     this.changeJob(15511);
                     return true;
                  }
                  break;
               case "16410":
                  if (this.getJob() < 16411) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[아니마 수호자] 호영으로 전직하였습니다."));
                     this.changeJob(16411);
                     return true;
                  }
                  break;
               case "15110":
                  if (this.getJob() < 15111) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[레프 수호자] 아델로 전직하였습니다."));
                     this.changeJob(15111);
                     return true;
                  }
                  break;
               case "6310":
                  if (this.getJob() < 6311) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[노바 수호자] 카인으로 전직하였습니다."));
                     this.changeJob(6311);
                     return true;
                  }
                  break;
               case "16210":
                  if (this.getJob() < 16211) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[아니마 수호자] 라라로 전직하였습니다."));
                     this.changeJob(16211);
                     return true;
                  }
            }
         }

         if (this.level >= 100) {
            String var6 = this.getOneInfoQuest(122870, "AutoJob");
            switch (var6) {
               case "15410":
                  if (this.getJob() < 15412) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[칼리] 칼리로 전직하였습니다."));
                     this.changeJob(15412);
                     return true;
                  }
                  break;
               case "110":
                  if (this.getJob() < 112) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[연쇄 검술의 마스터] 히어로로 전직하였습니다."));
                     this.changeJob(112);
                     return true;
                  }
                  break;
               case "120":
                  if (this.getJob() < 122) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[환상 검술의 마스터] 팔라딘로 전직하였습니다."));
                     this.changeJob(122);
                     return true;
                  }
                  break;
               case "130":
                  if (this.getJob() < 132) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[다크 드래곤 창술의 마스터] 다크 나이트로 전직하였습니다."));
                     this.changeJob(132);
                     return true;
                  }
                  break;
               case "210":
                  if (this.getJob() < 212) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[불*독 마스터] 아크메이지로 전직하였습니다."));
                     this.changeJob(212);
                     return true;
                  }
                  break;
               case "220":
                  if (this.getJob() < 222) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[얼음*번개 마스터] 아크메이지로 전직하였습니다."));
                     this.changeJob(222);
                     return true;
                  }
                  break;
               case "230":
                  if (this.getJob() < 232) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[힐*버프 마스터] 비숍으로 전직하였습니다."));
                     this.changeJob(232);
                     return true;
                  }
                  break;
               case "310":
                  if (this.getJob() < 312) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[화살 연사의 마스터] 보우 마스터로 전직하였습니다."));
                     this.changeJob(312);
                     return true;
                  }
                  break;
               case "320":
                  if (this.getJob() < 322) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[화살 파워의 마스터] 신궁로 전직하였습니다."));
                     this.changeJob(322);
                     return true;
                  }
                  break;
               case "330":
                  if (this.getJob() < 332) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[에인션트 보우의 달인] 패스파인더로 전직하였습니다."));
                     this.changeJob(332);
                     return true;
                  }
                  break;
               case "410":
                  if (this.getJob() < 412) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[연쇄 암살의 마스터] 나이트 로드로 전직하였습니다."));
                     this.changeJob(412);
                     return true;
                  }
                  break;
               case "420":
                  if (this.getJob() < 422) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[암흑의 암살 마스터] 섀도우로 전직하였습니다."));
                     this.changeJob(422);
                     return true;
                  }
                  break;
               case "510":
                  if (this.getJob() < 512) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[정령의 너클 파이터] 바이퍼로 전직하였습니다."));
                     this.changeJob(512);
                     return true;
                  }
                  break;
               case "520":
                  if (this.getJob() < 522) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[배틀 건 마스터리] 캡틴으로 전직하였습니다."));
                     this.changeJob(522);
                     return true;
                  }
                  break;
               case "430":
                  if (this.getJob() < 434) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[암흑을 조정하는자] 듀얼블레이드로 전직하였습니다."));
                     this.changeJob(434);
                     return true;
                  }
                  break;
               case "530":
                  if (this.getJob() < 532) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[파괴의 캐논 마스터리] 캐논슈터로 전직하였습니다."));
                     this.changeJob(532);
                     return true;
                  }
                  break;
               case "2110":
                  if (this.getJob() < 2112) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[영웅의 부활] 아란으로 전직하였습니다."));
                     this.changeJob(2112);
                     return true;
                  }
                  break;
               case "2210":
                  if (this.getJob() < 2217) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[전설의 드래곤] 에반으로 전직하였습니다."));
                     this.changeJob(2217);
                     return true;
                  }
                  break;
               case "2310":
                  if (this.getJob() < 2312) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[영웅의 부활] 메르세데스로 전직하였습니다."));
                     this.changeJob(2312);
                     return true;
                  }
                  break;
               case "2410":
                  if (this.getJob() < 2412) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[영웅의 부활] 팬텀으로 전직하였습니다."));
                     this.changeJob(2412);
                     this.changeSkillLevel(20031210, 1, 1);
                     this.changeSkillLevel(20031209, 0, 0);
                     return true;
                  }
                  break;
               case "2510":
                  if (this.getJob() < 2512) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[영웅의 부활] 은월으로 전직하였습니다."));
                     this.changeJob(2512);
                     return true;
                  }
                  break;
               case "2710":
                  if (this.getJob() < 2712) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[영웅의 부활] 루미너스로 전직하였습니다."));
                     this.changeJob(2712);
                     return true;
                  }
                  break;
               case "3110":
                  if (this.getJob() < 3112) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[레지스탕스의 영웅] 데몬슬레이어로 전직하였습니다."));
                     this.changeJob(3112);
                     return true;
                  }
                  break;
               case "3120":
                  if (this.getJob() < 3122) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[레지스탕스 영웅] 데몬어벤져로 전직하였습니다."));
                     this.changeJob(3122);
                     return true;
                  }
                  break;
               case "3210":
                  if (this.getJob() < 3212) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[레지스탕스의 영웅] 배틀메이지로 전직하였습니다."));
                     this.changeJob(3212);
                     return true;
                  }
                  break;
               case "3310":
                  if (this.getJob() < 3312) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[레지스탕스의 영웅] 와일드헌터로 전직하였습니다."));
                     this.changeJob(3312);
                     return true;
                  }
                  break;
               case "3510":
                  if (this.getJob() < 3512) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[레지스탕스의 영웅] 메카닉으로 전직하였습니다."));
                     this.changeJob(3512);
                     return true;
                  }
                  break;
               case "3610":
                  if (this.getJob() < 3612) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[레지스탕스의 영웅] 제논으로 전직하였습니다."));
                     this.changeJob(3612);
                     return true;
                  }
                  break;
               case "3710":
                  if (this.getJob() < 3712) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[레지스탕스의 영웅] 블래스터로 전직하였습니다."));
                     this.changeJob(3712);
                     return true;
                  }
                  break;
               case "5110":
                  if (this.getJob() < 5112) {
                     this.removeAndChangeEquip(1098003, (short) -10);
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[시그너스 단장] 빛의 기사로 전직하였습니다."));
                     this.changeJob(5112);
                     return true;
                  }
                  break;
               case "6110":
                  if (this.getJob() < 6112) {
                     this.removeAndChangeEquip(1352503, (short) -10);
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[용의 기사] 카이저로 전직하였습니다."));
                     this.changeJob(6112);
                     return true;
                  }
                  break;
               case "6410":
                  if (this.getJob() < 6412) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[체인 마스터] 카데나로 전직하였습니다."));
                     this.changeJob(6412);
                     return true;
                  }
                  break;
               case "6510":
                  if (this.getJob() < 6512) {
                     this.removeAndChangeEquip(1352604, (short) -10);
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[전장의 아이돌] 엔젤릭버스터로 전직하였습니다."));
                     this.changeJob(6512);
                     return true;
                  }
                  break;
               case "1110":
                  if (this.getJob() < 1112) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[시그너스 영웅] 빛의 대정령으로 전직하였습니다."));
                     this.changeJob(1112);
                     this.changeSkillLevel(11121000, 30, 30);
                     return true;
                  }
                  break;
               case "1210":
                  if (this.getJob() < 1212) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[시그너스 영웅] 불의 대정령으로 전직하였습니다."));
                     this.changeJob(1212);
                     this.changeSkillLevel(12121000, 30, 30);
                     return true;
                  }
                  break;
               case "1310":
                  if (this.getJob() < 1312) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[시그너스 영웅] 바람의 대정령으로 전직하였습니다."));
                     this.changeJob(1312);
                     this.changeSkillLevel(13121000, 30, 30);
                     return true;
                  }
                  break;
               case "1410":
                  if (this.getJob() < 1412) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[시그너스 영웅] 어둠의 대정령으로 전직하였습니다."));
                     this.changeJob(1412);
                     this.changeSkillLevel(14121000, 30, 30);
                     return true;
                  }
                  break;
               case "1510":
                  if (this.getJob() < 1512) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[시그너스 영웅] 번개의 대정령으로 전직하였습니다."));
                     this.changeJob(1512);
                     this.changeSkillLevel(15121000, 30, 30);
                     return true;
                  }
                  break;
               case "14210":
                  if (this.getJob() < 14212) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[초능력의 영웅] 키네시스로 전직하였습니다."));
                     this.changeJob(14212);
                     return true;
                  }
                  break;
               case "15210":
                  if (this.getJob() < 15212) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[크리스탈 마스터] 일리움으로 전직하였습니다."));
                     this.changeJob(15212);
                     return true;
                  }
                  break;
               case "15510":
                  if (this.getJob() < 15512) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[레프의 영웅] 아크로 전직하였습니다."));
                     this.changeJob(15512);
                     return true;
                  }
                  break;
               case "16410":
                  if (this.getJob() < 16412) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[아니마 영웅] 호영으로 전직하였습니다."));
                     this.changeJob(16412);
                     return true;
                  }
                  break;
               case "15110":
                  if (this.getJob() < 15112) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[레프의 영웅] 아델로 전직하였습니다."));
                     this.changeJob(15112);
                     return true;
                  }
                  break;
               case "6310":
                  if (this.getJob() < 6312) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[노바의 영웅] 카인으로 전직하였습니다."));
                     this.changeJob(6312);
                     return true;
                  }
                  break;
               case "16210":
                  if (this.getJob() < 16212) {
                     this.getClient().getSession()
                           .writeAndFlush(CWvsContext.getScriptProgressMessage("[아니마 영웅] 라라로 전직하였습니다."));
                     this.changeJob(16212);
                     return true;
                  }
            }
         }
      }

      return false;
   }

   public void removeAndChangeEquip(int itemid, short position) {
      MapleInventoryManipulator.removeFromSlot(this.getClient(), MapleInventoryType.EQUIPPED, position, (short) 1,
            false, false);
      MapleItemInformationProvider li = MapleItemInformationProvider.getInstance();
      MapleInventory equip = this.getInventory(MapleInventoryType.EQUIPPED);
      if (li.getItemInformation(itemid) != null) {
         Item item = li.getEquipById(itemid);
         item.setPosition(position);
         item.setGMLog("removeAndChangeEquip");
         equip.addFromDB(item);
         this.send(CWvsContext.InventoryPacket.updateArcaneSymbol(item));
      }
   }

   public void sendMacros() {
      for (int i = 0; i < 5; i++) {
         if (this.skillMacros[i] != null) {
            this.client.getSession().writeAndFlush(CField.getMacros(this.skillMacros));
            break;
         }
      }
   }

   public void updateMacros(int position, SkillMacro updateMacro) {
      this.skillMacros[position] = updateMacro;
      this.setSaveFlag(this.getSaveFlag() | CharacterSaveFlag.SKILL_MACROS.getFlag());
   }

   public final SkillMacro[] getMacros() {
      return this.skillMacros;
   }

   public void tempban(String reason, Calendar duration, boolean IPMac) {
      if (IPMac) {
         this.serialBan(false);
      }

      DBConnection db = new DBConnection();

      try (Connection con = DBConnection.getConnection()) {
         PreparedStatement ps = con.prepareStatement("UPDATE accounts SET tempban = ?, banreason = ? WHERE id = ?");
         Timestamp TS = new Timestamp(duration.getTimeInMillis());
         ps.setTimestamp(1, TS);
         ps.setString(2, reason);
         ps.setInt(3, this.accountid);
         ps.execute();
         ps.close();
         this.client.getSession().close();
         System.out.println("팅겼다고인마");
      } catch (SQLException var10) {
         System.err.println("Error while tempbanning" + var10);
      }
   }

   public final boolean ban(String reason, boolean IPMac, boolean autoban, boolean hellban) {
      if (this.lastmonthfameids == null) {
         throw new RuntimeException("Trying to ban a non-loaded character (testhack)");
      } else {
         DBConnection db = new DBConnection();

         try (Connection con = DBConnection.getConnection()) {
            PreparedStatement ps = con.prepareStatement("UPDATE accounts SET banned = ?, banreason = ? WHERE id = ?");
            ps.setInt(1, autoban ? 2 : 1);
            ps.setString(2, reason);
            ps.setInt(3, this.accountid);
            ps.execute();
            ps.close();
         } catch (SQLException var11) {
            System.err.println("Error while banning" + var11);
            return false;
         }

         this.client.getSession().close();
         System.out.println("팅겼다고인마");
         return true;
      }
   }

   public static boolean ban(String id, String reason, boolean isAccountId, int gmlevel, boolean hellban) {
      DBConnection db = new DBConnection();

      boolean ret = false;
      try {
         int accountId;
         try (Connection con = DBConnection.getConnection()) {
            PreparedStatement ps;
            if (isAccountId) {
               ps = con.prepareStatement("SELECT id FROM accounts WHERE name = ?");
            } else {
               ps = con.prepareStatement("SELECT accountid FROM characters WHERE name = ?");
            }

            ps.setString(1, id);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
               accountId = rs.getInt(1);
               PreparedStatement psb = con
                     .prepareStatement("UPDATE accounts SET banned = 1, banreason = ? WHERE id = ? AND gm < ?");
               psb.setString(1, reason);
               psb.setInt(2, accountId);
               psb.setInt(3, gmlevel);
               psb.execute();
               psb.close();
               PreparedStatement psa = con.prepareStatement("SELECT * FROM accounts WHERE id = ?");
               psa.setInt(1, accountId);
               ResultSet rsa = psa.executeQuery();
               if (rsa.next()) {
                  String sessionIP = rsa.getString("sessionIP");
                  if (rsa.getString("macs") != null) {
                     String name = rsa.getString("name");
                     serialBan(name, false);
                  }

                  if (hellban) {
                     PreparedStatement pss = con.prepareStatement(
                           "UPDATE accounts SET banned = 1, banreason = ? WHERE email = ?"
                                 + (sessionIP == null ? "" : " OR SessionIP = ?"));
                     pss.setString(1, reason);
                     pss.setString(2, rsa.getString("email"));
                     if (sessionIP != null) {
                        pss.setString(3, sessionIP);
                     }

                     pss.execute();
                     pss.close();
                  }
               }

               rsa.close();
               psa.close();
               ret = true;
            }

            rs.close();
            ps.close();
         }

         return ret;
      } catch (SQLException var18) {
         System.err.println("Error while banning" + var18);
         return false;
      }
   }

   @Override
   public int getObjectId() {
      return this.getId();
   }

   @Override
   public void setObjectId(int id) {
      throw new UnsupportedOperationException();
   }

   public MapleStorage getStorage() {
      return this.storage;
   }

   public void addVisibleMapObject(MapleMapObject mo) {
      if (!this.clone) {
         this.visibleMapObjectsLock.writeLock().lock();

         try {
            this.visibleMapObjects.add(mo);
         } finally {
            this.visibleMapObjectsLock.writeLock().unlock();
         }
      }
   }

   public void removeVisibleMapObject(MapleMapObject mo) {
      if (!this.clone) {
         this.visibleMapObjectsLock.writeLock().lock();

         try {
            this.visibleMapObjects.remove(mo);
         } finally {
            this.visibleMapObjectsLock.writeLock().unlock();
         }
      }
   }

   public boolean isMapObjectVisible(MapleMapObject mo) {
      this.visibleMapObjectsLock.readLock().lock();

      boolean var2;
      try {
         var2 = !this.clone && this.visibleMapObjects.contains(mo);
      } finally {
         this.visibleMapObjectsLock.readLock().unlock();
      }

      return var2;
   }

   public Collection<MapleMapObject> getAndWriteLockVisibleMapObjects() {
      this.visibleMapObjectsLock.writeLock().lock();
      return this.visibleMapObjects;
   }

   public void unlockWriteVisibleMapObjects() {
      this.visibleMapObjectsLock.writeLock().unlock();
   }

   public boolean isAlive() {
      return this.stats.getHp() > 0L;
   }

   @Override
   public void sendDestroyData(MapleClient client) {
      client.getSession().writeAndFlush(CField.removePlayerFromMap(this.getObjectId()));
   }

   @Override
   public void sendSpawnData(MapleClient client) {
      if (client != null && client.getPlayer() != null) {
         if (client.getPlayer().allowedToTarget(this)) {
            try {
               client.getSession().writeAndFlush(CField.spawnPlayerMapobject(this));
            } catch (Exception var25) {
               FileoutputUtil.outputFileErrorReason("Log_Player_Except.rtf",
                     "sendObjectPlacement 중 Character sendSpawnData 오류 발생 spawnPlayerMapObject", var25);
            }

            try {
               client.getPlayer().receivePartyMemberHP();
            } catch (Exception var24) {
               FileoutputUtil.outputFileErrorReason("Log_Player_Except.rtf",
                     "sendObjectPlacement 중 Character sendSpawnData 오류 발생 패킷전송 PartyMemberHP", var24);
            }

            try {
               for (SecondAtom.Atom a : new ArrayList<>(this.getSecondAtoms())) {
                  if (a.getPlayerID() != client.getPlayer().getId()) {
                     SecondAtom atom = new SecondAtom(a);
                     client.getSession().writeAndFlush(CField.createSecondAtom(atom));
                  }
               }
            } catch (Exception var30) {
               FileoutputUtil.outputFileErrorReason("Log_Player_Except.rtf",
                     "sendObjectPlacement 중 Character sendSpawnData 오류 발생 디버그 SecondAtom 오류", var30);
            }

            try {
               for (int i = 0; i < 3; i++) {
                  if (this.pets[i] != null && !this.inBuzzingHouse()) {
                     client.getSession().writeAndFlush(PetPacket.showPet(this, this.pets[i], false, false, i));
                  }
               }
            } catch (Exception var29) {
               FileoutputUtil.outputFileErrorReason("Log_Player_Except.rtf",
                     "sendObjectPlacement 중 Character sendSpawnData 오류 발생 디버그 펫소환 실패", var29);
            }

            try {
               if (this.dragon != null && !this.inBuzzingHouse()) {
                  client.getSession().writeAndFlush(CField.spawnDragon(this.dragon));
               }

               if (this.android != null && !this.inBuzzingHouse()) {
                  client.getSession().writeAndFlush(CField.spawnAndroid(this, this.android));
               }
            } catch (Exception var23) {
               FileoutputUtil.outputFileErrorReason("Log_Player_Except.rtf",
                     "sendObjectPlacement 중 Character sendSpawnData 오류 발생 드래곤 또는 안드로이드", var23);
            }

            try {
               if (client != null
                     && client.getPlayer() != null
                     && client.getPlayer().getId() != this.getId()
                     && this.summons != null
                     && this.summons.size() > 0) {
                  try {
                     if (this.summonsLock == null) {
                        this.summonsLock = new ReentrantReadWriteLock();
                     }

                     this.summonsLock.readLock().lock();

                     for (Summoned summon : this.summons) {
                        if (summon != null) {
                           try {
                              summon.setPosition(this.getTruePosition());
                           } catch (Exception var22) {
                              FileoutputUtil.log("Log_Player_Except.rtf",
                                    "sendObjectPlacement 중 Character sendSpawnData 오류 발생 소환수 좌표 설정");
                              FileoutputUtil.log("Log_Player_Except.rtf", var22.toString());
                           }

                           try {
                              if (summon.getSkill() != 14111024 && summon.getSkill() != 400041028
                                    && summon.getSkill() != 500061004) {
                                 client.getSession().writeAndFlush(CField.SummonPacket.spawnSummon(summon, true));
                              } else if (summon.getOwner() != null) {
                                 objects.utils.Timer.EtcTimer.getInstance()
                                       .schedule(
                                             () -> {
                                                try {
                                                   if (summon.getSummonRemoveTime() >= System.currentTimeMillis()
                                                         && client.getPlayer().getMapId() == summon.getOwner()
                                                               .getMapId()) {
                                                      client.getSession().writeAndFlush(
                                                            CField.SummonPacket.spawnSummon(summon, true));
                                                   }
                                                } catch (Exception var3x) {
                                                }
                                             },
                                             1000L);
                              }
                           } catch (Exception var26) {
                              FileoutputUtil.outputFileErrorReason(
                                    "Log_Player_Except.rtf",
                                    "sendObjectPlacement 중 Character sendSpawnData 오류 발생 소환수 좌표 패킷 전송", var26);
                           }
                        }
                     }
                  } finally {
                     this.summonsLock.readLock().unlock();
                  }
               }
            } catch (Exception var28) {
               FileoutputUtil.outputFileErrorReason("Log_Player_Except.rtf",
                     "sendObjectPlacement 중 Character sendSpawnData 오류 발생 소환수", var28);
            }

            try {
               if (this.followid > 0 && this.followon) {
                  client.getSession()
                        .writeAndFlush(CField.followEffect(this.followinitiator ? this.followid : this.id,
                              this.followinitiator ? this.id : this.followid, null));
               }

               if (this.getBuffedValue(SecondaryStatFlag.RepeatEffect) != null) {
                  int skillid = this.secondaryStat.getReason(SecondaryStatFlag.RepeatEffect);
                  if (GameConstants.isAngelicBlessBuffEffectItem(skillid)) {
                     client.getSession()
                           .writeAndFlush(CWvsContext.BuffPacket.showAngelicBlessBuffEffect(this.getId(), skillid));
                  }
               }
            } catch (Exception var21) {
               FileoutputUtil.log("Log_Player_Except.rtf",
                     "sendObjectPlacement 중 Character sendSpawnData 오류 발생 버프 패킷 전송 실패 2");
               FileoutputUtil.log("Log_Player_Except.rtf", var21.toString());
            }

            try {
               String showmotion = this.getOneInfoQuest(27042, "use");
               int motionvalue = 0;
               if (!showmotion.equals("")) {
                  try {
                     motionvalue = Integer.parseInt(showmotion);
                  } catch (Exception var19) {
                     motionvalue = 0;
                  }
               }

               this.getMap().broadcastMessage(CWvsContext.updateWeaponMotion(this.getId(), motionvalue));
               String showmedal = this.getOneInfoQuest(101149, "1007");
               this.getMap().broadcastMessage(CWvsContext.updateShowMedal(this.getId(), showmedal.equals("0") ? 0 : 1));
               String showitemeffect = this.getOneInfoQuest(101149, "1009");
               this.getMap().broadcastMessage(
                     CWvsContext.updateShowItemEffect(this.getId(), showitemeffect.equals("0") ? 0 : 1));
               String souleffect = this.getOneInfoQuest(26535, "effect");
               this.getMap().broadcastMessage(CField.setSoulEffect(this, (byte) (souleffect.equals("0") ? 0 : 1)));
            } catch (Exception var20) {
               FileoutputUtil.log("Log_Player_Except.rtf",
                     "sendObjectPlacement 중 Character sendSpawnData 오류 발생 웨폰모션, 메달, 아이템이펙트");
               FileoutputUtil.log("Log_Player_Except.rtf", var20.toString());
            }
         }
      }
   }

   public final void equipChanged() {
      if (this.map != null) {
         this.map.broadcastMessage(CField.updateCharLook(this));
         this.stats.recalcLocalStats(this);
         if (this.getMessenger() != null) {
            Center.Messenger.updateMessenger(this.getMessenger().getId(), this.getName(), this.client.getChannel());
         }
      }
   }

   public final MaplePet getPet(long index) {
      return this.pets[(int) index];
   }

   public void updatePet() {
      for (int i = 0; i < 3; i++) {
         if (this.pets[i] != null) {
            this.getClient()
                  .getSession()
                  .writeAndFlush(
                        PetPacket.updatePet(
                              this, this.pets[i],
                              this.getInventory(MapleInventoryType.CASH).getItem(this.pets[i].getInventoryPosition()),
                              false, this.petLoot));
         }
      }
   }

   public void addPet(MaplePet pet) {
      for (int i = 0; i < 3; i++) {
         if (this.pets[i] == null) {
            this.pets[i] = pet;
            return;
         }
      }
   }

   public void addPetBySlotId(MaplePet pet, int slotid) {
      if (pet != null) {
         if (this.pets[slotid] == null) {
            this.pets[slotid] = pet;
            this.pets[slotid].setPos(this.getPosition());
         }
      }
   }

   public void removePet(MaplePet pet, boolean shiftLeft) {
      int slot = -1;

      for (int i = 0; i < 3; i++) {
         if (this.pets[i] != null && this.pets[i].getUniqueId() == pet.getUniqueId()) {
            this.pets[i] = null;
            slot = i;
            break;
         }
      }

      if (shiftLeft && slot > -1) {
         for (int ix = slot; ix < 3; ix++) {
            if (ix != 2) {
               this.pets[ix] = this.pets[ix + 1];
            } else {
               this.pets[ix] = null;
            }
         }
      }
   }

   public final int getPetIndex(MaplePet pet) {
      for (int i = 0; i < 3; i++) {
         if (this.pets[i] != null && pet != null && this.pets[i].getUniqueId() == pet.getUniqueId()) {
            return i;
         }
      }

      return -1;
   }

   public final int getPetIndex(int petId) {
      for (int i = 0; i < 3; i++) {
         if (this.pets[i] != null && this.pets[i].getUniqueId() == petId) {
            return i;
         }
      }

      return -1;
   }

   public final List<MaplePet> getSummonedPets() {
      List<MaplePet> ret = new ArrayList<>();

      for (MaplePet pet : this.pets) {
         if (pet.getSummoned()) {
            ret.add(pet);
         }
      }

      return ret;
   }

   public final byte getPetById(int petId) {
      byte count = 0;

      for (MaplePet pet : this.pets) {
         if (pet.getSummoned()) {
            if (pet.getPetItemId() == petId) {
               return count;
            }

            count++;
         }
      }

      return -1;
   }

   public final MaplePet[] getPets() {
      return this.pets;
   }

   public final void unequipAllPets() {
      for (MaplePet pet : this.pets) {
         if (pet != null) {
            this.unequipPet(pet, true, false, 0);
         }
      }
   }

   public void unequipPet(MaplePet pet, boolean shiftLeft, boolean hunger, int index) {
      pet.setSummoned((byte) 0);
      pet.saveToDb();
      Item item = this.getInventory(MapleInventoryType.CASH).getItem(pet.getInventoryPosition());
      if (item != null) {
         this.client.getSession().writeAndFlush(PetPacket.updatePet(this, pet, item, true, this.petLoot));
      }

      if (this.map != null) {
         this.map.broadcastMessage(this, PetPacket.showPet(this, pet, true, hunger, index), true);
      }

      this.removePet(pet, shiftLeft);
      this.client.getSession().writeAndFlush(CWvsContext.enableActions(this));
   }

   public final long getLastFameTime() {
      return this.lastfametime;
   }

   public final List<Integer> getFamedCharacters() {
      return this.lastmonthfameids;
   }

   public final List<Integer> getBattledCharacters() {
      return this.lastmonthbattleids;
   }

   public MapleCharacter.FameStatus canGiveFame(MapleCharacter from) {
      if (this.lastfametime >= System.currentTimeMillis() - 86400000L) {
         return MapleCharacter.FameStatus.NOT_TODAY;
      } else {
         return from != null && this.lastmonthfameids != null && !this.lastmonthfameids.contains(from.getId())
               ? MapleCharacter.FameStatus.OK
               : MapleCharacter.FameStatus.NOT_THIS_MONTH;
      }
   }

   public void hasGivenFame(MapleCharacter to) {
      this.lastfametime = System.currentTimeMillis();
      this.lastmonthfameids.add(to.getId());
      DBConnection db = new DBConnection();

      try (Connection con = DBConnection.getConnection()) {
         PreparedStatement ps = con.prepareStatement("INSERT INTO famelog (characterid, characterid_to) VALUES (?, ?)");
         ps.setInt(1, this.getId());
         ps.setInt(2, to.getId());
         ps.execute();
         ps.close();
      } catch (SQLException var8) {
         System.err.println("ERROR writing famelog for char " + this.getName() + " to " + to.getName() + var8);
      }
   }

   public boolean canBattle(MapleCharacter to) {
      return to != null && this.lastmonthbattleids != null && !this.lastmonthbattleids.contains(to.getAccountID());
   }

   public void hasBattled(MapleCharacter to) {
      this.lastmonthbattleids.add(to.getAccountID());
      DBConnection db = new DBConnection();

      try (Connection con = DBConnection.getConnection()) {
         PreparedStatement ps = con.prepareStatement("INSERT INTO battlelog (accid, accid_to) VALUES (?, ?)");
         ps.setInt(1, this.getAccountID());
         ps.setInt(2, to.getAccountID());
         ps.execute();
         ps.close();
      } catch (SQLException var8) {
         System.err.println("ERROR writing battlelog for char " + this.getName() + " to " + to.getName() + var8);
      }
   }

   public final MapleKeyLayout[] getKeyLayout() {
      return this.keylayout;
   }

   public final MapleKeyLayout getKeyLayout(int index) {
      return this.keylayout[index];
   }

   public Party getParty() {
      if (this.party == null) {
         return null;
      } else {
         if (this.party.isDisbanded()) {
            this.party = null;
         }

         return this.party;
      }
   }

   public void createParty() {
      if (this.getParty() == null) {
         PartyMemberEntry memberEntry = new PartyMemberEntry(this);
         Party party = Center.Party.createParty(memberEntry);
         party.setPrivateParty(true);
         party.setOnlyLeaderPickUp(true);
         party.setPartyTitle(this.getName() + "님의 파티");
         this.setParty(party);
         PacketEncoder packet = new PacketEncoder();
         Party.PartyPacket.CreateParty createParty = new Party.PartyPacket.CreateParty(party);
         createParty.encode(packet);
         this.send(packet.getPacket());
      }
   }

   public byte getWorld() {
      return this.world;
   }

   public void setWorld(byte world) {
      this.world = world;
   }

   public void setParty(Party party) {
      this.party = party;
   }

   public MapleTrade getTrade() {
      return this.trade;
   }

   public void setTrade(MapleTrade trade) {
      this.trade = trade;
   }

   public EventInstanceManager getEventInstance() {
      return this.eventInstance == null ? null : this.eventInstance;
   }

   public void setEventInstance(EventInstanceManager eventInstance) {
      this.eventInstance = eventInstance;
   }

   public void addDoor(TownPortal door) {
      this.doors.add(door);
   }

   public void clearDoors() {
      this.doors.clear();
   }

   public List<TownPortal> getDoors() {
      return (List<TownPortal>) (this.doors != null ? new ArrayList<>(this.doors) : Collections.EMPTY_LIST);
   }

   public void addMechDoor(OpenGate door) {
      this.mechDoors.add(door);
   }

   public void removeOneMechDoor(OpenGate door) {
      this.mechDoors.remove(door);
   }

   public void clearMechDoors() {
      this.mechDoors.clear();
   }

   public List<OpenGate> getMechDoors() {
      return (List<OpenGate>) (this.mechDoors != null ? new ArrayList<>(this.mechDoors) : Collections.EMPTY_LIST);
   }

   public void setSmega() {
      if (this.smega) {
         this.smega = false;
         this.dropMessage(5, "You have set megaphone to disabled mode");
      } else {
         this.smega = true;
         this.dropMessage(5, "You have set megaphone to enabled mode");
      }
   }

   public boolean getSmega() {
      return this.smega;
   }

   public List<Summoned> getSummonsReadLock() {
      this.summonsLock.readLock().lock();
      return this.summons;
   }

   public List<Summoned> getSummons() {
      return new LinkedList<>(this.summons);
   }

   public int getSummonsSize() {
      return this.summons == null ? 0 : this.summons.size();
   }

   public void unlockSummonsReadLock() {
      this.summonsLock.readLock().unlock();
   }

   public void addSummon(Summoned s) {
      this.summonsLock.writeLock().lock();

      try {
         this.summons.add(s);
      } finally {
         this.summonsLock.writeLock().unlock();
      }
   }

   public void removeSummon(Summoned s) {
      this.summonsLock.writeLock().lock();

      try {
         this.invokeJobMethod("removeSummon", s);
         this.summons.remove(s);
      } finally {
         this.summonsLock.writeLock().unlock();
      }
   }

   public int getChair() {
      return this.chair;
   }

   public int getItemEffect() {
      return this.itemEffect;
   }

   public void setChair(int chair) {
      this.chair = chair;
      this.stats.relocHeal(this);
   }

   public void setItemEffect(int itemEffect) {
      this.itemEffect = itemEffect;
   }

   @Override
   public MapleMapObjectType getType() {
      return MapleMapObjectType.PLAYER;
   }

   public int getTotalWins() {
      return this.totalWins;
   }

   public int getTotalLosses() {
      return this.totalLosses;
   }

   public void increaseTotalWins() {
      this.totalWins++;
   }

   public void increaseTotalLosses() {
      this.totalLosses++;
   }

   public int getGuildId() {
      return this.guildid;
   }

   public byte getGuildRank() {
      return this.guildrank;
   }

   public int getGuildContribution() {
      return this.guildContribution;
   }

   public void setGuildIdFromCreate(int _id) {
      this.guildid = _id;
      this.mgc = new GuildCharacter(this);
   }

   public void setGuildId(int _id) {
      this.guildid = _id;
      if (this.guildid > 0) {
         if (this.mgc == null) {
            GuildCharacter mgc_ = Center.Guild.getGuild(this.guildid).getMGC(this.getId());
            if (mgc_ != null) {
               this.mgc = mgc_;
            } else {
               this.mgc = new GuildCharacter(this);
            }
         } else {
            this.mgc.setGuildId(this.guildid);
         }
      } else {
         this.mgc = null;
         this.guildContribution = 0;
      }
   }

   public void setGuildRank(byte _rank) {
      this.guildrank = _rank;
      if (this.mgc != null) {
         this.mgc.setGuildRank(_rank);
      }
   }

   public void setGuildContribution(int _c) {
      this.guildContribution = _c;
      if (this.mgc != null) {
         this.mgc.setGuildContribution(_c);
      }
   }

   public void addTogetherPointByBoss(int bossID) {
      if (this.getMap().getFieldSetInstance() != null || GameConstants.isTogetherPointMap(this.getMapId())) {
         if (this.getMap().getFieldSetInstance() == null
               || !(this.getMap().getFieldSetInstance() instanceof HellLucidBoss)
                     && !(this.getMap().getFieldSetInstance() instanceof HellDemianBoss)
                     && !(this.getMap().getFieldSetInstance() instanceof HellBlackHeavenBoss)
                     && !(this.getMap().getFieldSetInstance() instanceof HellWillBoss)
                     && !(this.getMap().getFieldSetInstance() instanceof HellDunkelBoss)) {
            if (this.getParty() != null
                  && this.isMultiMode()
                  && (bossID == 8800002
                        || bossID == 8800102
                        || bossID == 8880000
                        || bossID == 8880002
                        || bossID == 8500012
                        || bossID == 8500022
                        || bossID == 8840007
                        || bossID == 8840000
                        || bossID == 8840014
                        || bossID == 8900100
                        || bossID == 8900000
                        || bossID == 8910100
                        || bossID == 8910000
                        || bossID == 8930100
                        || bossID == 8930000
                        || bossID == 8840000
                        || bossID == 8810018
                        || bossID == 8810122
                        || bossID == 8850012
                        || bossID == 8850112
                        || bossID == 8860000
                        || bossID == 8820001
                        || bossID == 8820212
                        || bossID == 8850011
                        || bossID == 8920106
                        || bossID == 8920006
                        || bossID == 8950109
                        || bossID == 8950110
                        || bossID == 8950111
                        || bossID == 8950112
                        || bossID == 8880167
                        || bossID == 8880177
                        || bossID == 8950113
                        || bossID == 8950114
                        || bossID == 8950115
                        || bossID == 8950116
                        || bossID == 8950117
                        || bossID == 8950118
                        || bossID == 8950119
                        || bossID == 8950120
                        || bossID == 8950121
                        || bossID == 8880726
                        || bossID == 8880725
                        || bossID == 8880614
                        || bossID == 8880644)) {
               this.gainTogetherPoint(10);
               this.dropMessage(5, "협동포인트를 10 얻었습니다. 누적 : " + this.getTogetherPoint());
               this.setMultiMode(false);
            }
         }
      }
   }

   public void addGuildContributionByBoss(int bossID) {
      int point = 0;
      boolean sameGuildInParty = false;
      if (this.getParty() != null && this.getGuild() != null) {
         for (MapleCharacter mpc : new ArrayList<>(this.getPartyMembers())) {
            if (mpc.getId() != this.getId() && mpc.getGuildId() != 0 && mpc.getMapId() == this.getMapId()
                  && mpc.getGuildId() == this.getGuildId()) {
               sameGuildInParty = true;
            }
         }
      }

      if (bossID == 8800002) {
         point = 100;
         if (sameGuildInParty) {
            point = 600;
         }
      } else if (bossID == 8880000) {
         point = 500;
         if (sameGuildInParty) {
            point = 2500;
         }

         if (DBConfig.isGanglim) {
            int point_ = Randomizer.rand(20, 25);
            int value = this.getOneInfoQuestInteger(100779, "point");
            this.updateOneInfo(100779, "point", String.valueOf(value + point_));
            this.dropMessage(5, point_ + " 보스 포인트를 획득했습니다.");
         }
      } else if (bossID == 8500012) {
         point = 500;
         if (sameGuildInParty) {
            point = 2500;
         }
      } else if (bossID == 8920100) {
         point = 150;
         if (sameGuildInParty) {
            point = 1150;
         }
      } else if (bossID == 8900000) {
         point = 150;
         if (sameGuildInParty) {
            point = 1150;
         }

         if (DBConfig.isGanglim) {
            int point_ = Randomizer.rand(10, 15);
            int value = this.getOneInfoQuestInteger(100779, "point");
            this.updateOneInfo(100779, "point", String.valueOf(value + point_));
            this.dropMessage(5, point_ + " 보스 포인트를 획득했습니다.");
         }
      } else if (bossID == 8910000) {
         point = 150;
         if (sameGuildInParty) {
            point = 1150;
         }

         if (DBConfig.isGanglim) {
            int point_ = Randomizer.rand(10, 15);
            int value = this.getOneInfoQuestInteger(100779, "point");
            this.updateOneInfo(100779, "point", String.valueOf(value + point_));
            this.dropMessage(5, point_ + " 보스 포인트를 획득했습니다.");
         }
      } else if (bossID == 8930000) {
         point = 150;
         if (sameGuildInParty) {
            point = 1150;
         }

         if (DBConfig.isGanglim) {
            int point_ = Randomizer.rand(20, 25);
            int value = this.getOneInfoQuestInteger(100779, "point");
            this.updateOneInfo(100779, "point", String.valueOf(value + point_));
            this.dropMessage(5, point_ + " 보스 포인트를 획득했습니다.");
         }
      } else if (bossID == 8840000) {
         point = 500;
         if (sameGuildInParty) {
            point = 2500;
         }
      } else if (bossID == 8810018) {
         point = 150;
         if (sameGuildInParty) {
            point = 1150;
         }
      } else if (bossID == 8810122) {
         point = 250;
         if (sameGuildInParty) {
            point = 1750;
         }
      } else if (bossID == 8860000) {
         point = 500;
         if (sameGuildInParty) {
            point = 2500;
         }
      } else if (bossID == 8820210) {
         point = 500;
         if (sameGuildInParty) {
            point = 2500;
         }
      } else if (bossID == 8850011) {
         point = 500;
         if (sameGuildInParty) {
            point = 2500;
         }
      } else if (bossID == 8800102) {
         point = 1000;
         if (sameGuildInParty) {
            point = 3000;
         }

         if (DBConfig.isGanglim) {
            int point_ = Randomizer.rand(10, 15);
            int value = this.getOneInfoQuestInteger(100779, "point");
            this.updateOneInfo(100779, "point", String.valueOf(value + point_));
            this.dropMessage(5, point_ + " 보스 포인트를 획득했습니다.");
         }
      } else if (bossID == 8500022) {
         point = 1000;
         if (sameGuildInParty) {
            point = 3000;
         }

         if (DBConfig.isGanglim) {
            int point_ = Randomizer.rand(30, 35);
            int value = this.getOneInfoQuestInteger(100779, "point");
            this.updateOneInfo(100779, "point", String.valueOf(value + point_));
            this.dropMessage(5, point_ + " 보스 포인트를 획득했습니다.");
         }
      } else if (bossID == 8920000) {
         point = 1000;
         if (sameGuildInParty) {
            point = 3000;
         }

         if (DBConfig.isGanglim) {
            int point_ = Randomizer.rand(10, 15);
            int value = this.getOneInfoQuestInteger(100779, "point");
            this.updateOneInfo(100779, "point", String.valueOf(value + point_));
            this.dropMessage(5, point_ + " 보스 포인트를 획득했습니다.");
         }
      } else if (bossID != 8950002 && bossID != 8950102) {
         if (bossID != 8880111 && bossID != 8880101) {
            if (bossID == 8880153 || bossID == 8880150) {
               point = 1500;
               if (sameGuildInParty) {
                  point = 4500;
               }

               if (bossID == 8880153) {
                  if (DBConfig.isGanglim) {
                     int point_ = Randomizer.rand(60, 65);
                     int value = this.getOneInfoQuestInteger(100779, "point");
                     this.updateOneInfo(100779, "point", String.valueOf(value + point_));
                     this.dropMessage(5, point_ + " 보스 포인트를 획득했습니다.");
                  }
               } else if (DBConfig.isGanglim) {
                  int point_ = Randomizer.rand(40, 45);
                  int value = this.getOneInfoQuestInteger(100779, "point");
                  this.updateOneInfo(100779, "point", String.valueOf(value + point_));
                  this.dropMessage(5, point_ + " 보스 포인트를 획득했습니다.");
               }
            } else if (bossID != 8880302 && bossID != 8880342 && bossID != 8880362) {
               if (bossID == 8644655 || bossID == 8644650 || bossID == 8880700 || bossID == 8880711) {
                  point = 1500;
                  if (sameGuildInParty) {
                     point = 4500;
                  }

                  if (bossID != 8644655 && bossID != 8880700) {
                     if (DBConfig.isGanglim) {
                        int point_ = Randomizer.rand(40, 45);
                        int value = this.getOneInfoQuestInteger(100779, "point");
                        this.updateOneInfo(100779, "point", String.valueOf(value + point_));
                        this.dropMessage(5, point_ + " 보스 포인트를 획득했습니다.");
                     }
                  } else if (DBConfig.isGanglim) {
                     int point_ = Randomizer.rand(70, 75);
                     int value = this.getOneInfoQuestInteger(100779, "point");
                     this.updateOneInfo(100779, "point", String.valueOf(value + point_));
                     this.dropMessage(5, point_ + " 보스 포인트를 획득했습니다.");
                  }
               } else if (bossID == 8645066 || bossID == 8645009 || bossID == 8880602 || bossID == 8880632) {
                  point = 1500;
                  if (sameGuildInParty) {
                     point = 4500;
                  }

                  if (bossID != 8645066 && bossID != 8880602 && bossID != 8880632) {
                     if (DBConfig.isGanglim) {
                        int point_ = Randomizer.rand(40, 45);
                        int value = this.getOneInfoQuestInteger(100779, "point");
                        this.updateOneInfo(100779, "point", String.valueOf(value + point_));
                        this.dropMessage(5, point_ + " 보스 포인트를 획득했습니다.");
                     }
                  } else if (DBConfig.isGanglim) {
                     int point_ = Randomizer.rand(70, 75);
                     int value = this.getOneInfoQuestInteger(100779, "point");
                     this.updateOneInfo(100779, "point", String.valueOf(value + point_));
                     this.dropMessage(5, point_ + " 보스 포인트를 획득했습니다.");
                  }
               } else if (bossID == 8880504) {
                  point = 2000;
                  if (sameGuildInParty) {
                     point = 5000;
                  }

                  if (DBConfig.isGanglim) {
                     int point_ = Randomizer.rand(200, 250);
                     int value = this.getOneInfoQuestInteger(100779, "point");
                     this.updateOneInfo(100779, "point", String.valueOf(value + point_));
                     this.dropMessage(5, point_ + " 보스 포인트를 획득했습니다.");
                  }
               }
            } else {
               if (bossID == 8880302) {
                  if (DBConfig.isGanglim) {
                     int point_ = Randomizer.rand(60, 65);
                     int value = this.getOneInfoQuestInteger(100779, "point");
                     this.updateOneInfo(100779, "point", String.valueOf(value + point_));
                     this.dropMessage(5, point_ + " 보스 포인트를 획득했습니다.");
                  }
               } else if (DBConfig.isGanglim) {
                  int point_ = Randomizer.rand(40, 45);
                  int value = this.getOneInfoQuestInteger(100779, "point");
                  this.updateOneInfo(100779, "point", String.valueOf(value + point_));
                  this.dropMessage(5, point_ + " 보스 포인트를 획득했습니다.");
               }

               point = 1500;
               if (sameGuildInParty) {
                  point = 4500;
               }
            }
         } else {
            if (bossID == 8880101) {
               if (DBConfig.isGanglim) {
                  int point_ = Randomizer.rand(60, 65);
                  int value = this.getOneInfoQuestInteger(100779, "point");
                  this.updateOneInfo(100779, "point", String.valueOf(value + point_));
                  this.dropMessage(5, point_ + " 보스 포인트를 획득했습니다.");
               }
            } else if (DBConfig.isGanglim) {
               int point_ = Randomizer.rand(30, 35);
               int value = this.getOneInfoQuestInteger(100779, "point");
               this.updateOneInfo(100779, "point", String.valueOf(value + point_));
               this.dropMessage(5, point_ + " 보스 포인트를 획득했습니다.");
            }

            point = 1500;
            if (sameGuildInParty) {
               point = 4500;
            }
         }
      } else {
         if (bossID == 8950102) {
            this.updateOneInfo(100813, "bossPoint",
                  String.valueOf(this.getOneInfoQuestInteger(100813, "bossPoint") + 30));
            if (DBConfig.isGanglim) {
               int point_ = Randomizer.rand(30, 35);
               int value = this.getOneInfoQuestInteger(100779, "point");
               this.updateOneInfo(100779, "point", String.valueOf(value + point_));
               this.dropMessage(5, point_ + " 보스 포인트를 획득했습니다.");
            }
         } else {
            this.updateOneInfo(100813, "bossPoint",
                  String.valueOf(this.getOneInfoQuestInteger(100813, "bossPoint") + 60));
            if (DBConfig.isGanglim) {
               int point_ = Randomizer.rand(60, 65);
               int value = this.getOneInfoQuestInteger(100779, "point");
               this.updateOneInfo(100779, "point", String.valueOf(value + point_));
               this.dropMessage(5, point_ + " 보스 포인트를 획득했습니다.");
            }
         }

         point = 1500;
         if (sameGuildInParty) {
            point = 4500;
         }
      }

      if (this.getGuild() != null) {
         try {
            AchievementFactory.checkGuildCommitmentInc(this, point);
         } catch (Exception var6) {
            System.out.println("GuildCommitment Err");
            var6.printStackTrace();
         }

         this.addGuildBossPointByBossID(bossID);
         this.addGuildContribution(point);
      }
   }

   public void addGuildContribution(int _c) {
      int canUp = Math.max(0, 5000 - this.getTodayContribution());
      if (this.isGM() || this.getClient().isGm()) {
         canUp = Integer.MAX_VALUE;
      }

      int delta = Math.min(canUp, _c);
      if (DBConfig.isGanglim && _c == 1215000) {
         delta = _c;
      }

      this.guildContribution += delta;
      this.setTodayContribution(this.getTodayContribution() + delta);

      for (GuildCharacter mgc : this.getGuild().getMembers()) {
         if (this.getId() == mgc.getId()) {
            mgc.addGuildContribution(delta);
         }
      }

      int max = 100000000;
      int maxCommitment = this.getGuild().getHonorEXP() >= max ? 1 : 0;
      this.send(CWvsContext.InfoPacket.getCommitmentMsg(delta, maxCommitment));
   }

   public void addGuildBossPointByBossID(int bossID) {
      Date now = new Date();
      int day = now.getDay();
      int hour = now.getHours();
      int minute = now.getMinutes();
      if ((day != 0 || hour != 23 || minute <= 0) && (day != 1 || hour >= 1)) {
         SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMddHHmm");
         if (this.getOneInfoQuestLong(100813, "d") > 0L) {
            Date lastTime = null;

            try {
               lastTime = sdf.parse(this.getOneInfo(100813, "d"));
            } catch (Exception var9) {
               System.out.println("GuildBossPoint Err");
               var9.printStackTrace();
               lastTime = null;
            }

            if (lastTime != null) {
               Calendar cal = Calendar.getInstance();
               cal.setTime(lastTime);
               cal.set(7, 2);
               cal.set(10, 0);
               cal.set(12, 0);
               cal.set(13, 0);
               cal.set(14, 0);
               cal.set(11, 0);
               cal.set(5, cal.getTime().getDate() + 7);
               if (cal.getTime().getTime() <= new Date().getTime()) {
                  this.updateOneInfo(100813, "huntPoint", "0");
                  this.updateOneInfo(100813, "bossPoint", "0");
               }
            }
         }

         this.updateOneInfo(100813, "d", sdf.format(new Date()));
         if (bossID < 0) {
            this.updateOneInfo(100813, "huntPoint",
                  String.valueOf(Math.min(25000, this.getOneInfoQuestInteger(100813, "huntPoint") + 1)));
            if (this.getOneInfoQuestInteger(100813, "huntPoint") % 5000 == 0) {
               int huntPoint = this.getOneInfoQuestInteger(100813, "huntPoint") / 5000;
               int bossPoint = this.getOneInfoQuestInteger(100813, "bossPoint") / 80;
               this.getGuild().setPointLog(GuildContentsType.WEEK_MISSIONS, this, Math.min(5, huntPoint + bossPoint));
            }
         } else {
            switch (bossID) {
               case 8500022:
               case 8880111:
               case 8880362:
               case 8880711:
               case 8950102:
                  this.updateOneInfo(100813, "bossPoint",
                        String.valueOf(this.getOneInfoQuestInteger(100813, "bossPoint") + 30));
                  break;
               case 8644650:
               case 8645009:
               case 8880150:
               case 8880342:
                  this.updateOneInfo(100813, "bossPoint",
                        String.valueOf(this.getOneInfoQuestInteger(100813, "bossPoint") + 40));
                  break;
               case 8644655:
               case 8645066:
               case 8880405:
               case 8880410:
               case 8880614:
               case 8880644:
                  this.updateOneInfo(100813, "bossPoint",
                        String.valueOf(this.getOneInfoQuestInteger(100813, "bossPoint") + 70));
                  break;
               case 8800102:
               case 8900000:
               case 8910000:
               case 8920000:
                  this.updateOneInfo(100813, "bossPoint",
                        String.valueOf(this.getOneInfoQuestInteger(100813, "bossPoint") + 10));
                  break;
               case 8820212:
               case 8850011:
               case 8850111:
               case 8870100:
                  this.updateOneInfo(100813, "bossPoint",
                        String.valueOf(this.getOneInfoQuestInteger(100813, "bossPoint") + 5));
                  break;
               case 8880000:
               case 8930000:
                  this.updateOneInfo(100813, "bossPoint",
                        String.valueOf(this.getOneInfoQuestInteger(100813, "bossPoint") + 20));
                  break;
               case 8880101:
               case 8880153:
               case 8880302:
               case 8880700:
               case 8950002:
                  this.updateOneInfo(100813, "bossPoint",
                        String.valueOf(this.getOneInfoQuestInteger(100813, "bossPoint") + 60));
            }

            int huntPoint = this.getOneInfoQuestInteger(100813, "huntPoint") / 5000;
            int bossPoint = this.getOneInfoQuestInteger(100813, "bossPoint") / 80;
            this.getGuild().setPointLog(GuildContentsType.WEEK_MISSIONS, this, Math.min(5, huntPoint + bossPoint));
         }
      }
   }

   public GuildCharacter getMGC() {
      return this.mgc;
   }

   public void setAllianceRank(byte rank) {
      this.allianceRank = rank;
      if (this.mgc != null) {
         this.mgc.setAllianceRank(rank);
      }
   }

   public byte getAllianceRank() {
      return this.allianceRank;
   }

   public Guild getGuild() {
      return this.getGuildId() <= 0 ? null : Center.Guild.getGuild(this.getGuildId());
   }

   public void setJob(int j) {
      this.job = (short) j;
   }

   public void guildUpdate() {
      if (this.guildid > 0) {
         this.mgc.setLevel(this.level);
         this.mgc.setJobId(this.job);
         Center.Guild.memberLevelJobUpdate(this.mgc);
      }
   }

   public void saveGuildStatus() {
      Guild.setOfflineGuildStatus(this.guildid, this.guildrank, this.guildContribution, this.allianceRank, this.id);
   }

   public void modifyCSPoints(int type, int quantity) {
      this.modifyCSPoints(type, quantity, false);
   }

   public void modifyCSPoints(int type, int quantity, boolean show) {
      switch (type) {
         case 1:
            if (this.nxcredit + quantity < 0) {
               if (show) {
                  this.dropMessage(-1, "You have gained the max cash. No cash will be awarded.");
               }

               return;
            }

            this.nxcredit += quantity;
            break;
         case 2:
            if (this.maplepoints + quantity < 0) {
               if (show) {
                  this.dropMessage(-1, "You have gained the max maple points. No cash will be awarded.");
               }

               return;
            }

            this.maplepoints += quantity;
            this.client.getSession().writeAndFlush(CWvsContext.updateMaplePoint(this.maplepoints));
         case 3:
         default:
            break;
         case 4:
            if (this.acash + quantity < 0) {
               if (show) {
                  this.dropMessage(-1, "You have gained the max cash. No cash will be awarded.");
               }

               return;
            }

            this.acash += quantity;
      }

      if (show && quantity != 0) {
         this.dropMessage(-1, quantity + (type == 1 ? " 캐시를 " : " 메이플포인트를 ") + (quantity > 0 ? "얻었습니다." : "잃었습니다."));
      }
   }

   public int getCSPoints(int type) {
      switch (type) {
         case 1:
            return this.nxcredit;
         case 2:
            return this.maplepoints;
         case 3:
         default:
            return 0;
         case 4:
            return this.acash;
      }
   }

   public final boolean hasEquipped(int itemid) {
      return this.inventory[MapleInventoryType.EQUIPPED.ordinal()].countById(itemid) >= 1;
   }

   public final boolean haveItem(int itemid, int quantity, boolean checkEquipped, boolean greaterOrEquals) {
      MapleInventoryType type = GameConstants.getInventoryType(itemid);
      if (itemid / 1000000 == 1 && MapleItemInformationProvider.getInstance().isCash(itemid)) {
         type = MapleInventoryType.CASH_EQUIP;
      }

      int possesed = this.inventory[type.ordinal()].countById(itemid);
      if (checkEquipped && type == MapleInventoryType.EQUIP) {
         possesed += this.inventory[MapleInventoryType.EQUIPPED.ordinal()].countById(itemid);
      }

      return greaterOrEquals ? possesed >= quantity : possesed == quantity;
   }

   public final boolean haveItem(int itemid, int quantity) {
      return this.haveItem(itemid, quantity, true, true);
   }

   public final boolean haveItem(int itemid) {
      return this.haveItem(itemid, 1, true, true);
   }

   public RandomPortal getRandomPortal() {
      return this.randomPortal;
   }

   public void setRandomPortal(RandomPortal randomPortal) {
      this.randomPortal = randomPortal;
   }

   public void removeRandomPortal() {
      RandomPortal portal = this.getRandomPortal();
      if (portal != null) {
         this.send(CField.randomPortalRemoved(portal));
         this.setRandomPortal(null);
      }
   }

   public boolean isEnterRandomPortal() {
      return this.enterRandomPortal;
   }

   public void setEnterRandomPortal(boolean enterRandomPortal) {
      this.enterRandomPortal = enterRandomPortal;
   }

   public long getRandomPortalSpawnedTime() {
      return this.randomPortalSpawnedTime;
   }

   public void setRandomPortalSpawnedTime(long randomPortalSpawnedTime) {
      this.randomPortalSpawnedTime = randomPortalSpawnedTime;
   }

   public long getEnterFlameWolfTime() {
      return this.enterFlameWolfTime;
   }

   public void setEnterFlameWolfTime(long enterFlameWolfTime) {
      this.enterFlameWolfTime = enterFlameWolfTime;
   }

   public long getFlameWolfTotalDamage() {
      return this.flameWolfTotalDamage;
   }

   public void setFlameWolfTotalDamage(long flameWolfTotalDamage) {
      this.flameWolfTotalDamage = flameWolfTotalDamage;
   }

   public long getmParkExp() {
      return this.mParkExp;
   }

   public void setmParkExp(long mParkExp) {
      this.mParkExp = mParkExp;
   }

   public int getActiveRelicUnboundCount() {
      return this.activeRelicUnboundCount;
   }

   public void setActiveRelicUnboundCount(int activeRelicUnboundCount) {
      this.activeRelicUnboundCount = activeRelicUnboundCount;
   }

   public int getLiberationOrbDarkMad() {
      return this.liberationOrbDarkMad;
   }

   public void setLiberationOrbDarkMad(int liberationOrbDarkMad) {
      this.liberationOrbDarkMad = liberationOrbDarkMad;
   }

   public int getLiberationOrbLightMad() {
      return this.liberationOrbLightMad;
   }

   public void setLiberationOrbLightMad(int liberationOrbLightMad) {
      this.liberationOrbLightMad = liberationOrbLightMad;
   }

   public int getRevenantRage() {
      return this.revenantRage;
   }

   public void setRevenantRage(int revenantRage) {
      this.revenantRage = revenantRage;
   }

   public int getRemainRevenantCount() {
      return this.remainRevenantCount;
   }

   public void setRemainRevenantCount(int remainRevenantCount) {
      this.remainRevenantCount = remainRevenantCount;
   }

   public int getPhotonRayCharge() {
      return this.photonRayCharge;
   }

   public void setPhotonRayCharge(int photonRayCharge) {
      this.photonRayCharge = photonRayCharge;
   }

   public int getDojangChallengeMode() {
      return this.dojangChallengeMode;
   }

   public void setDojangChallengeMode(int dojangChallengeMode) {
      this.dojangChallengeMode = dojangChallengeMode;
   }

   public WorldLvChairInfo getChairInfo() {
      return this.chairInfo;
   }

   public void setChairInfo(WorldLvChairInfo chairInfo) {
      this.chairInfo = chairInfo;
   }

   public List<Pair<String, Integer>> getPopChairInfos() {
      return this.popChairInfos;
   }

   public void setPopChairInfos(List<Pair<String, Integer>> popChairInfos) {
      this.popChairInfos = popChairInfos;
   }

   public Map<Integer, Integer> getCodyVoteChairInfo() {
      return this.codyVoteChairInfo;
   }

   public final int getCodyVote(int preset) {
      int vote = 0;

      try {
         for (int value : this.codyVoteChairInfo.values()) {
            if (value == preset) {
               vote++;
            }
         }
      } catch (Exception var5) {
      }

      return vote;
   }

   public boolean isAlreadyCodyVote(int chrID) {
      try {
         return this.codyVoteChairInfo.get(chrID) != null;
      } catch (Exception var3) {
         return false;
      }
   }

   public void setCodyVote(int chrID, int preset) {
      try {
         this.codyVoteChairInfo.put(chrID, preset);
      } catch (Exception var4) {
      }
   }

   public void clearCodyVote() {
      try {
         this.codyVoteChairInfo.clear();
      } catch (Exception var2) {
      }
   }

   public int getDojangChairFloor() {
      return this.dojangChairFloor;
   }

   public void setDojangChairFloor(int dojangChairFloor) {
      this.dojangChairFloor = dojangChairFloor;
   }

   public int getDarknessAuraStack() {
      return this.darknessAuraStack;
   }

   public void setDarknessAuraStack(int darknessAuraStack) {
      this.darknessAuraStack = darknessAuraStack;
   }

   public int getPoolMakerRemain() {
      return this.poolMakerRemain;
   }

   public void setPoolMakerRemain(int poolMakerRemain) {
      this.poolMakerRemain = poolMakerRemain;
   }

   public CustomChair getCustomChair() {
      return this.customChair;
   }

   public void setCustomChair(CustomChair customChair) {
      this.customChair = customChair;
   }

   public int getChairEmotion() {
      return this.chairEmotion;
   }

   public void setChairEmotion(int chairEmotion) {
      this.chairEmotion = chairEmotion;
   }

   public boolean isDisableEquipChange() {
      return this.disableEquipChange;
   }

   public void setDisableEquipChange(boolean disableEquipChange) {
      this.disableEquipChange = disableEquipChange;
   }

   public boolean isBmQuestBoss() {
      return this.bmQuestBoss;
   }

   public void setBmQuestBoss(boolean bmQuestBoss) {
      this.bmQuestBoss = bmQuestBoss;
   }

   public JupiterThunder getJupiterThunder() {
      return this.jupiterThunder;
   }

   public void setJupiterThunder(JupiterThunder jupiterThunder) {
      this.jupiterThunder = jupiterThunder;
   }

   public int getHolyMagicShellW() {
      return this.holyMagicShellW;
   }

   public void setHolyMagicShellW(int holyMagicShellW) {
      this.holyMagicShellW = holyMagicShellW;
   }

   public SecondaryStat getSecondaryStat() {
      return this.secondaryStat == null ? new SecondaryStat(this) : this.secondaryStat;
   }

   public void setSecondaryStat(SecondaryStat secondaryStat) {
      this.secondaryStat = secondaryStat;
   }

   public BuyLimit getBuyLimit() {
      return this.buyLimit;
   }

   public void setBuyLimit(BuyLimit buyLimit) {
      this.buyLimit = buyLimit;
   }

   public WorldBuyLimit getWorldBuyLimit() {
      return this.worldBuyLimit;
   }

   public void setWorldBuyLimit(WorldBuyLimit worldBuyLimit) {
      this.worldBuyLimit = worldBuyLimit;
   }

   public int getAccountTotalLevel() {
      return this.accountTotalLevel;
   }

   public void setAccountTotalLevel(int accountTotalLevel) {
      this.accountTotalLevel = accountTotalLevel;
   }

   public PraisePoint getPraisePoint() {
      return this.praisePoint;
   }

   public void setPraisePoint(PraisePoint praisePoint) {
      this.praisePoint = praisePoint;
   }

   public Map<Integer, Long> getConsumeItemLimits() {
      return this.consumeItemLimits;
   }

   public void setConsumeItemLimits(Map<Integer, Long> consumeItemLimits) {
      this.consumeItemLimits = consumeItemLimits;
   }

   public List<Integer> getDarknessOmenTargets() {
      return this.darknessOmenTargets;
   }

   public void setDarknessOmenTargets(List<Integer> darknessOmenTargets) {
      this.darknessOmenTargets = darknessOmenTargets;
   }

   public int getDarknessOmenBatCount() {
      return this.darknessOmenBatCount;
   }

   public void setDarknessOmenBatCount(int darknessOmenBatCount) {
      this.darknessOmenBatCount = darknessOmenBatCount;
   }

   public Point getCrystalControlPos() {
      return this.crystalControlPos;
   }

   public void setCrystalControlPos(Point crystalControlPos) {
      this.crystalControlPos = crystalControlPos;
   }

   public int getSecondBaseColor() {
      return this.secondBaseColor;
   }

   public void setSecondBaseColor(int secondBaseColor) {
      this.secondBaseColor = secondBaseColor;
   }

   public int getSecondAddColor() {
      return this.secondAddColor;
   }

   public void setSecondAddColor(int secondAddColor) {
      this.secondAddColor = secondAddColor;
   }

   public int getSecondBaseProb() {
      return this.secondBaseProb;
   }

   public void setSecondBaseProb(int secondBaseProb) {
      this.secondBaseProb = secondBaseProb;
   }

   public long getLastEmpressCygnussBlessTime() {
      return this.lastEmpressCygnussBlessTime;
   }

   public void setLastEmpressCygnussBlessTime(long lastEmpressCygnussBlessTime) {
      this.lastEmpressCygnussBlessTime = lastEmpressCygnussBlessTime;
   }

   public double getDuskGauge() {
      return this.duskGauge;
   }

   public void setDuskGauge(double duskGauge) {
      this.duskGauge = duskGauge;
   }

   public long getLastSpawnFearMonsterTime() {
      return this.lastSpawnFearMonsterTime;
   }

   public void setLastSpawnFearMonsterTime(long lastSpawnFearMonsterTime) {
      this.lastSpawnFearMonsterTime = lastSpawnFearMonsterTime;
   }

   public Map<Long, IntensePowerCrystal> getIntensePowerCrystals() {
      return this.intensePowerCrystals;
   }

   public void setIntensePowerCrystals(Map<Long, IntensePowerCrystal> intensePowerCrystals) {
      this.intensePowerCrystals = intensePowerCrystals;
   }

   public void removeIntensePowerCrystal(long uniqueID) {
      this.intensePowerCrystals.remove(uniqueID);
   }

   public long getLastDecrementDeathCountTime() {
      return this.lastDecrementDeathCountTime;
   }

   public void setLastDecrementDeathCountTime(long lastDecrementDeathCountTime) {
      this.lastDecrementDeathCountTime = lastDecrementDeathCountTime;
   }

   public long getLastMoveTime() {
      return this.lastMoveTime;
   }

   public void setLastMoveTime(long lastMoveTime) {
      this.lastMoveTime = lastMoveTime;
   }

   public KainStackSkill getKainStackSKill() {
      return this.kainStackSKill;
   }

   public void setKainStackSKill(KainStackSkill kainStackSKill) {
      this.kainStackSKill = kainStackSKill;
   }

   public int getGrapplingWireX() {
      return this.grapplingWireX;
   }

   public void setGrapplingWireX(int grapplingWireX) {
      this.grapplingWireX = grapplingWireX;
   }

   public int getNotMovingCount() {
      return this.notMovingCount;
   }

   public void setNotMovingCount(int notMovingCount) {
      this.notMovingCount = notMovingCount;
   }

   public int getAdvancedDeathBlessingX() {
      return this.advancedDeathBlessingX;
   }

   public void setAdvancedDeathBlessingX(int advancedDeathBlessingX) {
      this.advancedDeathBlessingX = advancedDeathBlessingX;
   }

   public boolean isCanAttackLucidRewardMob() {
      return this.canAttackLucidRewardMob;
   }

   public void setCanAttackLucidRewardMob(boolean canAttackLucidRewardMob) {
      this.canAttackLucidRewardMob = canAttackLucidRewardMob;
   }

   public boolean isCanAttackBMRewardMob() {
      return this.canAttackBMRewardMob;
   }

   public void setCanAttackBMRewardMob(boolean canAttackBMRewardMob) {
      this.canAttackBMRewardMob = canAttackBMRewardMob;
   }

   public int getTodayContribution() {
      return this.todayContribution;
   }

   public void setTodayContribution(int todayContribution) {
      this.todayContribution = todayContribution;
   }

   public int getCurrentBossPhase() {
      return this.currentBossPhase;
   }

   public void setCurrentBossPhase(int currentBossPhase) {
      this.currentBossPhase = currentBossPhase;
   }

   public int getMiniGameTeam() {
      return this.miniGameTeam;
   }

   public void setMiniGameTeam(int miniGameTeam) {
      this.miniGameTeam = miniGameTeam;
   }

   public int getNextTransferMinigameField() {
      return this.nextTransferMinigameField;
   }

   public void setNextTransferMinigameField(int nextTransferMinigameField) {
      this.nextTransferMinigameField = nextTransferMinigameField;
   }

   public long getNextTransferMinigameFieldTime() {
      return this.nextTransferMinigameFieldTime;
   }

   public void setNextTransferMinigameFieldTime(long nextTransferMinigameFieldTime) {
      this.nextTransferMinigameFieldTime = nextTransferMinigameFieldTime;
   }

   public Mannequin getHairMannequin() {
      return this.hairMannequin;
   }

   public void setHairMannequin(Mannequin hairMannequin) {
      this.hairMannequin = hairMannequin;
   }

   public Mannequin getFaceMannequin() {
      return this.faceMannequin;
   }

   public void setFaceMannequin(Mannequin faceMannequin) {
      this.faceMannequin = faceMannequin;
   }

   public Mannequin getSkinMannequin() {
      return this.skinMannequin;
   }

   public void setSkinMannequin(Mannequin skinMannequin) {
      this.skinMannequin = skinMannequin;
   }

   public long getLastDecHPrTime() {
      return this.lastDecHPrTime;
   }

   public void setLastDecHPrTime(long lastDecHPrTime) {
      this.lastDecHPrTime = lastDecHPrTime;
   }

   public BasicJob getPlayerJob() {
      return this.playerBasicJob;
   }

   public ZeroInfo getZeroInfo() {
      return this.zeroInfo;
   }

   public void setZeroInfo(ZeroInfo zeroInfo) {
      this.zeroInfo = zeroInfo;
   }

   public int getMagnetAreaFrom() {
      return this.magnetAreaFrom;
   }

   public void setMagnetAreaFrom(int magnetAreaFrom) {
      this.magnetAreaFrom = magnetAreaFrom;
   }

   public int getWp() {
      return this.wp;
   }

   public void setWp(int wp) {
      this.wp = wp;
   }

   public long getLastSunlightFilledGroundHealTime() {
      return this.lastSunlightFilledGroundHealTime;
   }

   public void setLastSunlightFilledGroundHealTime(long lastSunlightFilledGroundHealTime) {
      this.lastSunlightFilledGroundHealTime = lastSunlightFilledGroundHealTime;
   }

   public long getLastSunlightSproutTime() {
      return this.lastSunlightSproutTime;
   }

   public void setLastSunlightSproutTime(long lastSunlightSproutTime) {
      this.lastSunlightSproutTime = lastSunlightSproutTime;
   }

   public long getLastDesolateWindsTime() {
      return this.lastDesolateWindsTime;
   }

   public void setLastDesolateWindsTime(long lastDesolateWindsTime) {
      this.lastDesolateWindsTime = lastDesolateWindsTime;
   }

   public long getLastRiverPuddleDrenchTime() {
      return this.lastRiverPuddleDrenchTime;
   }

   public void setLastRiverPuddleDrenchTime(long lastRiverPuddleDrenchTime) {
      this.lastRiverPuddleDrenchTime = lastRiverPuddleDrenchTime;
   }

   public long getLastBreathtakinglyLargeTreeTime() {
      return this.lastBreathtakinglyLargeTreeTime;
   }

   public void setLastBreathtakinglyLargeTreeTime(long lastBreathtakinglyLargeTreeTime) {
      this.lastBreathtakinglyLargeTreeTime = lastBreathtakinglyLargeTreeTime;
   }

   public boolean isUnequipPants() {
      return this.unequipPants;
   }

   public void setUnequipPants(boolean unequipPants) {
      this.unequipPants = unequipPants;
   }

   public boolean isStartBMQuest6() {
      return this.startBMQuest6;
   }

   public void setStartBMQuest6(boolean startBMQuest6) {
      this.startBMQuest6 = startBMQuest6;
   }

   public boolean isStartBMQuest7() {
      return this.startBMQuest7;
   }

   public void setStartBMQuest7(boolean startBMQuest7) {
      this.startBMQuest7 = startBMQuest7;
   }

   public boolean isStartBMQuest8() {
      return this.startBMQuest8;
   }

   public void setStartBMQuest8(boolean startBMQuest8) {
      this.startBMQuest8 = startBMQuest8;
   }

   public boolean isStartBMQuest9() {
      return this.startBMQuest9;
   }

   public void setStartBMQuest9(boolean startBMQuest9) {
      this.startBMQuest9 = startBMQuest9;
   }

   public Pair<Integer, Integer> getEquippedSpecialCore() {
      return this.equippedSpecialCore;
   }

   public void setEquippedSpecialCore(Pair<Integer, Integer> equippedSpecialCore) {
      this.equippedSpecialCore = equippedSpecialCore;
   }

   public int getSpAttackCountMobId() {
      return this.spAttackCountMobId;
   }

   public void setSpAttackCountMobId(int spAttackCountMobId) {
      this.spAttackCountMobId = spAttackCountMobId;
   }

   public int getSpCount() {
      return this.spCount;
   }

   public void setSpCount(int spCount) {
      this.spCount = spCount;
   }

   public void gainSpCount(int spCount) {
      this.spCount += spCount;
   }

   public long getSpLastValidTime() {
      return this.spLastValidTime;
   }

   public void setSpLastValidTime(long spLastValidTime) {
      this.spLastValidTime = spLastValidTime;
   }

   public int getSerenGauge() {
      return this.serenGauge;
   }

   public void setSerenGauge(int maxGauge, int serenGauge) {
      this.serenGauge = Math.max(0, Math.min(maxGauge, serenGauge));
   }

   public long getSerenCanAddShieldTime() {
      return this.serenCanAddShieldTime;
   }

   public void setSerenCanAddShieldTime(long serenCanAddShieldTime) {
      this.serenCanAddShieldTime = serenCanAddShieldTime;
   }

   public List<BlackList> getBlackLists() {
      return this.blackLists;
   }

   public void setBlackLists(List<BlackList> blackLists) {
      this.blackLists = blackLists;
   }

   public BlackList getBlackListByDenoteName(String denoteName) {
      for (BlackList blackList : this.blackLists) {
         if (blackList.getDenoteName().equals(denoteName)) {
            return blackList;
         }
      }

      return null;
   }

   public long getLastActiveCrystalGateAttackTime() {
      return this.lastActiveCrystalGateAttackTime;
   }

   public void setLastActiveCrystalGateAttackTime(long lastActiveCrystalGateAttackTime) {
      this.lastActiveCrystalGateAttackTime = lastActiveCrystalGateAttackTime;
   }

   public boolean isBossHellMode() {
      return this.bossHellMode;
   }

   public void setBossHellMode(boolean bossHellMode) {
      this.bossHellMode = bossHellMode;
   }

   public long getWillMoonGaugeUpdateableTime() {
      return this.willMoonGaugeUpdateableTime;
   }

   public void setWillMoonGaugeUpdateableTime(long willMoonGaugeUpdateableTime) {
      this.willMoonGaugeUpdateableTime = willMoonGaugeUpdateableTime;
   }

   public void setExtraAbilityStats(ExtraAbilityStatEntry[] entry, int currentPreset) {
      this.extraAbilityStats[currentPreset] = entry;
   }

   public ExtraAbilityStatEntry[][] getExtraAbilityStats() {
      return this.extraAbilityStats;
   }

   public void setExtraAbilityStats(ExtraAbilityStatEntry[][] extraAbilityStats) {
      this.extraAbilityStats = extraAbilityStats;
   }

   public int getExtraAbilitySlot() {
      return this.extraAbilitySlot;
   }

   public void setExtraAbilitySlot(int extraAbilitySlot) {
      this.extraAbilitySlot = extraAbilitySlot;
   }

   public ExtraAbilityGrade getExtraAbilityGrade() {
      return this.extraAbilityGrade;
   }

   public void setExtraAbilityGrade(ExtraAbilityGrade extraAbilityGrade) {
      this.extraAbilityGrade = extraAbilityGrade;
   }

   public Achievement getAchievement() {
      return this.achievement;
   }

   public void setAchievement(Achievement achievement) {
      this.achievement = achievement;
   }

   public int getDecrementDeathCount() {
      return this.decrementDeathCount;
   }

   public void setDecrementDeathCount(int decrementDeathCount) {
      this.decrementDeathCount = decrementDeathCount;
   }

   public int getReincarnationMaxCount() {
      return this.reincarnationMaxCount;
   }

   public void setReincarnationMaxCount(int reincarnationMaxCount) {
      this.reincarnationMaxCount = reincarnationMaxCount;
   }

   public int getTier() {
      return this.tier;
   }

   public void setTier(int tier) {
      this.tier = tier;
   }

   public ScheduledFuture<?> getChairTask() {
      return this.ChairTask;
   }

   public void setChairTask(ScheduledFuture<?> chairTask) {
      this.ChairTask = chairTask;
   }

   public int getNightWalkerSpawnBatCount() {
      return this.nightWalkerSpawnBatCount;
   }

   public void setNightWalkerSpawnBatCount(int nightWalkerSpawnBatCount) {
      this.nightWalkerSpawnBatCount = nightWalkerSpawnBatCount;
   }

   public long getLastSpeedHackCheckTime() {
      return this.lastSpeedHackCheckTime;
   }

   public void setLastSpeedHackCheckTime(long lastSpeedHackCheckTime) {
      this.lastSpeedHackCheckTime = lastSpeedHackCheckTime;
   }

   public int getSpeedHackCheckCount() {
      return this.speedHackCheckCount;
   }

   public void setSpeedHackCheckCount(int speedHackCheckCount) {
      this.speedHackCheckCount = speedHackCheckCount;
   }

   public int getTransferFieldCount() {
      return this.transferFieldCount;
   }

   public void setTransfterFieldCount(int transfterFieldCount) {
      this.transferFieldCount = transfterFieldCount;
   }

   public int getAndIncrementTransferFieldCount() {
      if (this.transferFieldCount++ > 101) {
         this.transferFieldCount -= 100;
      }

      return this.transferFieldCount;
   }

   public String getCreateGuildName() {
      return this.createGuildName;
   }

   public void setCreateGuildName(String createGuildName) {
      this.createGuildName = createGuildName;
   }

   public byte getBuddyCapacity() {
      return this.buddylist.getCapacity();
   }

   public void setBuddyCapacity(byte capacity) {
      this.buddylist.setCapacity(capacity);
      this.client.getSession().writeAndFlush(CWvsContext.BuddylistPacket.updateBuddyCapacity(capacity));
   }

   public Messenger getMessenger() {
      return this.messenger;
   }

   public void setMessenger(Messenger messenger) {
      this.messenger = messenger;
   }

   public void addCooldown(int skillId, long startTime, long length) {
      if (length > 0L && startTime + length > System.currentTimeMillis()) {
         this.coolDowns.put(skillId, new MapleCoolDownValueHolder(skillId, startTime, length));
      }
   }

   public void removeCooldown(int skillId) {
      if (this.coolDowns.containsKey(skillId)) {
         this.coolDowns.remove(skillId);
      }
   }

   public void clearAllCooldown() {
      for (MapleCoolDownValueHolder h : this.getCooldowns()) {
         this.coolDowns.remove(h.skillId);
         this.getClient().getSession().writeAndFlush(CField.skillCooldown(h.skillId, 0));
      }
   }

   public void clearCooldown(int skillID) {
      if (this.coolDowns.containsKey(skillID)) {
         this.coolDowns.remove(skillID);
         this.getClient().getSession().writeAndFlush(CField.skillCooldown(skillID, 0));
      }
   }

   public void changeCooldown(int skillId, long changeTime) {
      if (!this.isGM() || changeTime <= 0L) {
         if (this.skillisCooling(skillId)) {
            for (MapleCoolDownValueHolder mcdvh : this.getCooldowns()) {
               if (mcdvh.skillId == skillId) {
                  long startTime = mcdvh.startTime;
                  long length = mcdvh.length;
                  long delta = System.currentTimeMillis() - startTime;
                  this.removeCooldown(skillId);
                  this.addCooldown(skillId, System.currentTimeMillis(), length - delta + changeTime);
                  this.getClient().getSession()
                        .writeAndFlush(CField.skillCooldown(skillId, (int) (length - delta + changeTime)));
                  break;
               }
            }
         }
      }
   }

   public void rawSetCooldown(int skillID, long cooltime) {
      if (this.skillisCooling(skillID)) {
         for (MapleCoolDownValueHolder mcdvh : this.getCooldowns()) {
            if (mcdvh.skillId == skillID) {
               this.removeCooldown(skillID);
               this.addCooldown(skillID, System.currentTimeMillis(), cooltime);
               this.getClient().getSession().writeAndFlush(CField.skillCooldown(skillID, (int) cooltime));
               break;
            }
         }
      }
   }

   public boolean skillisCooling(int skillId) {
      return this.coolDowns.containsKey(skillId);
   }

   public boolean canApplyCooldown(int skillID) {
      long remain = this.getRemainCooltime(skillID);
      return remain <= 1000L;
   }

   public void giveCoolDowns(int skillid, long starttime, long length) {
      this.addCooldown(skillid, starttime, length);
   }

   public void giveCoolDowns(List<MapleCoolDownValueHolder> cooldowns) {
      if (cooldowns != null) {
         for (MapleCoolDownValueHolder cooldown : cooldowns) {
            this.coolDowns.put(cooldown.skillId, cooldown);
         }
      } else {
         DBConnection db = new DBConnection();

         try (Connection con = DBConnection.getConnection()) {
            PreparedStatement ps = con
                  .prepareStatement("SELECT SkillID,StartTime,length FROM skills_cooldowns WHERE charid = ?");
            ps.setInt(1, this.getId());
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
               if (rs.getLong("length") + rs.getLong("StartTime") - System.currentTimeMillis() > 0L) {
                  this.giveCoolDowns(rs.getInt("SkillID"), rs.getLong("StartTime"), rs.getLong("length"));
                  this.send(CField.skillCooldown(rs.getInt("SkillID"),
                        (int) (rs.getLong("length") - (System.currentTimeMillis() - rs.getLong("StartTime")))));
               }
            }

            rs.close();
            ps.close();
            deleteWhereCharacterId(con, "DELETE FROM skills_cooldowns WHERE charid = ?", this.id);
         } catch (SQLException var9) {
            System.err.println("Error while retriving cooldown from SQL storage");
         }
      }
   }

   public int getCooldownSize() {
      return this.coolDowns.size();
   }

   public int getDiseaseSize() {
      return this.diseases == null ? 0 : this.diseases.size();
   }

   public MapleDiseaseValueHolder getDiseases(SecondaryStatFlag stat) {
      return this.diseases != null && !this.diseases.isEmpty() ? this.diseases.get(stat) : null;
   }

   public List<MapleCoolDownValueHolder> getCooldowns() {
      List<MapleCoolDownValueHolder> ret = new ArrayList<>();

      for (MapleCoolDownValueHolder mc : this.coolDowns.values()) {
         if (mc != null) {
            ret.add(mc);
         }
      }

      return ret;
   }

   public final List<MapleDiseaseValueHolder> getDiseasesList() {
      List<MapleDiseaseValueHolder> tempList = new ArrayList<>();

      try {
         for (Entry<SecondaryStatFlag, MapleDiseaseValueHolder> entry : this.diseases.entrySet()) {
            tempList.add(entry.getValue());
         }
      } catch (Exception var4) {
      }

      return tempList;
   }

   public final Map<SecondaryStatFlag, MapleDiseaseValueHolder> getAllDiseases() {
      return new ArrayMap<>(this.diseases);
   }

   public final boolean hasDisease(SecondaryStatFlag dis) {
      return this.diseases != null && (this.diseases == null || !this.diseases.isEmpty())
            ? this.diseases.containsKey(dis)
            : false;
   }

   public final boolean hasDisease(List<SecondaryStatFlag> stats) {
      return this.diseases != null && (this.diseases == null || !this.diseases.isEmpty())
            ? stats.stream().anyMatch(stat -> this.diseases.containsKey(stat))
            : false;
   }

   public void giveDebuff(SecondaryStatFlag disease, MobSkillInfo skill) {
      this.giveDebuff(disease, skill.getX(), skill.getY(), skill.getDuration(), skill.getSkillId(),
            skill.getSkillLevel(), false);
   }

   public void giveDebuff(SecondaryStatFlag disease, MobSkillInfo skill, boolean forced) {
      this.giveDebuff(disease, skill.getX(), skill.getY(), skill.getDuration(), skill.getSkillId(),
            skill.getSkillLevel(), forced);
   }

   public boolean giveDebuff(SecondaryStatFlag stat, int x, int y, long duration, int skillid, int level) {
      return this.giveDebuff(stat, x, y, duration, skillid, level, false);
   }

   public boolean giveDebuff(SecondaryStatFlag stat, int x, int y, long duration, int skillid, int level,
         boolean forced) {
      return this.giveDebuff(Map.of(stat, x), y, duration, skillid, level, forced);
   }

   public boolean giveDebuff(Map<SecondaryStatFlag, Integer> stats, int y, long duration, int skillid, int level,
         boolean forced) {
      if (stats.containsKey(SecondaryStatFlag.Darkness) && this.getSkillLevel(20040221) > 0) {
         return false;
      } else {
         boolean exclusive = stats.containsKey(SecondaryStatFlag.TimeCurse)
               || stats.containsKey(SecondaryStatFlag.Stigma)
               || skillid == 241 && level == 5
               || skillid == 241 && level == 8
               || skillid == 174 && level == 16;
         if (!this.isAlive()) {
            return false;
         } else {
            boolean antiDebuff = false;
            if (!forced) {
               for (Summoned summoned : new ArrayList<>(this.summons)) {
                  if (summoned.getSkill() >= 5210015 && summoned.getSkill() <= 5210018 && !summoned.isShieldDebuff()) {
                     summoned.setShieldDebuff(true);
                     antiDebuff = true;
                     break;
                  }
               }

               SecondaryStat ss = this.getSecondaryStat();
               if (ss != null && ss.EmpressBlessX == 400001054) {
                  antiDebuff = true;
                  ss.EmpressBlessX = 0;
                  SecondaryStatManager statManager = new SecondaryStatManager(this.getClient(), ss);
                  statManager.changeStatValue(SecondaryStatFlag.EmpressBless, 400001050, 1);
                  statManager.temporaryStatSet();
               }

               if (this.hasBuffBySkillID(400011028)) {
                  antiDebuff = true;
               }
            }

            if (antiDebuff && !exclusive) {
               return false;
            } else if (stats.containsKey(SecondaryStatFlag.Fear) && this.getSkillLevel(20040221) > 0) {
               PacketEncoder p = new PacketEncoder();
               p.writeShort(SendPacketOpcode.USER_ON_EFFECT.getValue());
               p.write(11);
               this.send(p.getPacket());
               p = new PacketEncoder();
               p.writeShort(SendPacketOpcode.USER_ON_EFFECT.getValue());
               p.write(78);
               p.writeInt(20040221);
               this.send(p.getPacket());
               return false;
            } else {
               if (this.map != null && !this.hasDisease(new ArrayList<>(stats.keySet()))
                     || forced
                     || exclusive
                     || stats.containsKey(SecondaryStatFlag.CurseOfDestruction)) {
                  if (!forced && !exclusive) {
                     if (this.getBuffedValue(SecondaryStatFlag.SpiritGuard) != null) {
                        this.setSpiritWardCount(this.getSpiritWardCount() - 1);
                        if (this.getSpiritWardCount() == 0) {
                           this.temporaryStatReset(SecondaryStatFlag.SpiritGuard);
                        } else {
                           this.temporaryStatSet(25121209, Integer.MAX_VALUE, SecondaryStatFlag.SpiritGuard,
                                 this.getSpiritWardCount());
                        }

                        return false;
                     }

                     SecondaryStatEffect effect = this.getBuffedEffect(SecondaryStatFlag.AntiMagicShell);
                     if (effect != null) {
                        boolean bCheck = (Boolean) this.invokeJobMethod("checkAntiMagicShell", effect);
                        if (!bCheck) {
                           return false;
                        }
                     }

                     int asr = this.getStat().ASR;
                     Integer value = this.getBuffedValue(SecondaryStatFlag.BowMasterConcentration);
                     if (value != null) {
                        SecondaryStatEffect e = this.getBuffedEffect(SecondaryStatFlag.BowMasterConcentration);
                        if (e != null) {
                           int v = value * e.getX();
                           asr += v;
                        }

                        this.temporaryStatReset(SecondaryStatFlag.BowMasterConcentration);
                     }

                     if (this.hasBuffBySkillID(37121052)) {
                        asr += 100;
                     }

                     int finalAsr = 1 + (int) (28.0 * Math.log10(Math.min(500, asr)));
                     if (finalAsr < 0) {
                        finalAsr = 0;
                     }

                     if (!forced) {
                        duration -= (long) (duration * (finalAsr * 0.01));
                     }
                  }

                  if (this.hasBuffBySkillID(3311012)) {
                     SecondaryStatEffect eff = this.getBuffedEffect(SecondaryStatFlag.indieAsrR, 3311012);
                     if (eff != null && this.addCurseToleranceStack(eff.getY())) {
                        SecondaryStatManager statManager = new SecondaryStatManager(this.getClient(),
                              this.secondaryStat);
                        statManager.changeStatValue(SecondaryStatFlag.indieAsrR, 3311012,
                              eff.getS() + this.getCurseToleranceStack() * eff.getX());
                        statManager.temporaryStatSet();
                     }
                  }

                  if (!exclusive) {
                     duration -= this.getStat().decreaseDebuff;
                  }

                  SecondaryStatManager statManager = new SecondaryStatManager(
                        this.getClient(), this.secondaryStat, skillid, level, (int) duration,
                        System.currentTimeMillis());
                  statManager.setFromMob(true);

                  for (Entry<SecondaryStatFlag, Integer> statMap : stats.entrySet()) {
                     int x = statMap.getValue();
                     if (x == 0 && y == 0) {
                        x = 1;
                     }

                     if (skillid == 184) {
                        int var32 = x << 16;
                        var32 += y;
                        x = var32;
                     }

                     this.diseases
                           .put(statMap.getKey(), new MapleDiseaseValueHolder(statMap.getKey(),
                                 System.currentTimeMillis(), duration, skillid, level, x, y));
                     statManager.putStatValue(statMap.getKey(), x);
                  }

                  statManager.temporaryStatSet();
                  if (stats.containsKey(SecondaryStatFlag.Poison) && stats.get(SecondaryStatFlag.Poison) > 0) {
                     this.addHP((int) (-(stats.get(SecondaryStatFlag.Poison).intValue()
                           * ((duration - this.getStat().decreaseDebuff) / 1000L))));
                  }

                  if (GameConstants.isXenon(this.getJob())
                        && this.getBuffedValue(SecondaryStatFlag.ShadowPartner) != null) {
                     List<SecondaryStatFlag> flags = List.of(
                           SecondaryStatFlag.Attract, SecondaryStatFlag.Stun, SecondaryStatFlag.Morph,
                           SecondaryStatFlag.Slow, SecondaryStatFlag.Lapidification);

                     for (SecondaryStatFlag s : stats.keySet()) {
                        if (flags.contains(s)) {
                           this.temporaryStatResetBySkillID(36111006);
                           break;
                        }
                     }
                  }
               }

               return true;
            }
         }
      }
   }

   public final void giveSilentDebuff(List<MapleDiseaseValueHolder> ld) {
      if (ld != null) {
         for (MapleDiseaseValueHolder disease : ld) {
            this.diseases.put(disease.disease, disease);
         }
      }
   }

   public void dispelDebuff(SecondaryStatFlag debuff) {
      if (debuff != null) {
         if (this.hasDisease(debuff)) {
            this.temporaryStatReset(debuff);
            this.diseases.remove(debuff);
         }
      }
   }

   public void dispelDebuffs() {
      for (SecondaryStatFlag d : new ArrayList<>(this.diseases.keySet())) {
         this.dispelDebuff(d);
      }
   }

   public void dispelDebuff(int size) {
      List<SecondaryStatFlag> diseasess = new ArrayList<>(this.diseases.keySet());
      Collections.shuffle(diseasess);
      int count = 0;

      for (SecondaryStatFlag d : diseasess) {
         this.dispelDebuff(d);
         if (++count >= size) {
            break;
         }
      }
   }

   public void cancelAllDebuffs() {
      if (this.diseases != null) {
         this.diseases.clear();
      }
   }

   public void setLevel(short level) {
      this.level = (short) (level - 1);
   }

   public void sendNote(String to, String msg) {
      this.sendNote(to, msg, 0);
   }

   public void sendNote(String to, String msg, int fame) {
      MapleCharacterUtil.sendNote(to, this.getName(), msg, fame);
   }

   public void showNote() {
      List<MapleMessage> receivedMessages = new ArrayList<>();

      for (MapleMessage m : this.getReceivedMessages()) {
         if (m != null) {
            receivedMessages.add(m);
         }
      }

      List<MapleMessage> sentMessages = new ArrayList<>();

      for (MapleMessage mx : this.getSentMessages()) {
         if (mx != null) {
            sentMessages.add(mx);
         }
      }

      this.client.getSession().writeAndFlush(CSPacket.showReceivedMessages(receivedMessages));
      this.client.getSession().writeAndFlush(CSPacket.showSentMessages(sentMessages));
   }

   public void deleteNote(int id, int fame) {
      DBConnection db = new DBConnection();

      try (Connection con = DBConnection.getConnection()) {
         PreparedStatement ps = con.prepareStatement("SELECT gift FROM notes WHERE `id`=?");
         ps.setInt(1, id);
         ResultSet rs = ps.executeQuery();
         if (rs.next() && rs.getInt("gift") == fame && fame > 0) {
            this.addFame(fame);
            this.updateSingleStat(MapleStat.FAME, this.getFame());
            this.client.getSession().writeAndFlush(CWvsContext.InfoPacket.getShowFameGain(fame));
         }

         rs.close();
         ps.close();
         ps = con.prepareStatement("DELETE FROM notes WHERE `id`=?");
         ps.setInt(1, id);
         ps.execute();
         ps.close();
      } catch (SQLException var9) {
         System.err.println("Unable to delete note" + var9);
      }
   }

   public void checkedMessage(int id) {
      DBConnection db = new DBConnection();
      PreparedStatement ps = null;
      ResultSet rs = null;

      try (Connection con = DBConnection.getConnection()) {
         ps = con.prepareStatement("SELECT gift FROM notes WHERE `id`=?");
         ps.setInt(1, id);
         rs = ps.executeQuery();
         if (rs.next()) {
            int f = rs.getInt("gift");
            if (f > 0) {
               this.addFame(f);
               this.updateSingleStat(MapleStat.FAME, this.getFame());
               this.client.getSession().writeAndFlush(CWvsContext.InfoPacket.getShowFameGain(f));
            }
         }

         rs.close();
         ps.close();
         ps = con.prepareStatement("UPDATE notes SET checked = ?, gift = ? WHERE id = ?");
         ps.setByte(1, (byte) 1);
         ps.setByte(2, (byte) 0);
         ps.setInt(3, id);
         ps.execute();
         ps.close();

         for (MapleMessage msg : this.getReceivedMessages()) {
            if (msg != null && msg.getUniqueID() == id) {
               msg.setChecked(true);
               break;
            }
         }

         this.send(CSPacket.checkedMessage(id));
      } catch (SQLException var22) {
         System.err.println("Unable to delete note" + var22);
      } finally {
         try {
            if (ps != null) {
               ps.close();
            }

            if (rs != null) {
               rs.close();
            }
         } catch (SQLException var19) {
            var19.printStackTrace();
         }
      }
   }

   public void deleteReceivedMessage(int id) {
      DBConnection db = new DBConnection();
      PreparedStatement ps = null;
      ResultSet rs = null;

      try (Connection con = DBConnection.getConnection()) {
         ps = con.prepareStatement("DELETE FROM notes WHERE `id`=?");
         ps.setInt(1, id);
         ps.execute();
         ps.close();
         int index = 0;

         for (MapleMessage msg : this.getReceivedMessages()) {
            if (msg != null && msg.getUniqueID() == id) {
               this.receivedMessage[index] = null;
               break;
            }

            index++;
         }

         this.send(CSPacket.deletedReceivedMessage(id));
      } catch (SQLException var23) {
         System.err.println("Unable to delete note" + var23);
      } finally {
         try {
            if (ps != null) {
               ps.close();
            }

            if (rs != null) {
               rs.close();
            }
         } catch (SQLException var20) {
            var20.printStackTrace();
         }
      }
   }

   public void deleteSentMessage(int id) {
      DBConnection db = new DBConnection();
      PreparedStatement ps = null;
      ResultSet rs = null;

      try (Connection con = DBConnection.getConnection()) {
         ps = con.prepareStatement("DELETE FROM notes WHERE `id`=?");
         ps.setInt(1, id);
         ps.execute();
         ps.close();
         int index = 0;

         for (MapleMessage msg : this.getSentMessages()) {
            if (msg != null && msg.getUniqueID() == id) {
               this.sentMessage[index] = null;
               break;
            }

            index++;
         }

         this.send(CSPacket.deletedSentMessage(id));
      } catch (SQLException var23) {
         System.err.println("Unable to delete note" + var23);
      } finally {
         try {
            if (ps != null) {
               ps.close();
            }

            if (rs != null) {
               rs.close();
            }
         } catch (SQLException var20) {
            var20.printStackTrace();
         }
      }
   }

   public int getMulungEnergy() {
      return this.mulung_energy;
   }

   public void mulung_EnergyModify(boolean inc) {
      if (inc) {
         if (this.mulung_energy + 100 > 10000) {
            this.mulung_energy = 10000;
         } else {
            this.mulung_energy = (short) (this.mulung_energy + 100);
         }
      } else {
         this.mulung_energy = 0;
      }

      this.client.getSession().writeAndFlush(CWvsContext.MulungEnergy(this.mulung_energy));
   }

   public void writeMulungEnergy() {
      this.client.getSession().writeAndFlush(CWvsContext.MulungEnergy(this.mulung_energy));
   }

   public void writeEnergy(String type, String inc) {
      this.client.getSession().writeAndFlush(CWvsContext.sendPyramidEnergy(type, inc));
   }

   public void writeStatus(String type, String inc) {
      this.client.getSession().writeAndFlush(CWvsContext.sendGhostStatus(type, inc));
   }

   public void writePoint(String type, String inc) {
      this.client.getSession().writeAndFlush(CWvsContext.sendGhostPoint(type, inc));
   }

   public final short getCombo() {
      return this.combo;
   }

   public void setCombo(short combo) {
      this.combo = combo;
   }

   public final long getLastCombo() {
      return this.lastCombo;
   }

   public void setLastCombo(long combo) {
      this.lastCombo = combo;
   }

   public final long getKeyDownSkill_Time() {
      return this.keydown_skill;
   }

   public void setKeyDownSkill_Time(long keydown_skill) {
      this.keydown_skill = keydown_skill;
   }

   public void setChalkboard(String text) {
      this.chalktext = text;
      if (this.map != null) {
         this.map.broadcastMessage(CSPacket.useChalkboard(this.getId(), text));
      }
   }

   public String getChalkboard() {
      return this.chalktext;
   }

   public MapleMount getMount() {
      return this.mount;
   }

   public int[] getWishlist() {
      return this.wishlist;
   }

   public void clearWishlist() {
      for (int i = 0; i < 12; i++) {
         this.wishlist[i] = 0;
      }

      this.setSaveFlag(this.getSaveFlag() | CharacterSaveFlag.WISH_LIST.getFlag());
   }

   public int getWishlistSize() {
      int ret = 0;

      for (int i = 0; i < 12; i++) {
         if (this.wishlist[i] > 0) {
            ret++;
         }
      }

      return ret;
   }

   public void setWishlist(int[] wl) {
      this.wishlist = wl;
      this.setSaveFlag(this.getSaveFlag() | CharacterSaveFlag.WISH_LIST.getFlag());
   }

   public int[] getRocks() {
      return this.rocks;
   }

   public int getRockSize() {
      int ret = 0;

      for (int i = 0; i < 10; i++) {
         if (this.rocks[i] != 999999999) {
            ret++;
         }
      }

      return ret;
   }

   public void deleteFromRocks(int map) {
      for (int i = 0; i < 10; i++) {
         if (this.rocks[i] == map) {
            this.rocks[i] = 999999999;
            this.setSaveFlag(this.getSaveFlag() | CharacterSaveFlag.TROCK_LOCATIONS.getFlag());
            break;
         }
      }
   }

   public void addRockMap() {
      if (this.getRockSize() < 10) {
         this.rocks[this.getRockSize()] = this.getMapId();
         this.setSaveFlag(this.getSaveFlag() | CharacterSaveFlag.TROCK_LOCATIONS.getFlag());
      }
   }

   public boolean isRockMap(int id) {
      for (int i = 0; i < 10; i++) {
         if (this.rocks[i] == id) {
            return true;
         }
      }

      return false;
   }

   public int[] getRegRocks() {
      return this.regrocks;
   }

   public int getRegRockSize() {
      int ret = 0;

      for (int i = 0; i < 5; i++) {
         if (this.regrocks[i] != 999999999) {
            ret++;
         }
      }

      return ret;
   }

   public void deleteFromRegRocks(int map) {
      for (int i = 0; i < 5; i++) {
         if (this.regrocks[i] == map) {
            this.regrocks[i] = 999999999;
            this.setSaveFlag(this.getSaveFlag() | CharacterSaveFlag.REGISTER_ROCK_LOCATIONS.getFlag());
            break;
         }
      }
   }

   public void addRegRockMap() {
      if (this.getRegRockSize() < 5) {
         this.regrocks[this.getRegRockSize()] = this.getMapId();
         this.setSaveFlag(this.getSaveFlag() | CharacterSaveFlag.REGISTER_ROCK_LOCATIONS.getFlag());
      }
   }

   public boolean isRegRockMap(int id) {
      for (int i = 0; i < 5; i++) {
         if (this.regrocks[i] == id) {
            return true;
         }
      }

      return false;
   }

   public int[] getHyperRocks() {
      return this.hyperrocks;
   }

   public int getHyperRockSize() {
      int ret = 0;

      for (int i = 0; i < 13; i++) {
         if (this.hyperrocks[i] != 999999999) {
            ret++;
         }
      }

      return ret;
   }

   public void deleteFromHyperRocks(int map) {
      for (int i = 0; i < 13; i++) {
         if (this.hyperrocks[i] == map) {
            this.hyperrocks[i] = 999999999;
            this.setSaveFlag(this.getSaveFlag() | CharacterSaveFlag.HYPER_ROCK_LOCATIONS.getFlag());
            break;
         }
      }
   }

   public void addHyperRockMap() {
      if (this.getRegRockSize() < 13) {
         this.hyperrocks[this.getHyperRockSize()] = this.getMapId();
         this.setSaveFlag(this.getSaveFlag() | CharacterSaveFlag.HYPER_ROCK_LOCATIONS.getFlag());
      }
   }

   public boolean isHyperRockMap(int id) {
      for (int i = 0; i < 13; i++) {
         if (this.hyperrocks[i] == id) {
            return true;
         }
      }

      return false;
   }

   public List<LifeMovementFragment> getLastRes() {
      return this.lastres;
   }

   public void setLastRes(List<LifeMovementFragment> lastres) {
      this.lastres = lastres;
   }

   public void dropMessageGM(int type, String message) {
      if (this.isGM() || this.getClient().isGm()) {
         this.dropMessage(type, message);
      }
   }

   public void DebugPrintlnGM(String print) {
      if (this.isGM() || this.getClient().isGm()) {
         System.out.println(print);
      }
   }

   public void printDebugPointGM() {
      if (this.isGM() || this.getClient().isGm()) {
         try {
            throw new Exception();
         } catch (Exception var2) {
            System.out.println("GM 디버그 트레이싱");
            var2.printStackTrace();
         }
      }
   }

   public void dropMessage(int type, String message) {
      if (type == -1) {
         this.client.getSession().writeAndFlush(CWvsContext.getScriptProgressMessage(message));
      } else if (type == -2) {
         this.client.getSession().writeAndFlush(PlayerShopPacket.shopChat(this.getName(), message, this.getId(), 0));
      } else if (type == -3) {
         this.client
               .getSession()
               .writeAndFlush(
                     CField.getChatText(this.getId(), this.getName(), message, this.isSuperGM(), 0,
                           new ReportLogEntry(this.getName(), message, this.getId())));
      } else if (type == -4) {
         this.client
               .getSession()
               .writeAndFlush(
                     CField.getChatText(this.getId(), this.getName(), message, this.isSuperGM(), 1,
                           new ReportLogEntry(this.getName(), message, this.getId())));
      } else if (type == -5) {
         this.client.getSession().writeAndFlush(CField.chatMsg(5, message));
      } else if (type == -6) {
         this.client.getSession().writeAndFlush(CField.chatMsg(11, message));
      } else if (type == -7) {
         this.client.getSession().writeAndFlush(CWvsContext.getStaticScreenMessage(message, false, 1));
      } else if (type == -8) {
         this.client.getSession().writeAndFlush(CField.chatMsg(8, message));
      } else if (type == -21) {
         this.client.getSession().writeAndFlush(CField.chatMsg(21, message));
      } else if (type == -22) {
         this.client.getSession().writeAndFlush(CField.chatMsg(22, message));
      } else if (type == -25) {
         this.client.getSession().writeAndFlush(CField.chatMsg(25, message));
      } else if (type == -26) {
         this.client.getSession().writeAndFlush(CField.chatMsg(26, message));
      } else if (type == -28) {
         this.client.getSession().writeAndFlush(CField.chatMsg(28, message));
      } else {
         this.client.getSession().writeAndFlush(CWvsContext.serverNotice(type, message));
      }
   }

   public IMaplePlayerShop getPlayerShop() {
      return this.playerShop;
   }

   public void setPlayerShop(IMaplePlayerShop playerShop) {
      this.playerShop = playerShop;
   }

   public int getConversation() {
      return this.inst != null ? this.inst.get() : 0;
   }

   public void setConversation(int inst) {
      this.inst.set(inst);
   }

   public int getDirection() {
      return this.insd.get();
   }

   public void setDirection(int inst) {
      this.insd.set(inst);
   }

   public void addCP(int ammount) {
      this.totalCP = (short) (this.totalCP + ammount);
      this.availableCP = (short) (this.availableCP + ammount);
   }

   public void useCP(int ammount) {
      this.availableCP = (short) (this.availableCP - ammount);
   }

   public int getAvailableCP() {
      return this.availableCP;
   }

   public int getTotalCP() {
      return this.totalCP;
   }

   public void resetCP() {
      this.totalCP = 0;
      this.availableCP = 0;
   }

   public Timer getDFRecoveryTimer() {
      return this.DFRecoveryTimer;
   }

   public void setDFRecoveryTimer(Timer timer) {
      this.DFRecoveryTimer = timer;
   }

   public boolean getCanTalk() {
      return this.canTalk;
   }

   public boolean isAccountChatBan() {
      return this.getClient().isAccountChatBan();
   }

   public void canTalk(boolean talk) {
      this.canTalk = talk;
   }

   public double getEXPMod() {
      return this.stats.expMod;
   }

   public int getDropMod() {
      return this.stats.dropMod;
   }

   public int getCashMod() {
      return this.stats.cashMod;
   }

   public void setPoints(int p) {
      this.points = p;
   }

   public void setMaplePoint(int p) {
      this.maplepoints = p;
      this.send(CWvsContext.updateMaplePoint(this.maplepoints));
   }

   public int getMaplePoints() {
      return this.maplepoints;
   }

   public int getACash() {
      return this.acash;
   }

   public int getNXCredit() {
      return this.nxcredit;
   }

   public int getPoints() {
      return this.points;
   }

   public void setRealCash(int p) {
      this.realCash = p;
   }

   public int getRealCash() {
      return this.realCash;
   }

   public int getExtremeRealCash() {
      return this.extremeRealCash;
   }

   public int getGetExtremeRealCash() {
      return this.getExtremeRealCash;
   }

   public void setGetExtremeRealCash(int point) {
      this.getExtremeRealCash = point;
   }

   public void setExtremeRealCash(int point) {
      this.extremeRealCash = point;
   }

   public void setExtremeLevelPoint(int point) {
      this.extremeLevelPoint = point;
   }

   public int getExtremeLevelPoint() {
      return this.extremeLevelPoint;
   }

   public void gainRealCash(int realCash) {
      if (DBConfig.isGanglim) {
         this.gainCashPoint(realCash);
      } else {
         this.gainRealCash(realCash, true);
      }
   }

   public void gainRealCash(int realCash, boolean qexUpdate) {
      if (DBConfig.isGanglim) {
         this.gainCashPoint(realCash);
      } else {
         this.realCash += realCash;
         if (qexUpdate) {
            this.updateOneInfo(17015, "point", String.valueOf(this.realCash));
         }
      }
   }

   public CashShop getCashInventory() {
      return this.cs;
   }

   public void removeItem(int id, int quantity) {
      int check = quantity;
      if (quantity > 0) {
         check = quantity * -1;
      }

      MapleInventoryManipulator.removeById(this.client, GameConstants.getInventoryType(id), id, -check, true, false);
   }

   public void removeAll(int id) {
      this.removeAll(id, true);
   }

   public void removeAll(int id, boolean show) {
      MapleInventoryType type = GameConstants.getInventoryType(id);
      int possessed = this.getInventory(type).countById(id);
      if (possessed > 0) {
         MapleInventoryManipulator.removeById(this.getClient(), type, id, possessed, true, false);
         if (show) {
         }
      }

      if (type == MapleInventoryType.EQUIP) {
         type = MapleInventoryType.EQUIPPED;
         possessed = this.getInventory(type).countById(id);
         if (possessed > 0) {
            MapleInventoryManipulator.removeById(this.getClient(), type, id, possessed, true, false);
         }
      }
   }

   public Triple<List<MapleRing>, List<MapleRing>, List<MapleRing>> getRings(boolean equip) {
      MapleInventory iv = this.getInventory(MapleInventoryType.EQUIPPED);
      List<Item> equipped = iv.newList();
      Collections.sort(equipped);
      List<MapleRing> crings = new ArrayList<>();
      List<MapleRing> frings = new ArrayList<>();
      List<MapleRing> mrings = new ArrayList<>();

      for (Item ite : equipped) {
         Equip item = (Equip) ite;
         if (item.getRing() != null) {
            MapleRing ring = item.getRing();
            ring.setEquipped(true);
            if (GameConstants.isEffectRing(item.getItemId())) {
               if (equip) {
                  if (GameConstants.isCrushRing(item.getItemId())) {
                     crings.add(ring);
                  } else if (GameConstants.isFriendshipRing(item.getItemId())) {
                     frings.add(ring);
                  } else if (GameConstants.isMarriageRing(item.getItemId())) {
                     mrings.add(ring);
                  }
               } else if (crings.size() == 0 && GameConstants.isCrushRing(item.getItemId())) {
                  crings.add(ring);
               } else if (frings.size() == 0 && GameConstants.isFriendshipRing(item.getItemId())) {
                  frings.add(ring);
               } else if (mrings.size() == 0 && GameConstants.isMarriageRing(item.getItemId())) {
                  mrings.add(ring);
               }
            }
         }
      }

      if (equip) {
         iv = this.getInventory(MapleInventoryType.EQUIP);

         for (Item itex : iv.list()) {
            Equip item = (Equip) itex;
            if (item.getRing() != null && GameConstants.isCrushRing(item.getItemId())) {
               MapleRing ring = item.getRing();
               ring.setEquipped(false);
               if (GameConstants.isFriendshipRing(item.getItemId())) {
                  frings.add(ring);
               } else if (GameConstants.isCrushRing(item.getItemId())) {
                  crings.add(ring);
               } else if (GameConstants.isMarriageRing(item.getItemId())) {
                  mrings.add(ring);
               }
            }
         }
      }

      Collections.sort(frings, new MapleRing.RingComparator());
      Collections.sort(crings, new MapleRing.RingComparator());
      Collections.sort(mrings, new MapleRing.RingComparator());
      return new Triple<>(crings, frings, mrings);
   }

   public int getFH() {
      MapleFoothold fh = this.getMap().getFootholds().findBelow(this.getTruePosition());
      return fh != null ? fh.getId() : 0;
   }

   public void startFairySchedule(boolean relogin) {
      Equip equip = null;
      boolean exSlot = false;
      Item item = this.getInventory(MapleInventoryType.EQUIPPED).getItem((short) -17);
      if (item != null && GameConstants.isFairyPendant(item.getItemId())) {
         equip = (Equip) item;
      }

      if ((item = this.getInventory(MapleInventoryType.EQUIPPED).getItem((short) -31)) != null
            && GameConstants.isFairyPendant(item.getItemId())) {
         exSlot = true;
         equip = (Equip) item;
      }

      if (equip == null || equip.getItemId() != 1122334 && equip.getItemId() != 1122271) {
         if (equip != null) {
            this.getStat().recalcLocalStats(this);
            if (this.fairyExp <= 0) {
               this.fairyExp = (byte) this.stats.equippedFairy;
            }

            Date dd = new Date();
            SimpleDateFormat sdf = new SimpleDateFormat("yyMMddHHmmss");
            String test = sdf.format(dd);
            if (!relogin) {
               StringBuilder sb = new StringBuilder();
               sb.append(test).append("|").append(test).append("|0|0|0");
               this.updateInfoQuest(27039, equip.getUniqueId() + "=" + sb.toString());
               this.send(this.BonusExpRateChanged(exSlot, 0, this.fairyExp, 0, true));
               sb = new StringBuilder();
               sb.append(test).append("|").append(test).append("|0|").append(this.fairyExp).append("|0");
               this.updateInfoQuest(27039, equip.getUniqueId() + "=" + sb.toString());
            } else if (relogin && equip != null && this.getOneInfo(27039, equip.getUniqueId() + "") != null) {
               String fairyInfo = this.getOneInfo(27039, equip.getUniqueId() + "");
               String fairyTime = fairyInfo.split("\\|")[0];
               String expRate = fairyInfo.split("\\|")[3];
               String equippedMinute = fairyInfo.split("\\|")[4];
               if (expRate.equals("0")) {
                  expRate = this.fairyExp + "";
               } else if (Integer.parseInt(expRate) > this.fairyExp) {
                  this.fairyExp = (byte) Integer.parseInt(expRate);
               }

               long initRemain = 0L;

               try {
                  Date date = sdf.parse(fairyTime);
                  Date date2 = sdf.parse(test);
                  initRemain = (date2.getTime() - date.getTime()) / 1000L - 60 * Integer.parseInt(equippedMinute);
               } catch (Exception var16) {
               }

               this.updateInfoQuestNoChangeTime(27039,
                     equip.getUniqueId() + "=" + fairyTime + "|" + test + "|" + initRemain + "|0|0");
               this.send(
                     this.BonusExpRateChanged(
                           exSlot,
                           GameConstants.getFairyPendantEnhance(equip.getItemId(), this.fairyExp),
                           Integer.parseInt(expRate),
                           Integer.parseInt(equippedMinute),
                           true));
               this.updateInfoQuestNoChangeTime(
                     27039, equip.getUniqueId() + "=" + fairyTime + "|" + test + "|" + initRemain + "|" + expRate + "|"
                           + equippedMinute);
            }

            this.setLastFairyTime(System.currentTimeMillis());
         }
      } else {
         this.doReadyToFairy();
      }
   }

   public byte[] BonusExpRateChanged(boolean exSlot, int enhance, int rate, int minute, boolean message) {
      PacketEncoder p = new PacketEncoder();
      p.writeShort(SendPacketOpcode.BonusExpRateChanged.getValue());
      p.writeInt(exSlot ? 31 : 17);
      p.writeInt(enhance);
      p.writeInt(rate);
      p.writeInt(minute);
      p.writeInt(0);
      p.write(message);
      return p.getPacket();
   }

   public final boolean canFairy(long now) {
      return this.getLastFairyTime() > 0L && this.getLastFairyTime() + 60000L < now;
   }

   public final boolean canRoadRing(long now) {
      return this.lastRoadRingExpBoostTime == 0L || this.lastRoadRingExpBoostTime + 3600000L < now;
   }

   public final boolean canHP(long now) {
      if (this.lastHPTime + 5000L < now) {
         this.lastHPTime = now;
         return true;
      } else {
         return false;
      }
   }

   public final boolean canMP(long now) {
      if (this.lastMPTime + 5000L < now) {
         this.lastMPTime = now;
         return true;
      } else {
         return false;
      }
   }

   public final boolean canHPRecover(long now) {
      if (this.stats.hpRecoverTime > 0 && this.lastHPTime + this.stats.hpRecoverTime < now) {
         this.lastHPTime = now;
         return true;
      } else {
         return false;
      }
   }

   public final boolean canMPRecover(long now) {
      if (this.stats.mpRecoverTime > 0 && this.lastMPTime + this.stats.mpRecoverTime < now) {
         this.lastMPTime = now;
         return true;
      } else {
         return false;
      }
   }

   public void cancelFairySchedule(boolean unequip) {
      if (unequip) {
         this.fairyExp = 0;
         this.updateInfoQuest(27039, "");
         this.send(this.BonusExpRateChanged(true, 0, 0, 0, false));
         this.send(this.BonusExpRateChanged(false, 0, 0, 0, false));
      }

      this.setLastFairyTime(0L);
   }

   public void doReadyToFairy() {
      boolean exSlot = false;
      Item item = this.getInventory(MapleInventoryType.EQUIPPED).getItem((short) -17);
      if (item == null || item.getItemId() != 1122271 && item.getItemId() != 1122334) {
         exSlot = true;
         item = this.getInventory(MapleInventoryType.EQUIPPED).getItem((short) -31);
      }

      if (item != null) {
         this.fairyExp = 30;
         this.send(this.BonusExpRateChanged(exSlot, 2, 30, 0, true));
      }
   }

   public void doFairy() {
      Equip equip = null;
      boolean exSlot = false;
      Item item = this.getInventory(MapleInventoryType.EQUIPPED).getItem((short) -17);
      if (item != null && GameConstants.isFairyPendant(item.getItemId())) {
         equip = (Equip) item;
      }

      if ((item = this.getInventory(MapleInventoryType.EQUIPPED).getItem((short) -31)) != null
            && GameConstants.isFairyPendant(item.getItemId())) {
         exSlot = true;
         equip = (Equip) item;
      }

      if (equip != null) {
         if (this.getOneInfo(27039, equip.getUniqueId() + "") != null && this.fairyExp < 30) {
            boolean message = false;
            String fairyInfo = this.getOneInfo(27039, equip.getUniqueId() + "");
            String fairyTime = fairyInfo.split("\\|")[0];
            String lastfairyTime = fairyInfo.split("\\|")[1];
            String remain = fairyInfo.split("\\|")[2];
            String expRate = fairyInfo.split("\\|")[3];
            String equippedMinute = fairyInfo.split("\\|")[4];
            equippedMinute = Integer.parseInt(equippedMinute) + 1 + "";
            if (Integer.parseInt(equippedMinute) >= 60 && Integer.parseInt(equippedMinute) < 120) {
               if (Integer.parseInt(expRate) < 20) {
                  this.fairyExp = 20;
                  message = true;
               }
            } else if (Integer.parseInt(equippedMinute) >= 120 && Integer.parseInt(expRate) < 30) {
               this.fairyExp = 30;
               message = true;
            }

            this.send(
                  this.BonusExpRateChanged(
                        exSlot, GameConstants.getFairyPendantEnhance(equip.getItemId(), this.fairyExp), this.fairyExp,
                        Integer.parseInt(equippedMinute), message));
            this.updateInfoQuestNoChangeTime(
                  27039, equip.getUniqueId() + "=" + fairyTime + "|" + lastfairyTime + "|" + remain + "|"
                        + this.fairyExp + "|" + equippedMinute);
         }

         this.setLastFairyTime(System.currentTimeMillis());
      }
   }

   public void doRoadRing() {
      boolean equipped = false;

      for (int i = -12; i > -15; i--) {
         Equip equip = (Equip) this.getInventory(MapleInventoryType.EQUIPPED).getItem((short) i);
         if (equip != null && equip.getItemId() == 1113085) {
            equipped = true;
         }
      }

      if (equipped && this.getRoadRingExpBoost() < 30) {
         this.setRoadRingExpBoost(this.getRoadRingExpBoost() + 10);
         if (this.getRoadRingExpBoost() > 10) {
            this.dropMessage(5, "무르무르의 로드 링을 착용한지 " + this.getRoadRingExpBoost() / 10 + "시간이 지났습니다. "
                  + this.getRoadRingExpBoost() + "%의 보너스 경험치를 얻습니다.");
         } else {
            this.dropMessage(5,
                  "무르무르의 로드 링 착용으로 인해 몬스터 사냥 시 보너스 경험치 " + this.getRoadRingExpBoost() + "%를 추가로 획득하게 됩니다.");
         }

         this.getStat().recalcLocalStats(this);
         this.lastRoadRingExpBoostTime = System.currentTimeMillis();
      }
   }

   public byte getFairyExp() {
      return this.fairyExp;
   }

   public void setFairyExp(byte exp) {
      this.fairyExp = exp;
   }

   public int getTeam() {
      return this.coconutteam;
   }

   public void setTeam(int v) {
      this.coconutteam = v;
   }

   public void clearLinkMid() {
      this.linkMobs.clear();
      this.temporaryStatReset(SecondaryStatFlag.ArcaneAim);
   }

   public int getFirstLinkMid() {
      Iterator var1 = this.linkMobs.keySet().iterator();
      if (var1.hasNext()) {
         Integer lm = (Integer) var1.next();
         return lm;
      } else {
         return 0;
      }
   }

   public Map<Integer, Integer> getAllLinkMid() {
      return this.linkMobs;
   }

   public void setLinkMid(int lm, int x) {
      this.linkMobs.put(lm, x);
   }

   public int getDamageIncrease(int lm) {
      return this.linkMobs.containsKey(lm) ? this.linkMobs.get(lm) : 0;
   }

   public boolean isClone() {
      return this.clone;
   }

   public void setClone(boolean c) {
      this.clone = c;
   }

   public MapleCharacter cloneLooks() {
      MapleClient cs = this.client;
      int minus = this.getId() + Randomizer.nextInt(Integer.MAX_VALUE - this.getId());
      MapleCharacter ret = new MapleCharacter(true);
      ret.id = minus;
      ret.client = cs;
      ret.exp = 0L;
      ret.meso = 0L;
      ret.remainingAp = 0;
      ret.fame = 0;
      ret.accountid = this.client.getAccID();
      ret.anticheat = this.anticheat;
      ret.name = this.name;
      ret.level = this.level;
      ret.fame = this.fame;
      ret.job = this.job;
      ret.hair = this.hair;
      ret.addcolor = this.addcolor;
      ret.basecolor = this.basecolor;
      ret.baseprob = this.baseprob;
      ret.face = this.face;
      ret.faceAddColor = this.faceAddColor;
      ret.faceBaseColor = this.faceBaseColor;
      ret.faceBaseProb = this.faceBaseProb;
      ret.demonMarking = this.demonMarking;
      ret.skinColor = this.skinColor;
      ret.mount = this.mount;
      ret.gmLevel = this.gmLevel;
      ret.gender = this.gender;
      ret.mapid = this.map.getId();
      ret.map = this.map;
      ret.setStance(this.getStance());
      ret.chair = this.chair;
      ret.itemEffect = this.itemEffect;
      ret.guildid = this.guildid;
      ret.stats = this.stats;
      ret.guildrank = this.guildrank;
      ret.guildContribution = this.guildContribution;
      ret.allianceRank = this.allianceRank;
      ret.setPosition(this.getTruePosition());

      for (Item equip : this.getInventory(MapleInventoryType.EQUIPPED).newList()) {
         ret.getInventory(MapleInventoryType.EQUIPPED).addFromDB(equip.copy());
      }

      ret.skillMacros = this.skillMacros;
      ret.keylayout = this.keylayout;
      ret.questinfo = this.questinfo;
      ret.custominfo = this.custominfo;
      ret.savedLocations = this.savedLocations;
      ret.wishlist = this.wishlist;
      ret.buddylist = this.buddylist;
      ret.keydown_skill = 0L;
      ret.lastmonthfameids = this.lastmonthfameids;
      ret.lastfametime = this.lastfametime;
      ret.storage = this.storage;
      ret.cs = this.cs;
      ret.client.setAccountName(this.client.getAccountName());
      ret.acash = this.acash;
      ret.maplepoints = this.maplepoints;
      ret.clone = true;
      ret.client.setChannel(this.client.getChannel());

      while (this.map.getCharacterById(ret.id) != null
            || this.client.getChannelServer().getPlayerStorage().getCharacterById(ret.id) != null) {
         ret.id++;
      }

      return ret;
   }

   public void setDragon(Dragon d) {
      this.dragon = d;
   }

   public Extractor getExtractor() {
      return this.extractor;
   }

   public void setExtractor(Extractor me) {
      this.removeExtractor();
      this.extractor = me;
   }

   public void removeExtractor() {
      if (this.extractor != null) {
         this.map.broadcastMessage(CField.removeExtractor(this.id));
         this.map.removeMapObject(this.extractor);
         this.extractor = null;
      }
   }

   public void resetStats(int str, int dex, int int_, int luk) {
      Map<MapleStat, Long> stat = new EnumMap<>(MapleStat.class);
      int total = this.stats.getStr() + this.stats.getDex() + this.stats.getLuk() + this.stats.getInt()
            + this.getRemainingAp();
      total -= str;
      this.stats.str = (short) str;
      total -= dex;
      this.stats.dex = (short) dex;
      total -= int_;
      this.stats.int_ = (short) int_;
      total -= luk;
      this.stats.luk = (short) luk;
      this.setRemainingAp((short) total);
      this.stats.recalcLocalStats(this);
      stat.put(MapleStat.STR, (long) str);
      stat.put(MapleStat.DEX, (long) dex);
      stat.put(MapleStat.INT, (long) int_);
      stat.put(MapleStat.LUK, (long) luk);
      stat.put(MapleStat.AVAILABLEAP, (long) total);
      this.client.getSession().writeAndFlush(CWvsContext.updatePlayerStats(stat, false, this));
   }

   public Event_PyramidSubway getPyramidSubway() {
      return this.pyramidSubway;
   }

   public void setPyramidSubway(Event_PyramidSubway ps) {
      this.pyramidSubway = ps;
   }

   public byte getSubcategory() {
      if (this.job >= 430 && this.job <= 434) {
         return 1;
      } else if (GameConstants.isCannon(this.job) || this.job == 1) {
         return 2;
      } else {
         return this.job != 0 && this.job != 400 ? 0 : this.subcategory;
      }
   }

   public void setSubcategory(int z) {
      this.subcategory = (byte) z;
   }

   public int itemQuantity(int itemid) {
      return this.getInventory(GameConstants.getInventoryType(itemid)).countById(itemid);
   }

   public void setRPS(RockPaperScissors rps) {
      this.rps = rps;
   }

   public RockPaperScissors getRPS() {
      return this.rps;
   }

   public long getNextConsume() {
      return this.nextConsume;
   }

   public void setNextConsume(long nc) {
      PacketEncoder packet = new PacketEncoder();
      packet.writeShort(SendPacketOpcode.USE_ITEM_COOLTIME.getValue());
      this.send(packet.getPacket());
      this.nextConsume = nc;
   }

   public boolean needQuestItem(int questid, int itemid) {
      if (questid <= 0) {
         return true;
      } else {
         MapleQuest quest = MapleQuest.getInstance(questid);
         return this.getInventory(GameConstants.getInventoryType(itemid)).countById(itemid) < quest
               .getItemAmountNeeded(itemid);
      }
   }

   public int getRank() {
      return this.rank;
   }

   public int getRankMove() {
      return this.rankMove;
   }

   public int getJobRank() {
      return this.jobRank;
   }

   public int getJobRankMove() {
      return this.jobRankMove;
   }

   public void changeChannel(int channel) {
      this.changeChannel(channel, -1);
   }

   public void changeChannel(int channel, int newField) {
      try {
         this.processChangeChannel = true;
         if (newField >= 0) {
            this.ccByScript = true;
            this.mapid = newField;
         }

         GameServer toch = GameServer.getInstance(channel);
         if (channel == this.client.getChannel() || toch == null || toch.isShutdown()) {
            this.client.getSession().writeAndFlush(CField.channelBlocked(1));
            return;
         }

         this.changeRemoval();
         this.stopMesoChairTask();
         GameServer gameServer = GameServer.getInstance(this.client.getChannel());
         if (this.getMessenger() != null) {
            Center.Messenger.silentLeaveMessenger(this.getMessenger().getId(), new MessengerCharacter(this));
         }

         PlayerBuffStorage.addCooldownsToStorage(this.getId(), this.getCooldowns());
         PlayerBuffStorage.addDiseaseToStorage(this.getId(), this.getDiseasesList());
         Center.ChannelChange_Data(new CharacterTransfer(this), this.getId(), channel);
         gameServer.removePlayer(this);
         this.client.updateLoginState(3, this.client.getSessionIPAddress());
         this.getMap().removePlayer(this);
         this.client.setPlayer(this);
         this.client.setReceiving(false);
         this.saveToDB(false, false);
         this.client.getSession()
               .writeAndFlush(CField.getChannelChange(this.client, Integer.parseInt(toch.getIP().split(":")[1])));
      } catch (Exception var5) {
         System.out.println("[오류] 캐릭터 changeChannel 함수 실행 중 오류 발생! (Name : " + this.getName() + ") " + var5.toString());
         var5.printStackTrace();
      }
   }

   public void expandInventory(byte type, int amount) {
      MapleInventory inv = this.getInventory(MapleInventoryType.getByType(type));
      inv.addSlot((byte) amount);
      this.client.getSession()
            .writeAndFlush(CWvsContext.InventoryPacket.getSlotUpdate(type, (byte) inv.getSlotLimit()));
   }

   public boolean allowedToTarget(MapleCharacter other) {
      return other != null && (!other.isHidden() || this.getGMLevel() >= other.getGMLevel());
   }

   public int getFollowId() {
      return this.followid;
   }

   public void setFollowId(int fi) {
      this.followid = fi;
      if (fi == 0) {
         this.followinitiator = false;
         this.followon = false;
      }
   }

   public void setFollowInitiator(boolean fi) {
      this.followinitiator = fi;
   }

   public void setFollowOn(boolean fi) {
      this.followon = fi;
   }

   public boolean isFollowOn() {
      return this.followon;
   }

   public boolean isFollowInitiator() {
      return this.followinitiator;
   }

   public void checkFollow() {
      if (this.followid > 0) {
         if (this.followon) {
            this.map.broadcastMessage(CField.followEffect(this.id, 0, null));
            this.map.broadcastMessage(CField.followEffect(this.followid, 0, null));
         }

         MapleCharacter tt = this.map.getCharacterById(this.followid);
         if (tt != null) {
            tt.setFollowId(0);
            tt.getClient().getSession().writeAndFlush(CField.chatMsg(11, "따라가기가 해제되었습니다."));
         }

         this.setFollowId(0);
      }
   }

   public int getMarriageId() {
      return this.marriageId;
   }

   public void setMarriageId(int mi) {
      this.marriageId = mi;
   }

   public int getMarriageItemId() {
      return this.marriageItemId;
   }

   public void setMarriageItemId(int mi) {
      this.marriageItemId = mi;
   }

   public boolean isStaff() {
      return this.gmLevel >= ServerConstants.PlayerGMRank.INTERN.getLevel();
   }

   public boolean isDonator() {
      return this.gmLevel >= ServerConstants.PlayerGMRank.DONATOR.getLevel();
   }

   public boolean startPartyQuest(int questid) {
      boolean ret = false;
      MapleQuest q = MapleQuest.getInstance(questid);
      if (q != null && q.isPartyQuest()) {
         if (!this.quests.containsKey(q) || !this.questinfo.containsKey(questid)) {
            MapleQuestStatus status = this.getQuestIfNullAdd(q);
            status.setStatus((byte) 1);
            this.updateQuest(status);
            switch (questid) {
               case 1204:
                  this.updateInfoQuest(questid,
                        "min=0;sec=0;date=0000-00-00;have0=0;have1=0;have2=0;have3=0;rank=F;try=0;cmp=0;CR=0;VR=0");
                  break;
               case 1206:
                  this.updateInfoQuest(questid,
                        "min=0;sec=0;date=0000-00-00;have0=0;have1=0;rank=F;try=0;cmp=0;CR=0;VR=0");
                  break;
               case 1300:
               case 1301:
               case 1302:
                  this.updateInfoQuest(questid,
                        "min=0;sec=0;date=0000-00-00;have=0;rank=F;try=0;cmp=0;CR=0;VR=0;gvup=0;vic=0;lose=0;draw=0");
                  break;
               case 1303:
                  this.updateInfoQuest(questid,
                        "min=0;sec=0;date=0000-00-00;have=0;have1=0;rank=F;try=0;cmp=0;CR=0;VR=0;vic=0;lose=0");
                  break;
               default:
                  this.updateInfoQuest(questid, "min=0;sec=0;date=0000-00-00;have=0;rank=F;try=0;cmp=0;CR=0;VR=0");
            }

            ret = true;
         }

         return ret;
      } else {
         return false;
      }
   }

   public String getOneInfo(int questid, String key) {
      if (this.questinfo.containsKey(questid) && key != null) {
         QuestEx ex = this.questinfo.get(questid);
         if (ex == null) {
            return null;
         } else {
            String[] split = ex.getData().split(";");

            for (String x : split) {
               String[] split2 = x.split("=");
               if (split2.length == 2 && split2[0].equals(key)) {
                  return split2[1];
               }
            }

            return null;
         }
      } else {
         return null;
      }
   }

   public void removeOneInfo(int questID, String key) {
      QuestEx questInfo = this.getInfoQuest(questID);
      if (questInfo != null) {
         String[] data = questInfo.getData().split(";");

         for (String s : data) {
            if (s.startsWith(key + "=")) {
               String newkey = questInfo.getData().replace(s + ";", "");
               this.updateInfoQuest(questID, newkey);
               return;
            }
         }

         this.updateInfoQuest(questID, questInfo.getData());
      }
   }

   public void updateOneInfo(int questID, String key, String value) {
      this.updateOneInfo(questID, key, value, true);
   }

   public int getTogetherPoint() {
      return this.getOneInfoQuestInteger(QuestExConstants.JinQuestEx.getQuestID(), "TogetherPoint");
   }

   public void gainTogetherPoint(int gain) {
      int point = this.getTogetherPoint();
      if (point + gain >= 0) {
         this.updateOneInfo(QuestExConstants.JinQuestEx.getQuestID(), "TogetherPoint", String.valueOf(point + gain));
      }
   }

   public void updateOneInfo(int questid, String key, String value, boolean send) {
      if (questid == 26022 && key.equals("gameType") && value.equals("-1")
            && this.isQuestStarted(QuestExConstants.NeoEventRandomPortal.getQuestID())) {
         MapleQuestStatus status = this
               .getQuest(MapleQuest.getInstance(QuestExConstants.NeoEventRandomPortal.getQuestID()));
         if (status != null) {
            String v = "000";
            int count = this.getOneInfoQuestInteger(QuestExConstants.NeoEventRandomPortal.getQuestID(), "count");
            if (count < 5) {
               v = StringUtil.getLeftPaddedStr(String.valueOf(++count), '0', 3);
               status.setCustomData(v);
               this.updateQuest(status);
               this.updateOneInfo(QuestExConstants.NeoEventRandomPortal.getQuestID(), "count", String.valueOf(count),
                     send);
               if (count >= 5) {
                  this.updateOneInfo(QuestExConstants.NeoEventAdventureLog.getQuestID(), "state", "2", send);
               }
            }
         }
      }

      QuestEx ex = this.getInfoQuest(questid);
      String allValue = "";
      if (ex != null) {
         allValue = ex.getData();
         if (allValue != null && !allValue.isEmpty()) {
            Map<String, String> values = new HashMap<>();
            String[] keyvalues = allValue.split(";");

            for (String keyvalue : keyvalues) {
               String[] keyandvalue = keyvalue.split("=");
               if (keyandvalue.length > 0) {
                  values.put(keyandvalue[0], keyandvalue.length == 1 ? "" : keyandvalue[1]);
               }
            }

            values.remove(key);
            values.put(key, value);
            int size = 1;
            allValue = "";

            for (Entry<String, String> e : values.entrySet()) {
               allValue = allValue + e.getKey() + "=" + e.getValue();
               if (size < values.size()) {
                  allValue = allValue + ";";
               }

               size++;
            }
         } else {
            allValue = key + "=" + value;
         }
      } else {
         allValue = key + "=" + value;
      }

      this.updateInfoQuest(questid, allValue, send);
   }

   public void updateOneInfoCustom(String mainKey, String subKey, String value) {
      String ex = this.getInfoCustom(mainKey);
      String allValue = "";
      if (ex != null) {
         if (ex != null && !ex.isEmpty()) {
            Map<String, String> values = new HashMap<>();
            String[] keyvalues = ex.split(";");

            for (String keyvalue : keyvalues) {
               String[] keyandvalue = keyvalue.split("=");
               if (keyandvalue.length > 0) {
                  values.put(keyandvalue[0], keyandvalue.length == 1 ? "" : keyandvalue[1]);
               }
            }

            values.remove(subKey);
            values.put(subKey, value);
            int size = 1;
            allValue = "";

            for (Entry<String, String> e : values.entrySet()) {
               allValue = allValue + e.getKey() + "=" + e.getValue();
               if (size < values.size()) {
                  allValue = allValue + ";";
               }

               size++;
            }
         } else {
            allValue = subKey + "=" + value;
         }
      } else {
         allValue = subKey + "=" + value;
      }

      this.setTempKeyValue("SaveCustom", "1");
      this.custominfo.put(mainKey, allValue);
   }

   public void recalcPartyQuestRank(int questid) {
      if (MapleQuest.getInstance(questid) != null && MapleQuest.getInstance(questid).isPartyQuest()) {
         if (!this.startPartyQuest(questid)) {
            String oldRank = this.getOneInfo(questid, "rank");
            if (oldRank == null || oldRank.equals("S")) {
               return;
            }

            String newRank = null;
            if (oldRank.equals("A")) {
               newRank = "S";
            } else if (oldRank.equals("B")) {
               newRank = "A";
            } else if (oldRank.equals("C")) {
               newRank = "B";
            } else if (oldRank.equals("D")) {
               newRank = "C";
            } else {
               if (!oldRank.equals("F")) {
                  return;
               }

               newRank = "D";
            }

            List<Pair<String, Pair<String, Integer>>> questInfo = MapleQuest.getInstance(questid)
                  .getInfoByRank(newRank);
            if (questInfo == null) {
               return;
            }

            for (Pair<String, Pair<String, Integer>> q : questInfo) {
               boolean found = false;
               String val = this.getOneInfo(questid, (String) q.right.left);
               if (val == null) {
                  return;
               }

               int vall = 0;

               try {
                  vall = Integer.parseInt(val);
               } catch (NumberFormatException var11) {
                  return;
               }

               if (q.left.equals("less")) {
                  found = vall < (Integer) q.right.right;
               } else if (q.left.equals("more")) {
                  found = vall > (Integer) q.right.right;
               } else if (q.left.equals("equal")) {
                  found = vall == (Integer) q.right.right;
               }

               if (!found) {
                  return;
               }
            }

            this.updateOneInfo(questid, "rank", newRank);
         }
      }
   }

   public void tryPartyQuest(int questid) {
      if (MapleQuest.getInstance(questid) != null && MapleQuest.getInstance(questid).isPartyQuest()) {
         try {
            this.startPartyQuest(questid);
            this.pqStartTime = System.currentTimeMillis();
            this.updateOneInfo(questid, "try", String.valueOf(Integer.parseInt(this.getOneInfo(questid, "try")) + 1));
         } catch (Exception var3) {
            var3.printStackTrace();
            System.out.println("tryPartyQuest error");
         }
      }
   }

   public void endPartyQuest(int questid) {
      if (MapleQuest.getInstance(questid) != null && MapleQuest.getInstance(questid).isPartyQuest()) {
         try {
            this.startPartyQuest(questid);
            if (this.pqStartTime > 0L) {
               long changeTime = System.currentTimeMillis() - this.pqStartTime;
               int mins = (int) (changeTime / 1000L / 60L);
               int secs = (int) (changeTime / 1000L % 60L);
               int mins2 = Integer.parseInt(this.getOneInfo(questid, "min"));
               if (mins2 <= 0 || mins < mins2) {
                  this.updateOneInfo(questid, "min", String.valueOf(mins));
                  this.updateOneInfo(questid, "sec", String.valueOf(secs));
                  this.updateOneInfo(questid, "date", FileoutputUtil.CurrentReadable_Date());
               }

               int newCmp = Integer.parseInt(this.getOneInfo(questid, "cmp")) + 1;
               this.updateOneInfo(questid, "cmp", String.valueOf(newCmp));
               this.updateOneInfo(questid, "CR", String
                     .valueOf((int) Math.ceil(newCmp * 100.0 / Integer.parseInt(this.getOneInfo(questid, "try")))));
               this.recalcPartyQuestRank(questid);
               this.pqStartTime = 0L;
            }
         } catch (Exception var8) {
            var8.printStackTrace();
            System.out.println("endPartyQuest error");
         }
      }
   }

   public void havePartyQuest(int itemId) {
      int questid = 0;
      int index = -1;
      short var4;
      switch (itemId) {
         case 1002571:
         case 1002572:
         case 1002573:
         case 1002574:
            var4 = 1204;
            index = itemId - 1002571;
            break;
         case 1002798:
            var4 = 1200;
            break;
         case 1022073:
            var4 = 1202;
            break;
         case 1032060:
         case 1032061:
            var4 = 1206;
            index = itemId - 1032060;
            break;
         case 1072369:
            var4 = 1201;
            break;
         case 1082232:
            var4 = 1203;
            break;
         case 1102226:
            var4 = 1303;
            break;
         case 1102227:
            var4 = 1303;
            index = 0;
            break;
         case 1122007:
            var4 = 1301;
            break;
         case 1122010:
            var4 = 1205;
            break;
         case 1122058:
            var4 = 1302;
            break;
         case 3010018:
            var4 = 1300;
            break;
         default:
            return;
      }

      if (MapleQuest.getInstance(var4) != null && MapleQuest.getInstance(var4).isPartyQuest()) {
         this.startPartyQuest(var4);
         this.updateOneInfo(var4, "have" + (index == -1 ? "" : index), "1");
      }
   }

   public void resetStatsByJob(boolean beginnerJob) {
      int baseJob = beginnerJob ? this.job % 1000 : this.job % 1000 / 100 * 100;
      boolean UA = this.getQuestNoAdd(MapleQuest.getInstance(111111)) != null;
      if (this.job == 16200) {
         this.resetStats(4, 4, 58, 4);
      } else {
         if (baseJob == 100) {
            this.resetStats(UA ? 4 : 35, 4, 4, 4);
         } else if (baseJob == 200) {
            this.resetStats(4, 4, UA ? 4 : 20, 4);
         } else if (baseJob == 300 || baseJob == 400) {
            this.resetStats(4, UA ? 4 : 25, 4, 4);
         } else if (baseJob == 500) {
            this.resetStats(4, UA ? 4 : 20, 4, 4);
         } else if (baseJob == 0) {
            this.resetStats(4, 4, 4, 4);
         }
      }
   }

   public boolean hasSummon() {
      return this.hasSummon;
   }

   public void setHasSummon(boolean summ) {
      this.hasSummon = summ;
   }

   public void removeDoor() {
      TownPortal door = this.getDoors().iterator().next();

      for (MapleCharacter chr : door.getTarget().getCharactersThreadsafe()) {
         door.sendDestroyData(chr.getClient());
      }

      for (MapleCharacter chr : door.getTown().getCharactersThreadsafe()) {
         door.sendDestroyData(chr.getClient());
      }

      for (TownPortal destroyDoor : this.getDoors()) {
         door.getTarget().removeMapObject(destroyDoor);
         door.getTown().removeMapObject(destroyDoor);
      }

      this.clearDoors();
   }

   public void removeMechDoor() {
      for (OpenGate destroyDoor : this.getMechDoors()) {
         for (MapleCharacter chr : this.getMap().getCharactersThreadsafe()) {
            destroyDoor.sendDestroyData(chr.getClient());
         }

         this.getMap().removeMapObject(destroyDoor);
      }

      this.clearMechDoors();
   }

   public void changeRemoval() {
      this.changeRemoval(false);
   }

   public void changeRemoval(boolean dc) {
      if (this.getCheatTracker() != null && dc) {
         this.getCheatTracker().dispose();
      }

      if (!dc) {
         this.temporaryStatReset(SecondaryStatFlag.Recovery);
      }

      if (this.getPyramidSubway() != null) {
         this.getPyramidSubway().dispose(this);
      }

      if (this.playerShop != null && !dc) {
         this.playerShop.removeVisitor(this);
         if (this.playerShop.isOwner(this)) {
            this.playerShop.setOpen(true);
         }
      }

      if (!this.getDoors().isEmpty()) {
         this.removeDoor();
      }

      if (!this.getMechDoors().isEmpty()) {
         this.removeMechDoor();
      }

      Integer chairRiding = this.getBuffedValue(SecondaryStatFlag.RideVehicle);
      if (chairRiding != null) {
         MapleItemInformationProvider ii = MapleItemInformationProvider.getInstance();
         if (ii.isChairTaimingMob(chairRiding)) {
            this.temporaryStatReset(SecondaryStatFlag.RideVehicle);
         }
      }

      NPCScriptManager.getInstance().dispose(this.client);
      if (dc) {
         this.cancelFairySchedule(false);
      }
   }

   public String getTeleportName() {
      return this.teleportname;
   }

   public void setTeleportName(String tname) {
      this.teleportname = tname;
   }

   public int maxBattleshipHP(int skillid) {
      return this.getTotalSkillLevel(skillid) * 5000 + (this.getLevel() - 120) * 3000;
   }

   public int currentBattleshipHP() {
      return this.battleshipHP;
   }

   public void setBattleshipHP(int v) {
      this.battleshipHP = v;
   }

   public void decreaseBattleshipHP() {
      this.battleshipHP--;
   }

   public boolean isInBlockedMap() {
      if (this.isAlive()
            && this.getPyramidSubway() == null
            && this.getMap().getSquadByMap() == null
            && this.getEventInstance() == null
            && this.getMap().getEMByMap() == null) {
         if ((this.getMapId() < 680000210 || this.getMapId() > 680000502)
               && (this.getMapId() / 10000 != 92502 || this.getMapId() < 925020100)
               && this.getMapId() / 10000 != 92503
               && this.getMapId() != 180000002) {
            for (int i : GameConstants.blockedMaps) {
               if (this.getMapId() == i) {
                  return true;
               }
            }

            return false;
         } else {
            return true;
         }
      } else {
         return true;
      }
   }

   public boolean isInTownMap() {
      if (this.getMap().isTown() && !FieldLimitType.VipRock.check(this.getMap().getFieldLimit())
            && this.getEventInstance() == null) {
         for (int i : GameConstants.blockedMaps) {
            if (this.getMapId() == i) {
               return false;
            }
         }

         return true;
      } else {
         return false;
      }
   }

   public void startPartySearch(List<Integer> jobs, int maxLevel, int minLevel, int membersNeeded) {
      for (MapleCharacter chr : this.map.getCharacters()) {
         if (chr.getId() != this.id
               && chr.getParty() == null
               && chr.getLevel() >= minLevel
               && chr.getLevel() <= maxLevel
               && (jobs.isEmpty() || jobs.contains(Integer.valueOf(chr.getJob())))
               && (this.isGM() || !chr.isGM())) {
            if (this.party == null
                  || this.party.getPartyMember().getPartyMemberList().size() >= 6
                  || this.party.getPartyMember().getPartyMemberList().size() >= membersNeeded) {
               break;
            }

            chr.setParty(this.party);
            Center.Party.updateParty(this.party.getId(), PartyOperation.Join, new PartyMemberEntry(chr));
            chr.receivePartyMemberHP();
            chr.updatePartyMemberHP();
         }
      }
   }

   public int getChallenge() {
      return this.challenge;
   }

   public void setChallenge(int c) {
      this.challenge = c;
   }

   public short getFatigue() {
      return this.fatigue;
   }

   public void setFatigue(int j) {
      this.fatigue = (short) Math.max(0, j);
      this.updateSingleStat(MapleStat.FATIGUE, this.fatigue, true);
   }

   public void statReset() {
      short remainStat = this.getRemainingAp();
      int str = this.getStat().getStr() - 4;
      int dex = this.getStat().getDex() - 4;
      int Int = this.getStat().getInt() - 4;
      int luk = this.getStat().getLuk() - 4;
      short remain = (short) Math.min(32767, str + dex + Int + luk + remainStat);
      this.setRemainingAp(remain);
      this.getStat().setStr((short) 4, this);
      this.getStat().setDex((short) 4, this);
      this.getStat().setInt((short) 4, this);
      this.getStat().setLuk((short) 4, this);
      Map<MapleStat, Long> statups = new EnumMap<>(MapleStat.class);
      statups.put(MapleStat.STR, 4L);
      statups.put(MapleStat.DEX, 4L);
      statups.put(MapleStat.INT, 4L);
      statups.put(MapleStat.LUK, 4L);
      statups.put(MapleStat.AVAILABLEAP, (long) remain);
      this.send(CWvsContext.updatePlayerStats(statups, true, this));
   }

   public void fakeRelog() {
      this.client.getSession().writeAndFlush(CField.getCharInfo(this));
      Field mapp = this.getMap();
      mapp.setCheckStates(false);
      mapp.removePlayer(this);
      mapp.addPlayer(this);
      mapp.setCheckStates(true);
   }

   public boolean canSummon() {
      return this.canSummon(5000);
   }

   public boolean canSummon(int g) {
      if (this.lastSummonTime + g < System.currentTimeMillis()) {
         this.lastSummonTime = System.currentTimeMillis();
         return true;
      } else {
         return false;
      }
   }

   public int getIntNoRecord(int questID) {
      MapleQuestStatus stat = this.getQuestNoAdd(MapleQuest.getInstance(questID));
      return stat != null && stat.getCustomData() != null ? Integer.parseInt(stat.getCustomData()) : 0;
   }

   public int getIntRecord(int questID) {
      MapleQuestStatus stat = this.getQuestIfNullAdd(MapleQuest.getInstance(questID));
      if (stat.getCustomData() == null) {
         stat.setCustomData("0");
      }

      return Integer.parseInt(stat.getCustomData());
   }

   public void updatePetAuto() {
      if (this.getIntNoRecord(122221) > 0) {
         this.client.getSession().writeAndFlush(CField.petAutoHP(this.getIntRecord(122221)));
      }

      if (this.getIntNoRecord(122223) > 0) {
         this.client.getSession().writeAndFlush(CField.petAutoMP(this.getIntRecord(122223)));
      }
   }

   public void sendEnglishQuiz(String msg) {
   }

   public void setChangeTime() {
      this.mapChangeTime = System.currentTimeMillis();
   }

   public long getChangeTime() {
      return this.mapChangeTime;
   }

   public Map<ReportType, Integer> getReports() {
      return this.reports;
   }

   public void addReport(ReportType type) {
      Integer value = this.reports.get(type);
      this.reports.put(type, value == null ? 1 : value + 1);
      this.setSaveFlag(this.getSaveFlag() | CharacterSaveFlag.REPORTS.getFlag());
   }

   public void clearReports(ReportType type) {
      this.reports.remove(type);
      this.setSaveFlag(this.getSaveFlag() | CharacterSaveFlag.REPORTS.getFlag());
   }

   public void clearReports() {
      this.reports.clear();
      this.setSaveFlag(this.getSaveFlag() | CharacterSaveFlag.REPORTS.getFlag());
   }

   public final int getReportPoints() {
      int ret = 0;

      for (Integer entry : this.reports.values()) {
         ret += entry;
      }

      return ret;
   }

   public final String getReportSummary() {
      StringBuilder ret = new StringBuilder();
      List<Pair<ReportType, Integer>> offenseList = new ArrayList<>();

      for (Entry<ReportType, Integer> entry : this.reports.entrySet()) {
         offenseList.add(new Pair<>(entry.getKey(), entry.getValue()));
      }

      Collections.sort(offenseList, new Comparator<Pair<ReportType, Integer>>() {
         public final int compare(Pair<ReportType, Integer> o1, Pair<ReportType, Integer> o2) {
            int thisVal = o1.getRight();
            int anotherVal = o2.getRight();
            return thisVal < anotherVal ? 1 : (thisVal == anotherVal ? 0 : -1);
         }
      });

      for (int x = 0; x < offenseList.size(); x++) {
         ret.append(StringUtil.makeEnumHumanReadable(((ReportType) offenseList.get(x).left).name()));
         ret.append(": ");
         ret.append(offenseList.get(x).right);
         ret.append(" ");
      }

      return ret.toString();
   }

   public short getScrolledPosition() {
      return this.scrolledPosition;
   }

   public void setScrolledPosition(short s) {
      this.scrolledPosition = s;
   }

   public MapleTrait getTrait(MapleTrait.MapleTraitType t) {
      return this.traits.get(t);
   }

   public Map<MapleTrait.MapleTraitType, MapleTrait> getTraits() {
      return this.traits;
   }

   public void forceCompleteQuest(int id) {
      MapleQuest.getInstance(id).forceComplete(this, 9270035);
   }

   public Map<Byte, List<Integer>> getExtendedSlots() {
      return this.extendedSlots;
   }

   public List<Integer> getExtendedSlots(byte type) {
      return this.extendedSlots.get(type);
   }

   public void changedExtended() {
      this.setSaveFlag(this.getSaveFlag() | CharacterSaveFlag.EXTENDED_SLOTS.getFlag());
   }

   public Android getAndroid() {
      return this.android;
   }

   public void removeAndroid() {
      if (this.map != null) {
         this.map.broadcastMessage(CField.deactivateAndroid(this.id));
      }

      this.android = null;
   }

   public void setAndroid(Android and) {
      this.android = and;
      if (this.map != null && and != null && !this.inBuzzingHouse()) {
         this.android.setStance(0);
         this.android.setPos(this.getPosition());
         this.map.broadcastMessage(this, CField.spawnAndroid(this, this.android), true);
         this.map.broadcastMessage(this, CField.showAndroidEmotion(this.getId(), Randomizer.nextInt(17) + 1), true);
      } else if (this.map != null && and == null) {
         this.map.broadcastMessage(this, CField.deactivateAndroid(this.getId()), true);
      }
   }

   public void updateAndroid() {
      if (this.map != null && this.android != null && !this.inBuzzingHouse()) {
         this.map.broadcastMessage(this, CField.spawnAndroid(this, this.android), true);
      } else if (this.map != null && this.android == null) {
         this.map.broadcastMessage(this, CField.deactivateAndroid(this.getId()), true);
      }
   }

   public List<Item> getRebuy() {
      return this.rebuy;
   }

   public ItemPot[] getItemPots() {
      return this.itemPots;
   }

   public int getBattlePoints() {
      return this.pvpPoints;
   }

   public int getTotalBattleExp() {
      return this.pvpExp;
   }

   public void setBattlePoints(int p) {
      if (p != this.pvpPoints) {
         this.client.getSession().writeAndFlush(CWvsContext.InfoPacket.getBPMsg(p - this.pvpPoints));
         this.updateSingleStat(MapleStat.BATTLE_POINTS, p);
      }

      this.pvpPoints = p;
   }

   public void setTotalBattleExp(int p) {
      int previous = this.pvpExp;
      this.pvpExp = p;
      if (p != previous) {
         this.stats.recalcPVPRank(this);
         this.updateSingleStat(MapleStat.BATTLE_EXP, this.stats.pvpExp);
         this.updateSingleStat(MapleStat.BATTLE_RANK, this.stats.pvpRank);
      }
   }

   public void changeTeam(int newTeam) {
      this.coconutteam = newTeam;
      if (this.inPVP()) {
         this.client.getSession().writeAndFlush(CField.getPVPTransform(newTeam + 1));
         this.map.broadcastMessage(CField.changeTeam(this.id, newTeam + 1));
      } else {
         this.client.getSession().writeAndFlush(CField.showEquipEffect(newTeam));
      }
   }

   public void disease(int type, int level) {
      if (SecondaryStatFlag.getBySkill(type) != null) {
         this.chair = 0;
         this.client.getSession().writeAndFlush(CField.cancelChair(-1, this));
         this.map.broadcastMessage(this, CField.showChair(this, 0, null, 0L), false);
         this.giveDebuff(SecondaryStatFlag.getBySkill(type), MobSkillFactory.getMobSkill(type, level));
      }
   }

   public boolean inPVP() {
      return this.eventInstance != null && this.eventInstance.getName().startsWith("PVP");
   }

   public void clearAllCooldowns() {
      for (MapleCoolDownValueHolder m : this.getCooldowns()) {
         int skil = m.skillId;
         this.removeCooldown(skil);
         this.client.getSession().writeAndFlush(CField.skillCooldown(skil, 0));
      }
   }

   public Pair<Double, Boolean> modifyDamageTaken(double damage, MapleMapObject attacke) {
      Pair<Double, Boolean> ret = new Pair<>(damage, false);
      if (damage <= 0.0) {
         return ret;
      } else {
         if (this.stats.ignoreDAMr > 0 && Randomizer.nextInt(100) < this.stats.ignoreDAMr_rate) {
            damage -= Math.floor(this.stats.ignoreDAMr * damage / 100.0);
         }

         if (this.stats.ignoreDAM > 0 && Randomizer.nextInt(100) < this.stats.ignoreDAM_rate) {
            damage -= this.stats.ignoreDAM;
         }

         SecondaryStatEffect barrier = this.getBuffedEffect(SecondaryStatFlag.MagicShield);
         if (barrier != null) {
            damage = barrier.getX() / 100.0 * damage;
         }

         barrier = this.getBuffedEffect(SecondaryStatFlag.DamAbsorbShield);
         if (barrier != null) {
            int x = (int) (barrier.getX() * (damage * 0.01));
            damage -= x;
         }

         List<Integer> attack = !(attacke instanceof MapleMonster) && attacke != null ? new ArrayList<>() : null;
         if (damage > 0.0) {
            if (this.getJob() == 122 && !this.skillisCooling(1210016)) {
               Skill divine = SkillFactory.getSkill(1210016);
               if (this.getTotalSkillLevel(divine) > 0) {
                  SecondaryStatEffect divineShield = divine.getEffect(this.getTotalSkillLevel(divine));
                  if (divineShield.makeChanceResult()) {
                     divineShield.applyTo(this);
                     this.client.getSession()
                           .writeAndFlush(CField.skillCooldown(1210016, divineShield.getCooldown(this)));
                     this.addCooldown(1210016, System.currentTimeMillis(), divineShield.getCooldown(this));
                  }
               }
            } else if (this.getJob() == 433 || this.getJob() == 434) {
               Skill divine = SkillFactory.getSkill(4330001);
               if (this.getTotalSkillLevel(divine) > 0 && this.getBuffedValue(SecondaryStatFlag.DarkSight) == null
                     && !this.skillisCooling(divine.getId())) {
                  SecondaryStatEffect divineShield = divine.getEffect(this.getTotalSkillLevel(divine));
                  if (Randomizer.nextInt(100) < divineShield.getX()) {
                     divineShield.applyTo(this);
                  }
               }
            } else if (this.getJob() == 411 || this.getJob() == 412) {
               Skill divine = SkillFactory.getSkill(4210015);
               if (this.getTotalSkillLevel(divine) > 0 && this.getBuffedValue(SecondaryStatFlag.DarkSight) == null
                     && !this.skillisCooling(divine.getId())) {
                  SecondaryStatEffect divineShield = divine.getEffect(this.getTotalSkillLevel(divine));
                  if (Randomizer.nextInt(100) < divineShield.getX()) {
                     divineShield.applyTo(this);
                  }
               }
            } else if (this.getJob() == 512) {
               SecondaryStatEffect effect = this.getBuffedEffect(SecondaryStatFlag.ViperDefenseForm);
               Skill divine = SkillFactory.getSkill(5120011);
               SecondaryStatEffect divineShield = divine.getEffect(this.getTotalSkillLevel(divine));
               boolean damReduce = false;
               if (effect != null) {
                  damReduce = true;
               }

               if (damReduce) {
                  damage = damage * (100 - divineShield.getY()) / 100.0;
               }
            } else if (this.getJob() == 312 && attacke != null) {
               Skill divinex = SkillFactory.getSkill(3120010);
               if (this.getTotalSkillLevel(divinex) > 0) {
                  SecondaryStatEffect divineShieldx = divinex.getEffect(this.getTotalSkillLevel(divinex));
                  if (divineShieldx.makeChanceResult()) {
                     if (attacke instanceof MapleMonster) {
                        Rectangle bounds = divineShieldx.calculateBoundingBox(this.getTruePosition(),
                              this.isFacingLeft());
                        List<MapleMapObject> affected = this.getMap().getMapObjectsInRect(bounds,
                              Arrays.asList(attacke.getType()));
                        int i = 0;

                        for (MapleMapObject mo : affected) {
                           MapleMonster mons = (MapleMonster) mo;
                           if (!mons.getStats().isFriendly() && !mons.isFake()) {
                              mons.applyStatus(
                                    this,
                                    new MobTemporaryStatEffect(MobTemporaryStatFlag.STUN, 1,
                                          divineShieldx.getSourceId(), null, false),
                                    false,
                                    divineShieldx.getDuration(),
                                    true,
                                    divineShieldx);
                              int theDmg = (int) (divineShieldx.getDamage() * this.getStat().getCurrentMaxBaseDamage()
                                    / 100.0);
                              mons.damage(this, theDmg, true);
                              this.getMap().broadcastMessage(MobPacket.damageMonster(mons.getObjectId(), theDmg));
                              if (++i >= divineShieldx.getMobCount()) {
                                 break;
                              }
                           }
                        }
                     } else {
                        MapleCharacter chr = (MapleCharacter) attacke;
                        chr.addHP(-divineShieldx.getDamage());
                        attack.add(Integer.valueOf(divineShieldx.getDamage()));
                     }
                  }
               }
            } else if ((this.getJob() == 531 || this.getJob() == 532) && attacke != null) {
               Skill divinex = SkillFactory.getSkill(5310009);
               if (this.getTotalSkillLevel(divinex) > 0) {
                  SecondaryStatEffect divineShieldx = divinex.getEffect(this.getTotalSkillLevel(divinex));
                  if (divineShieldx.makeChanceResult()) {
                     if (attacke instanceof MapleMonster) {
                        MapleMonster attacker = (MapleMonster) attacke;
                        int theDmg = (int) (divineShieldx.getDamage() * this.getStat().getCurrentMaxBaseDamage()
                              / 100.0);
                        attacker.damage(this, theDmg, true);
                        this.getMap().broadcastMessage(MobPacket.damageMonster(attacker.getObjectId(), theDmg));
                     } else {
                        MapleCharacter attacker = (MapleCharacter) attacke;
                        attacker.addHP(-divineShieldx.getDamage());
                        attack.add(Integer.valueOf(divineShieldx.getDamage()));
                     }
                  }
               }
            } else if (this.getJob() == 132 && attacke != null) {
               Skill divinex = SkillFactory.getSkill(1320011);
               if (this.getTotalSkillLevel(divinex) > 0
                     && !this.skillisCooling(divinex.getId())
                     && this.getSecondaryStatReason(SecondaryStatFlag.Beholder) == 1301013) {
                  SecondaryStatEffect divineShieldx = divinex.getEffect(this.getTotalSkillLevel(divinex));
                  if (divineShieldx.makeChanceResult()) {
                     this.client.getSession()
                           .writeAndFlush(CField.skillCooldown(divinex.getId(), divineShieldx.getCooldown(this)));
                     this.addCooldown(divinex.getId(), System.currentTimeMillis(), divineShieldx.getCooldown(this));
                     if (attacke instanceof MapleMonster) {
                        MapleMonster attacker = (MapleMonster) attacke;
                        int theDmg = (int) (divineShieldx.getDamage() * this.getStat().getCurrentMaxBaseDamage()
                              / 100.0);
                        attacker.damage(this, theDmg, true);
                        this.getMap().broadcastMessage(MobPacket.damageMonster(attacker.getObjectId(), theDmg));
                     } else {
                        MapleCharacter attacker = (MapleCharacter) attacke;
                        attacker.addHP(-divineShieldx.getDamage());
                        attack.add(Integer.valueOf(divineShieldx.getDamage()));
                     }
                  }
               }
            }

            if (attacke != null) {
               int damr = Randomizer.nextInt(100) < this.getStat().DAMreflect_rate ? this.getStat().DAMreflect : 0;
               int bouncedam_ = damr + (this.getBuffedValue(SecondaryStatFlag.Guard) != null
                     ? this.getBuffedValue(SecondaryStatFlag.Guard)
                     : 0);
               if (bouncedam_ > 0) {
                  long bouncedamage = (long) (damage * bouncedam_ / 100.0);
                  long bouncer = (long) (damage * damr / 100.0);
                  damage -= bouncer;
                  if (attacke instanceof MapleMonster) {
                     MapleMonster attacker = (MapleMonster) attacke;
                     bouncedamage = Math.min(bouncedamage, attacker.getMobMaxHp() / 10L);
                     attacker.damage(this, bouncedamage, true);
                     this.getMap().broadcastMessage(this, MobPacket.damageMonster(attacker.getObjectId(), bouncedamage),
                           this.getTruePosition());
                     if (this.getSecondaryStatReason(SecondaryStatFlag.Guard) == 31101003) {
                        SecondaryStatEffect eff = this.getBuffedEffect(SecondaryStatFlag.Guard);
                        if (eff.makeChanceResult()) {
                           attacker.applyStatus(
                                 this,
                                 new MobTemporaryStatEffect(MobTemporaryStatFlag.STUN, 1, eff.getSourceId(), null,
                                       false),
                                 false,
                                 eff.getSubTime(),
                                 true,
                                 eff);
                        }
                     }
                  } else {
                     MapleCharacter attacker = (MapleCharacter) attacke;
                     bouncedamage = Math.min(bouncedamage, attacker.getStat().getCurrentMaxHp(attacker) / 10L);
                     attacker.addHP(-((int) bouncedamage));
                     attack.add((int) bouncedamage);
                     if (this.getSecondaryStatReason(SecondaryStatFlag.Guard) == 31101003) {
                        SecondaryStatEffect eff = this.getBuffedEffect(SecondaryStatFlag.Guard);
                        if (eff.makeChanceResult()) {
                           attacker.disease(SecondaryStatFlag.Stun.getDisease(), 1);
                        }
                     }
                  }

                  ret.right = true;
               }

               if ((this.getJob() == 411 || this.getJob() == 412 || this.getJob() == 421 || this.getJob() == 422)
                     && this.getBuffedValue(SecondaryStatFlag.indieSummon) != null
                     && attacke != null) {
                  try {
                     for (Summoned sum : this.getSummonsReadLock()) {
                        if (sum.getTruePosition().distanceSq(this.getTruePosition()) < 400000.0
                              && sum.getSkill() == 4111007 || sum.getSkill() == 4211007) {
                           List<Pair<Integer, List<Long>>> allDamage = new ArrayList<>();
                           if (attacke instanceof MapleMonster) {
                              MapleMonster attacker = (MapleMonster) attacke;
                              List<Long> theDmg = new ArrayList<>();
                              long dmg = (long) (SkillFactory.getSkill(sum.getSkill()).getEffect(sum.getSkillLevel())
                                    .getX() * damage / 100.0);
                              theDmg.add(dmg);
                              allDamage.add(new Pair<>(attacker.getObjectId(), theDmg));
                              int tbyte = allDamage.size();
                              tbyte <<= 4;
                              tbyte |= 1;
                              this.getMap()
                                    .broadcastMessage(
                                          CField.SummonPacket.summonAttack(
                                                sum.getOwnerId(), sum.getObjectId(), sum.getSkill(), (byte) -124,
                                                (byte) tbyte, allDamage, this.getLevel(), true));
                              attacker.damage(this, dmg, true);
                              this.checkMonsterAggro(attacker);
                              if (!attacker.isAlive()) {
                                 this.getClient().getSession()
                                       .writeAndFlush(MobPacket.killMonster(attacker.getObjectId(), 1));
                              }
                           } else {
                              MapleCharacter chr = (MapleCharacter) attacke;
                              int dmg = SkillFactory.getSkill(sum.getSkill()).getEffect(sum.getSkillLevel()).getX();
                              chr.addHP(-dmg);
                              attack.add(dmg);
                           }
                        }
                     }
                  } finally {
                     this.unlockSummonsReadLock();
                  }
               }
            }
         }

         if (attack != null && attack.size() > 0 && attacke != null) {
            this.getMap().broadcastMessage(CField.pvpCool(attacke.getObjectId(), attack));
         }

         ret.left = damage;
         return ret;
      }
   }

   public void applyOverloadMana(int skillID, int skillLevel) {
      if (skillID != 2121003) {
         SecondaryStatEffect e = this.getBuffedEffect(SecondaryStatFlag.OverloadMana);
         if (e != null && GameConstants.canConsumeAttackSkill(skillID)) {
            Skill s = SkillFactory.getSkill(skillID);
            if (s != null) {
               SecondaryStatEffect consume = s.getEffect(skillLevel);
               if (consume != null) {
                  if (!GameConstants.isNoConsumeMPJob(this.getJob())
                        || consume.getHp() <= 0 && consume.getHpRCon() <= 0) {
                     if (consume.getMp() > 0 || consume.getMPCon() > 0) {
                        int x = e.getX();
                        int mp = (int) (this.getStat().getCurrentMaxMp(this) * 0.01 * x);
                        this.addMP(-mp);
                     }
                  } else {
                     double t = e.getT();
                     int hp = (int) (this.getStat().getCurrentMaxHp(this) * 0.01 * t);
                     this.addHP(-hp, true);
                  }
               }
            }
         }
      }
   }

   public void checkPathfinderPattern(int skillID) {
      if (this.getJob() == 301 || this.getJob() >= 330 && this.getJob() <= 332) {
         Integer pattern = this.getBuffedValue(SecondaryStatFlag.CurseEnchant);
         if (pattern == null || pattern < 1 || pattern > 3) {
            if (GameConstants.isDischargeSkill(skillID)) {
               pattern = 1;
            } else if (GameConstants.isBlastSkill(skillID)) {
               pattern = 2;
            } else if (GameConstants.isTransitionSkill(skillID)) {
               pattern = 3;
            } else {
               pattern = 0;
            }
         }

         if (pattern != 0) {
            this.temporaryStatSet(3300000, Integer.MAX_VALUE, SecondaryStatFlag.RelicPattern, pattern);
            if (this.getPathfinderPattern() == 1 && GameConstants.isBlastSkill(skillID)) {
               SecondaryStatEffect eff = SkillFactory.getSkill(3300005).getEffect(this.getTotalSkillLevel(3300005));
               if (eff != null && eff.makeChanceResult()) {
                  int bulletCount = eff.getBulletCount();
                  if (this.hasBuffBySkillID(3321034)) {
                     SecondaryStatEffect eff2 = SkillFactory.getSkill(3321034)
                           .getEffect(this.getTotalSkillLevel(3321034));
                     if (eff2 != null) {
                        bulletCount += eff2.getX();
                     }
                  }

                  List<MapleMonster> monsters = this.getMap().getMobsInRange(this.getTruePosition(), 640000.0,
                        bulletCount, true);
                  List<Integer> mobs = new ArrayList<>();

                  for (MapleMonster monster : monsters) {
                     mobs.add(monster.getObjectId());
                  }

                  if (!monsters.isEmpty()) {
                     ForceAtom.AtomInfo info = new ForceAtom.AtomInfo();
                     info.initAdditionalDischarge(monsters.get(0).getTruePosition(), 1);
                     ForceAtom forceAtom = new ForceAtom(
                           info, 3300005, this.getId(), false, true, this.getId(),
                           ForceAtom.AtomType.EDITIONAL_DISCHARGE, mobs, bulletCount, this.getPosition());
                     this.getMap().broadcastMessage(CField.getCreateForceAtom(forceAtom));
                  }
               }
            } else if (this.getPathfinderPattern() == 2 && GameConstants.isDischargeSkill(skillID)) {
               SecondaryStatEffect eff = SkillFactory.getSkill(3310004).getEffect(this.getTotalSkillLevel(3310004));
               if (this.getSkillLevel(3341002) > 0) {
                  eff = SkillFactory.getSkill(3341002).getEffect(this.getTotalSkillLevel(3341002));
               }

               if (eff != null && eff.makeChanceResult()) {
                  int bulletCountx = eff.getBulletCount();
                  if (this.hasBuffBySkillID(3321034)) {
                     SecondaryStatEffect eff2 = SkillFactory.getSkill(3321034)
                           .getEffect(this.getTotalSkillLevel(3321034));
                     if (eff2 != null) {
                        bulletCountx += eff2.getX();
                     }
                  }

                  List<MapleMonster> objs = this.getMap().getMobsInRange(this.getTruePosition(), 640000.0, bulletCountx,
                        true);
                  List<Integer> monsters = new ArrayList<>();

                  for (MapleMonster monster : objs) {
                     monsters.add(monster.getObjectId());
                  }

                  int atomSkillID = 33100045;
                  ForceAtom.AtomType atomType = ForceAtom.AtomType.EDITIONAL_DISCHARGE;
                  if (this.getSkillLevel(3341002) > 0) {
                     atomSkillID = 3341002;
                     atomType = ForceAtom.AtomType.Additional_Blast_VI;
                  }

                  if (!objs.isEmpty()) {
                     ForceAtom.AtomInfo info = new ForceAtom.AtomInfo();
                     info.initAdditionalDischarge(objs.get(0).getTruePosition(), 2);
                     ForceAtom forceAtom = new ForceAtom(
                           info, atomSkillID, this.getId(), false, true, this.getId(), atomType, monsters, bulletCountx,
                           this.getPosition());
                     this.getMap().broadcastMessage(CField.getCreateForceAtom(forceAtom));
                  }
               }
            } else if (this.getPathfinderPattern() == 3
                  && (GameConstants.isDischargeSkill(skillID) || GameConstants.isBlastSkill(skillID))) {
               SecondaryStatEffect effx = SkillFactory.getSkill(3320008).getEffect(this.getTotalSkillLevel(3320008));
               if (effx != null) {
                  this.setAdditionalTransitionCount(effx.getX());
                  this.setEndAdditionalTransitionTime(System.currentTimeMillis() + effx.getZ());
               }
            }

            this.setPathfinderPattern(pattern);
         }
      }
   }

   public void applyIceGage(int x) {
      this.updateSingleStat(MapleStat.ICE_GAGE, x);
   }

   public Rectangle getBounds() {
      return new Rectangle(this.getTruePosition().x - 25, this.getTruePosition().y - 75, 50, 75);
   }

   public Map<Byte, Integer> getEquips(boolean fusionAnvil) {
      Map<Byte, Integer> eq = new HashMap<>();

      for (Item item : this.inventory[MapleInventoryType.EQUIPPED.ordinal()].newList()) {
         int itemId = item.getItemId();
         if (item instanceof Equip && fusionAnvil && ((Equip) item).getFusionAnvil() != 0) {
            itemId = ((Equip) item).getFusionAnvil();
         }

         eq.put((byte) item.getPosition(), itemId);
      }

      return eq;
   }

   public Map<Byte, Integer> getSecondEquips(boolean fusionAnvil) {
      Map<Byte, Integer> eq = new HashMap<>();

      for (Item item : this.inventory[MapleInventoryType.EQUIPPED.ordinal()].newList()) {
         int itemId = item.getItemId();
         if (item instanceof Equip) {
            if (fusionAnvil && ((Equip) item).getFusionAnvil() != 0) {
               itemId = ((Equip) item).getFusionAnvil();
            }

            if (GameConstants.isAngelicBuster(this.getJob()) && GameConstants.isOverall(itemId) && this.isDressUp()) {
               itemId = 1051291;
            }
         }

         if (!GameConstants.isAngelicBuster(this.getJob())
               || GameConstants.isOverall(itemId)
               || GameConstants.isSecondaryWeapon(itemId)
               || GameConstants.isWeapon(itemId)
               || GameConstants.isMedal(itemId)) {
            eq.put((byte) item.getPosition(), itemId);
         }
      }

      return eq;
   }

   public int getReborns() {
      return this.reborns;
   }

   public int getAPS() {
      return this.apstorage;
   }

   public void gainAPS(int aps) {
      this.apstorage += aps;
   }

   public List<CharacterPotentialHolder> getInnerSkills() {
      return this.innerSkills;
   }

   public int getInnerExp() {
      return this.innerExp;
   }

   public void setInnerExp(int exp) {
      this.innerExp = exp;
   }

   public int getInnerLevel() {
      if (DBConfig.isGanglim) {
         return 3;
      } else {
         if (this.innerLevel == 0) {
            this.innerLevel++;
         }

         return this.innerLevel;
      }
   }

   public void setInnerLevel(int level) {
      this.innerLevel = level;
   }

   public int getInnerNextExp() {
      return this.getInnerLevel() == 0 ? 0 : (this.getInnerLevel() + 1) * 500;
   }

   public void resetRunningStack() {
      this.runningStack = 0;
   }

   public int getRunningStack() {
      return this.runningStack;
   }

   public void addRunningStack(int s) {
      this.runningStack = (byte) (this.runningStack + s);
   }

   public void setCardStack(byte amount) {
      this.cardStack = amount;
   }

   public byte getCardStack() {
      return this.cardStack;
   }

   public void setPetLoot(boolean status) {
      this.petLoot = status;
   }

   public boolean getPetLoot() {
      return this.petLoot;
   }

   public int getStorageNPC() {
      return this.storageNpc;
   }

   public void setStorageNPC(int id) {
      this.storageNpc = id;
   }

   public int getMaxDis(MapleCharacter player) {
      int maxDis = 0;
      Item weapon_item = player.getInventory(MapleInventoryType.EQUIPPED).getItem((short) -11);
      if (weapon_item != null) {
         MapleWeaponType weapon = MapleItemInformationProvider.getInstance().getWeaponType(weapon_item.getItemId());
         if (weapon == MapleWeaponType.SPEAR || weapon == MapleWeaponType.POLE_ARM) {
            maxDis = 106;
         }

         if (weapon == MapleWeaponType.DAGGER || weapon == MapleWeaponType.SWORD1H || weapon == MapleWeaponType.AXE1H
               || weapon == MapleWeaponType.BLUNT1H) {
            maxDis = 63;
         }

         if (weapon == MapleWeaponType.SWORD2H || weapon == MapleWeaponType.AXE1H
               || weapon == MapleWeaponType.BLUNT1H) {
            maxDis = 73;
         }

         if (weapon == MapleWeaponType.STAFF || weapon == MapleWeaponType.WAND) {
            maxDis = 51;
         }

         if (weapon == MapleWeaponType.CLAW) {
            Skill skil = SkillFactory.getSkill(4000001);
            int skill = player.getSkillLevel(skil);
            if (skill > 0) {
               maxDis = skil.getEffect(player.getSkillLevel(skil)).getRange() + 205;
            } else {
               maxDis = 205;
            }
         }

         if (weapon == MapleWeaponType.BOW || weapon == MapleWeaponType.CROSSBOW) {
            Skill skil = SkillFactory.getSkill(3000002);
            int skill = player.getSkillLevel(skil);
            if (skill > 0) {
               maxDis = skil.getEffect(player.getSkillLevel(skil)).getRange() + 270;
            } else {
               maxDis = 270;
            }
         }
      }

      return maxDis;
   }

   public boolean getPvpStatus() {
      return this.pvp;
   }

   public void togglePvP() {
      this.pvp = !this.pvp;
   }

   public void enablePvP() {
      this.pvp = true;
   }

   public void disablePvP() {
      this.pvp = false;
   }

   public void addHonorExp(int amount) {
      this.setInnerExp(this.getInnerExp() + amount);
      this.client.getSession().writeAndFlush(CWvsContext.updateAzwanFame(this.getInnerExp()));
      this.client.getSession().writeAndFlush(CWvsContext.enableActions(this, true));
      if (amount < 0) {
         AchievementFactory.checkAbility(this, 0, 0, 0, -amount);
      }
   }

   public void gainHonor(int honor, boolean show) {
      this.addHonorExp(honor);
      if (show && this.getKeyValue("show_honor") != null && this.getKeyValue("show_honor").equals("1")) {
         this.dropMessage(5, "명성치 " + honor + "을 얻었습니다.");
      }
   }

   public List<Integer> HeadTitle() {
      List<Integer> num_ = new ArrayList<>();
      num_.add(0);
      num_.add(0);
      num_.add(0);
      num_.add(0);
      num_.add(0);
      return num_;
   }

   public int getInternetCafeTime() {
      return this.itcafetime;
   }

   public void setInternetCafeTime(int itcafetime) {
      this.itcafetime = itcafetime;
   }

   public void InternetCafeTimer() {
      if (this.itcafetimer != null) {
         this.itcafetimer.cancel(false);
      }

      this.itcafetimer = objects.utils.Timer.CloneTimer.getInstance().register(new Runnable() {
         @Override
         public void run() {
            if (MapleCharacter.this.getInternetCafeTime() < 1) {
               MapleCharacter.this.client.getSession().writeAndFlush(CField.getInternetCafe((byte) 4, 0));
            } else {
               MapleCharacter.this.setInternetCafeTime(MapleCharacter.this.getInternetCafeTime() - 1);
            }
         }
      }, 60000L);
   }

   public short getMonsterCombo() {
      return this.monsterCombo;
   }

   public void setMonsterCombo(short count) {
      this.monsterCombo = count;
   }

   public void addMonsterCombo(short amount) {
      this.monsterCombo += amount;
   }

   public long getMonsterComboTime() {
      return this.monsterComboTime;
   }

   public void setMonsterComboTime(long count) {
      this.monsterComboTime = count;
   }

   public int getTouchedRune() {
      return this.TouchedRune;
   }

   public void setTouchedRune(int type) {
      this.TouchedRune = type;
   }

   public byte getBlessOfDark() {
      return this.blessOfDarkness;
   }

   public void setBlessOfDark(byte count) {
      this.blessOfDarkness = count;
   }

   public byte zeroEquip() {
      return this.zeroequip;
   }

   public void setZeroEquip(byte a) {
      this.zeroequip = a;
   }

   public short linkedZeroSlot() {
      return this.linkedZeroSlot;
   }

   public void setZeroSlot(short a) {
      this.linkedZeroSlot = a;
   }

   public int getArcaneAim() {
      return this.arcaneAim;
   }

   public static boolean updateNameChangeCoupon(MapleClient c) {
      DBConnection db = new DBConnection();

      try {
         try (Connection con = DBConnection.getConnection()) {
            PreparedStatement ps = con.prepareStatement("UPDATE accounts SET nameChange = ? WHERE id = ?");
            ps.setByte(1, c.getNameChangeEnable());
            ps.setInt(2, c.getAccID());
            ps.executeUpdate();
            ps.close();
         }

         return true;
      } catch (SQLException var7) {
         var7.printStackTrace();
         return false;
      }
   }

   public static boolean saveNameChange(String name, int cid) {
      DBConnection db = new DBConnection();

      try {
         try (Connection con = DBConnection.getConnection()) {
            PreparedStatement ps = con.prepareStatement("UPDATE characters SET name = ? WHERE id = ?");
            ps.setString(1, name);
            ps.setInt(2, cid);
            ps.executeUpdate();
            ps.close();
         }

         return true;
      } catch (SQLException var8) {
         var8.printStackTrace();
         return false;
      }
   }

   public Map<Integer, Integer> getSkillCustomValues() {
      return this.customValue;
   }

   public void setSkillCustomValue(int skillid, int value) {
      if (this.customValue.get(skillid) != null) {
         this.customValue.remove(skillid);
      }

      this.customValue.put(skillid, value);
   }

   public byte getEnergyChargeBuff() {
      return this.energybuff;
   }

   public void setEnergyChargeBuff(byte energybuff) {
      this.energybuff = energybuff;
   }

   public List<Pair<Integer, Integer>> getStolenSkills() {
      return this.stolenSkills;
   }

   public short getXenonSurplus() {
      return this.xenonSurplus;
   }

   public int getMaxSupply() {
      int maxSupply = this.level >= 100 ? 20 : (this.level >= 60 ? 15 : (this.level >= 30 ? 10 : 5));
      if (this.getBuffedValue(SecondaryStatFlag.OverloadMode) != null) {
         maxSupply = 40;
         if (this.getTotalSkillLevel(500061059) > 0) {
            SecondaryStatEffect eff = SkillFactory.getSkill(500061059).getEffect(this.getTotalSkillLevel(500061059));
            if (eff != null) {
               maxSupply = 20 + eff.getW();
            }
         }
      }

      return maxSupply;
   }

   public void setXenonSurplus(short amount) {
      if (this.xenonSurplus + amount > this.getMaxSupply()) {
         this.xenonSurplus = (short) this.getMaxSupply();
         this.updateXenonSurplus(this.xenonSurplus);
      } else {
         this.xenonSurplus = amount;
         this.updateXenonSurplus(this.xenonSurplus);
      }
   }

   public void gainXenonSurplus(short amount) {
      if (this.xenonSurplus + amount > this.getMaxSupply()) {
         this.xenonSurplus = (short) this.getMaxSupply();
         this.updateXenonSurplus(this.xenonSurplus);
      } else {
         this.xenonSurplus += amount;
         this.updateXenonSurplus(this.xenonSurplus);
      }
   }

   public void updateXenonSurplus(short amount) {
      if (amount > this.getMaxSupply()) {
         amount = (short) this.getMaxSupply();
      }

      this.temporaryStatSet(30020232, Integer.MAX_VALUE, SecondaryStatFlag.SurplusSupply, amount);
   }

   public int getForcingItem() {
      return this.forcingItem;
   }

   public void setForcingItem(short forcingItem) {
      this.forcingItem = forcingItem;
   }

   public long getCooldownLimit(int skillid) {
      for (MapleCoolDownValueHolder mcdvh : this.getCooldowns()) {
         if (mcdvh.skillId == skillid) {
            return System.currentTimeMillis() - mcdvh.startTime;
         }
      }

      return 0L;
   }

   public long getRemainCooltime(int skillID) {
      long gap = this.getCooldownLimit(skillID);

      for (MapleCoolDownValueHolder mcdvh : this.getCooldowns()) {
         if (mcdvh.skillId == skillID) {
            return mcdvh.length - gap;
         }
      }

      return 0L;
   }

   public boolean isEquippedSoulWeapon() {
      Equip weapon = (Equip) this.getInventory(MapleInventoryType.EQUIPPED).getItem((short) -11);
      return weapon == null ? false : weapon.getSoulEnchanter() != 0 && weapon.getSoulSkill() > 0;
   }

   public boolean isSoulWeapon(Equip equip) {
      return equip == null ? false : equip.getSoulEnchanter() != 0;
   }

   public void checkSoulState(boolean useSkill) {
      int skillID = this.getEquippedSoulSkill();
      Skill skill = SkillFactory.getSkill(skillID);
      if (skill != null) {
         SecondaryStatEffect effect = skill.getEffect(1);
         if (effect == null) {
            System.out.println("[오류] 소울 게이지 핸들링 중 소울 스킬 데이터 불러오기 실패.");
         } else {
            int soulCount = this.getSoulCount();
            if (useSkill) {
               soulCount = Math.max(0, soulCount - effect.getSoulMPCon());
               this.setSoulCount((short) soulCount);
               if (soulCount < effect.getSoulMPCon()) {
                  this.temporaryStatReset(SecondaryStatFlag.FullSoulMP);
               }

               this.temporaryStatSet(skillID, Integer.MAX_VALUE, SecondaryStatFlag.SoulMP, soulCount);
               this.send(CWvsContext.enableActions(this));
            } else if (soulCount >= effect.getSoulMPCon()
                  && this.getBuffedValue(SecondaryStatFlag.FullSoulMP) == null) {
               this.temporaryStatSet(skillID, Integer.MAX_VALUE, SecondaryStatFlag.FullSoulMP, soulCount);
               this.getMap().broadcastMessage(CField.setSoulEffect(this, (byte) 1));
            }
         }
      }
   }

   public short getSoulCount() {
      return this.soulCount;
   }

   public void setSoulCount(short soulcount) {
      this.soulCount = soulcount > 1000 ? 1000 : soulcount;
   }

   public void addSoulCount() {
      if (this.soulCount < 1000) {
         this.soulCount++;
      }
   }

   public short addGetSoulCount() {
      this.addSoulCount();
      return this.getSoulCount();
   }

   public int getEquippedSoulSkill() {
      Equip weapon = (Equip) this.getInventory(MapleInventoryType.EQUIPPED).getItem((short) -11);
      return weapon == null ? 0 : weapon.getSoulSkill();
   }

   public byte getWolfScore() {
      return this.wolfscore;
   }

   public void setWolfScore(byte farmscore) {
      this.wolfscore = farmscore;
   }

   public byte getSheepScore() {
      return this.sheepscore;
   }

   public void setSheepScore(byte farmscore) {
      this.sheepscore = farmscore;
   }

   public void addWolfScore() {
      this.wolfscore++;
   }

   public void addSheepScore() {
      this.sheepscore--;
   }

   public byte getPandoraBoxFever() {
      return this.pandoraBoxFever;
   }

   public void setPandoraBoxFever(byte pandoraBoxFever) {
      this.pandoraBoxFever = pandoraBoxFever;
   }

   public void addPandoraBoxFever(byte pandoraBoxFever) {
      this.pandoraBoxFever += pandoraBoxFever;
   }

   public int getSmashStack() {
      return this.smashStack;
   }

   public void resetSmashStack() {
      this.smashStack = 0;
      this.temporaryStatSet(61111008, Integer.MAX_VALUE, SecondaryStatFlag.SmashStack, this.smashStack);
   }

   public List<VCore> getVCoreSkillsNoLock() {
      return new ArrayList<>(this.vcoreSkills);
   }

   public List<VCore> getVCoreSkillsReadLock() {
      this.coreListsLock.readLock().lock();
      return this.vcoreSkills;
   }

   public void sortedVCoreSkillsReadLock() {
      Collections.sort(this.vcoreSkills, (o1, o2) -> Integer.compare(o2.getState(), o1.getState()));
   }

   public void lockVCoreSkillsReadLock() {
      this.coreListsLock.readLock().lock();
   }

   public void unlockVCoreSkillsReadLock() {
      this.coreListsLock.readLock().unlock();
   }

   public void lockVCoreSkillsWriteLock() {
      this.coreListsLock.writeLock().lock();
   }

   public void unlockVCoreSkillsWriteLock() {
      this.coreListsLock.writeLock().unlock();
   }

   public void addVCoreSkillsNoLock(VCore core) {
      this.vcoreSkills.add(core);
   }

   public void addVCoreSkills(VCore core) {
      this.vcoreSkills.add(core);
   }

   public void removeVCoreSkills(VCore core) {
      this.vcoreSkills.remove(core);
   }

   public void removeVCoreSkillsNoLock(VCore core) {
      this.vcoreSkills.remove(core);
   }

   public void addVMatrixSlot(VMatrixSlot vms) {
      this.vmatrixSlots.add(vms);
   }

   public VMatrixSlot getVMatrixSlot(int index) {
      VMatrixSlot vmatrixSlot = new VMatrixSlot();

      for (VMatrixSlot vms : this.getVMatrixSlots()) {
         if (vms.getIndex() == index) {
            vmatrixSlot = vms;
            break;
         }
      }

      return vmatrixSlot;
   }

   public List<VMatrixSlot> getVMatrixSlots() {
      return this.vmatrixSlots;
   }

   public int getBaseColor() {
      return this.basecolor;
   }

   public void setBaseColor(int basecolor) {
      this.basecolor = basecolor;
   }

   public int getAddColor() {
      return this.addcolor;
   }

   public void setAddColor(int addcolor) {
      this.addcolor = addcolor;
   }

   public int getBaseProb() {
      return this.baseprob;
   }

   public void setBaseProb(int baseprob) {
      if (baseprob >= 0) {
         this.baseprob = baseprob;
      }
   }

   public Object getJobField(String fieldName) {
      try {
         for (Class<?> cls = this.playerBasicJob.getClass(); cls.getSuperclass() != null; cls = cls.getSuperclass()) {
            for (java.lang.reflect.Field declaredField : cls.getDeclaredFields()) {
               if (declaredField.getName().equals(fieldName)) {
                  declaredField.setAccessible(true);
                  return declaredField.get(this.playerBasicJob);
               }
            }
         }
      } catch (Exception var7) {
         System.out.println("JobField GetErr");
         var7.printStackTrace();
      }

      return null;
   }

   public void setJobField(String fieldName, Object value) {
      try {
         for (Class<?> cls = this.playerBasicJob.getClass(); cls.getSuperclass() != null; cls = cls.getSuperclass()) {
            for (java.lang.reflect.Field declaredField : cls.getDeclaredFields()) {
               if (declaredField.getName().equals(fieldName)) {
                  declaredField.setAccessible(true);
                  declaredField.set(this.playerBasicJob, value);
               }
            }
         }
      } catch (Exception var8) {
         System.out.println("SetJobField Err");
         var8.printStackTrace();
      }
   }

   public Object invokeJobMethod(String funcName, Object... args) {
      try {
         for (Class<?> cls = this.playerBasicJob.getClass(); cls.getSuperclass() != null; cls = cls.getSuperclass()) {
            for (Method declaredMethod : cls.getDeclaredMethods()) {
               if (declaredMethod.getName().equals(funcName) && declaredMethod.getParameterCount() == args.length) {
                  declaredMethod.setAccessible(true);
                  return declaredMethod.invoke(this.playerBasicJob, args);
               }
            }
         }
      } catch (InvocationTargetException var8) {
         var8.getTargetException().printStackTrace();
      } catch (IllegalAccessException var9) {
         var9.printStackTrace();
      }

      return null;
   }

   public List<Integer> getCashWishList() {
      return this.cashwishlist;
   }

   public void addCashWishList(int id) {
      this.cashwishlist.add(id);
   }

   public void removeCashWishList(int id) {
      this.cashwishlist.remove(id);
   }

   public List<Item> getSymbols() {
      return this.symbols;
   }

   public QuestEx getOneInfoQuestEx(int questID, String key) {
      QuestEx ex = this.getInfoQuest(questID);
      return ex == null ? null : ex;
   }

   public String getInfoQuestLogin(int questid, String key) {
      if (questid == QuestExConstants.CashCodyPreset.getQuestID()
            || questid == QuestExConstants.PinkBeanColor.getQuestID()) {
         String check = null;

         try {
            label176: {
               String v;
               try (Connection con = DBConnection.getConnection()) {
                  try (PreparedStatement ps = con.prepareStatement(
                        "SELECT customData FROM questinfo WHERE characterid = " + this.getId() + " AND quest = "
                              + questid)) {
                     try (ResultSet rs = ps.executeQuery()) {
                        if (rs.next()) {
                           v = rs.getString("customData");
                           if (!v.equals("")) {
                              Map<String, String> values = new HashMap<>();
                              String[] keyvalues = v.split(";");

                              for (String keyvalue : keyvalues) {
                                 String[] keyandvalue = keyvalue.split("=");
                                 if (keyandvalue.length > 0) {
                                    values.put(keyandvalue[0], keyandvalue.length == 1 ? "" : keyandvalue[1]);
                                 }
                              }

                              if (values.containsKey(key)) {
                                 check = values.get(key);
                              }
                           }
                        }
                        break label176;
                     } catch (Exception var19) {
                        v = null;
                     }
                  } catch (Exception var21) {
                     return null;
                  }
               }

               return v;
            }
         } catch (Exception var23) {
            return null;
         }

         if (check != null) {
            return check;
         }
      }

      return null;
   }

   public String getOneInfoQuest(int questid, String key) {
      QuestEx ex = this.getInfoQuest(questid);
      if (ex == null) {
         String checkLogin = this.getInfoQuestLogin(questid, key);
         return checkLogin != null ? checkLogin : "";
      } else {
         String v = ex.getData();
         if (!v.equals("")) {
            Map<String, String> values = new HashMap<>();
            String[] keyvalues = v.split(";");

            for (String keyvalue : keyvalues) {
               String[] keyandvalue = keyvalue.split("=");
               if (keyandvalue.length > 0) {
                  values.put(keyandvalue[0], keyandvalue.length == 1 ? "" : keyandvalue[1]);
               }
            }

            if (values.containsKey(key)) {
               return values.get(key);
            }
         }

         return "";
      }
   }

   public int getOneInfoQuestInteger(int questid, String key) {
      String v = this.getOneInfoQuest(questid, key);
      if (v.isEmpty()) {
         return 0;
      } else {
         int count = 0;

         try {
            count = Integer.parseInt(v);
         } catch (Exception var6) {
            System.out.println("QuestID : " + questid + " / Key : " + key + " 퀘스트인포 불러오기 오류 정보 : " + v);
            var6.printStackTrace();
         }

         return count;
      }
   }

   public long getOneInfoQuestLong(int questid, String key) {
      String v = this.getOneInfoQuest(questid, key);
      return v.isEmpty() ? 0L : Long.parseLong(v);
   }

   public final String getInfoCustom(String custom) {
      if (this.custominfo == null) {
         return null;
      } else {
         return this.custominfo.containsKey(custom) ? this.custominfo.get(custom) : null;
      }
   }

   public String getOneInfoCustom(String mainKey, String subKey) {
      String ex = this.getInfoCustom(mainKey);
      if (ex == null) {
         return "";
      } else {
         if (!ex.equals("")) {
            Map<String, String> values = new HashMap<>();
            String[] keyvalues = ex.split(";");

            for (String keyvalue : keyvalues) {
               String[] keyandvalue = keyvalue.split("=");
               if (keyandvalue.length > 0) {
                  values.put(keyandvalue[0], keyandvalue.length == 1 ? "" : keyandvalue[1]);
               }
            }

            if (values.containsKey(subKey)) {
               return values.get(subKey);
            }
         }

         return "";
      }
   }

   public int getOneInfoCustomInteger(String customKey, String subKey) {
      String v = this.getOneInfoCustom(customKey, subKey);
      if (v.isEmpty()) {
         return 0;
      } else {
         int count = 0;

         try {
            count = Integer.parseInt(v);
         } catch (Exception var6) {
            System.out.println("customKey : " + customKey + " / subKey : " + subKey + " 커스텀인포 불러오기 오류 정보 : " + v);
            var6.printStackTrace();
         }

         return count;
      }
   }

   public long getOneInfoCustomLong(String customKey, String subKey) {
      String v = this.getOneInfoCustom(customKey, subKey);
      if (v.isEmpty()) {
         return 0L;
      } else {
         long count = 0L;

         try {
            count = Long.parseLong(v);
         } catch (Exception var7) {
            System.out.println("customKey : " + customKey + " / subKey : " + subKey + " 커스텀인포 불러오기 오류 정보 : " + v);
            var7.printStackTrace();
         }

         return count;
      }
   }

   public void changeKeybinding(int index, int key, byte type, int action) {
      if (type != 0) {
         this.keylayout[index].Layout().put(key, new Pair<>(type, action));
      } else {
         this.keylayout[index].Layout().remove(key);
      }
   }

   public void maxSkillByAutoJob() {
      for (int i = 0; i < this.getJob() % 10 + 1; i++) {
         int job = i + 1 == this.getJob() % 10 + 1 ? this.getJob() - this.getJob() % 100 : this.getJob() - (i + 1);
         if (this.getJob() >= 330 && this.getJob() <= 332) {
            if (job == 300) {
               job = 301;
            }
         } else if (this.getJob() >= 530 && this.getJob() <= 532 && job == 500) {
            job = 501;
         }

         this.maxskill(job);
      }

      int div = this.getJob() < 1000 ? 100 : 1000;
      int job = this.getJob();
      if (GameConstants.isKadena(job)) {
         div = 6002;
      } else if (GameConstants.isAngelicBuster(job)) {
         div = 6001;
      } else if (GameConstants.isEvan(job)) {
         div = 2001;
      } else if (GameConstants.isMercedes(job)) {
         div = 2002;
      } else if (GameConstants.isDemonSlayer(job) || GameConstants.isDemonAvenger(job)) {
         div = 3001;
      } else if (GameConstants.isPhantom(job)) {
         div = 2003;
      } else if (GameConstants.isLuminous(job)) {
         div = 2004;
      } else if (GameConstants.isXenon(job)) {
         div = 3002;
      } else if (GameConstants.isEunWol(job)) {
         div = 2005;
      } else if (GameConstants.isIllium(job)) {
         div = 15000;
      } else if (GameConstants.isArk(job)) {
         div = 15001;
      } else if (GameConstants.isAdele(job)) {
         div = 15002;
      } else if (GameConstants.isHoyoung(job)) {
         div = 16000;
      } else if (GameConstants.isCannon(job)) {
         div = 501;
      }

      this.maxskill(this.getJob() / div * div);
      this.maxskill(this.getJob());
   }

   public void maxSkillByID(int skillID) {
      try {
         Skill skill = SkillFactory.getSkill(skillID);
         byte maxLevel = (byte) skill.getMaxLevel();
         this.changeSkillLevel(skill, maxLevel, maxLevel);
      } catch (NullPointerException var4) {
      }
   }

   public void maxskill(int i) {
      HashMap<Skill, SkillEntry> list = new HashMap<>();
      Collection<Skill> skills = SkillFactory.getAllSkills();
      skills.stream()
            .filter(skill -> skill.getId() / 10000 == i)
            .filter(skill -> !skill.isInvisible())
            .filter(skill -> !skill.isDisable())
            .filter(skill -> skill.getId() != 3210007)
            .forEach(skill -> {
               if (skill.getId() == 164001004) {
                  if (GameConstants.isHoyoung(this.getJob())) {
                     list.put(skill, new SkillEntry(skill.getMaxLevel(), (byte) skill.getMaxLevel(), -1L));
                  }
               } else {
                  list.put(skill, new SkillEntry(skill.getMaxLevel(), (byte) skill.getMaxLevel(), -1L));
               }
            });
      if (GameConstants.isZero(this.getJob())) {
         skills.stream()
               .filter(skill -> GameConstants.isZero(skill.getId() / 10000))
               .filter(skill -> !list.containsKey(skill))
               .filter(skill -> !skill.isInvisible())
               .forEach(skill -> list.put(skill, new SkillEntry(skill.getMaxLevel(), (byte) skill.getMaxLevel(), -1L)));
      }

      this.changeSkillsLevel(list);
      if (i == 15510) {
         this.maxSkillByID(155101006);
      }

      if (i == 311 || i == 312) {
         this.maxSkillByID(3110007);
      }

      if (i == 321 || i == 322) {
         this.maxSkillByID(3210007);
      }

      if (i == 331 || i == 332) {
         this.maxSkillByID(3310007);
      }

      if (GameConstants.isHoyoung(i)) {
         this.maxSkillByID(164001004);
      }

      if (GameConstants.isEunWol(i)) {
         this.maxSkillByID(25001000);
         this.maxSkillByID(25001002);
      }

      if (GameConstants.isZero(i)) {
         this.maxSkillByID(100000267);
         this.maxSkillByID(100001261);
         this.maxSkillByID(100001274);
         this.maxSkillByID(100001272);
         this.maxSkillByID(100001283);
         this.maxSkillByID(100001005);
      }

      if (GameConstants.isMechanic(i)) {
         this.maxSkillByID(30001068);
      }

      this.setSaveFlag(this.getSaveFlag() | CharacterSaveFlag.SKILLS.getFlag());
   }

   public void setChangedSkills() {
      this.setSaveFlag(this.getSaveFlag() | CharacterSaveFlag.SKILLS.getFlag());
   }

   public void checkDead() {
      if (this.stats.getHp() <= 0L) {
         int flag = 1;
         int reviveType = 0;
         if (this.haveItem(5510000)) {
            reviveType = 6;
         }

         if (this.haveItem(5133000) || this.haveItem(5133001)) {
            flag |= 2;
         }

         if (this.getDeathCount() < 0
               || this.getMap().getFieldSetInstance() == null && this.getEventInstance() == null) {
            String date = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyyMMddHHmmss"));
            this.updateOneInfo(100716, "time", date);
            this.updateOneInfo(100716, "decDropR", "80");
            this.updateOneInfo(100716, "decExpR", "80");
            this.updateOneInfo(100716, "remain", "1530");
            this.updateOneInfo(100716, "total", "1530");
         } else {
            reviveType = 4;
         }

         this.getClient().getSession().writeAndFlush(CWvsContext.OpenUIOnDead(this, flag, reviveType));
         this.setPlayerDead(true);
      }
   }

   public final void warp(int map) {
      Field field = this.getWarpMap(map);
      if (field == null) {
         System.out.println(this.getName() + "이(가) 맵 코드 : " + map + "으로 이동 중 field가 null");

         try {
            throw new Exception();
         } catch (Exception var4) {
            System.out.println("warp Err");
            var4.printStackTrace();
         }
      } else {
         this.changeMap(field);
      }
   }

   public final void warp(int map, int portalNum) {
      Field field = this.getWarpMap(map);
      if (field == null) {
         System.out.println(this.getName() + "이(가) 맵 코드 : " + map + "으로 이동 중 field가 null");

         try {
            throw new Exception();
         } catch (Exception var5) {
            System.out.println("warp2 Err");
            var5.printStackTrace();
         }
      } else {
         this.changeMap(map, portalNum);
      }
   }

   public final Field getWarpMap(int map) {
      return GameServer.getInstance(this.client.getChannel()).getMapFactory().getMap(map);
   }

   public final void timeMoveMap(final int destination, final int mapID, int time) {
      this.warp(mapID);
      this.getClient().getSession().writeAndFlush(CField.getClock(time));
      objects.utils.Timer.MapTimer tMan = objects.utils.Timer.MapTimer.getInstance();
      Runnable r = new Runnable() {
         @Override
         public void run() {
            if (MapleCharacter.this.client.getPlayer() != null && MapleCharacter.this.getMapId() == mapID) {
               MapleCharacter.this.warp(destination);
            }
         }
      };
      tMan.schedule(r, time * 1000);
   }

   public PsychicLock getPsychicLock() {
      return this.psychicLock;
   }

   public void setPsychicLock(PsychicLock psychicLock) {
      this.psychicLock = psychicLock;
   }

   public PsychicArea getPsychicArea(int key) {
      return this.psychicAreas.isEmpty() ? null
            : this.psychicAreas.stream().filter(a -> a.getKey() == key).findFirst().orElse(null);
   }

   public void removePsychicArea(int key) {
      if (!this.psychicAreas.isEmpty()) {
         PsychicArea area = this.psychicAreas.stream().filter(a -> a.getKey() == key).findFirst().get();
         if (area != null) {
            this.psychicAreas.remove(area);
         }
      }
   }

   public void addPsychicArea(PsychicArea psychicArea) {
      this.psychicAreas.add(psychicArea);
   }

   public List<PsychicArea> getPsychicAreas() {
      return this.psychicAreas.isEmpty() ? Collections.emptyList() : this.psychicAreas;
   }

   public int getPsychicAreaIdx() {
      return this.psychicAreaIdx.get();
   }

   public int getAndIncPsychicAreaIdx() {
      return this.psychicAreaIdx.getAndAdd(1);
   }

   public int getComboBuffStack() {
      return this.comboBuffStack;
   }

   public void setComboBuffStack(int comboBuffStack) {
      this.comboBuffStack = comboBuffStack;
   }

   public String getChairText() {
      return this.chairText;
   }

   public void setChairText(String chairText) {
      this.chairText = chairText;
   }

   public long getMesoChairCount() {
      return this.mesoChairCount;
   }

   public void setMesoChairCount(long mesoChairCount) {
      this.mesoChairCount = mesoChairCount;
   }

   public long getMaxMesoChairCount() {
      return this.maxMesoChairCount;
   }

   public void setMaxMesoChairCount(long maxMesoChairCount) {
      this.maxMesoChairCount = maxMesoChairCount;
   }

   public void registerMesoChairTask(ScheduledFuture<?> aMesoChairScheduled) {
      this.mesoChairTask = aMesoChairScheduled;
   }

   public void stopMesoChairTask() {
      if (this.mesoChairTask != null) {
         this.mesoChairTask.cancel(false);
      }

      this.mesoChairTask = null;
   }

   public boolean isDressUp() {
      return this.dressUp;
   }

   public void setDressUp(boolean dressUp) {
      this.dressUp = dressUp;
   }

   public int getDressUp_Clothe() {
      return this.dressUp_Clothe;
   }

   public void setDressUp_Clothe(int dressUp_Clothe) {
      this.dressUp_Clothe = dressUp_Clothe;
   }

   public int getDefaultWingItem() {
      return this.defaultWingItem;
   }

   public void setDefaultWingItem(int defaultWingItem) {
      this.defaultWingItem = defaultWingItem;
   }

   public int getZeroLinkCashPart() {
      return this.zeroLinkCashPart;
   }

   public void setZeroLinkCashPart(int value) {
      this.zeroLinkCashPart = value;
   }

   public int getStylishKillSkin() {
      return this.stylishKillSkin;
   }

   public void setStylishKillSkin(int stylishKillSkin) {
      this.stylishKillSkin = stylishKillSkin;
   }

   public void innerLevelUp() {
      if (this.getInnerLevel() == 1) {
         CharacterPotentialHolder isvh = new CharacterPotentialHolder(70000015, (byte) 1, (byte) 40, (byte) 0, false);
         this.innerSkills.add(isvh);
         this.setSaveFlag(this.getSaveFlag() | CharacterSaveFlag.INNER_SKILL.getFlag());
         this.getClient().getSession().writeAndFlush(
               CField.updateInnerPotential((byte) 1, isvh.getSkillId(), isvh.getSkillLevel(), isvh.getRank()));
      } else if (this.getInnerLevel() == 2) {
         CharacterPotentialHolder isvh = new CharacterPotentialHolder(70000015, (byte) 3, (byte) 40, (byte) 0, false);
         this.innerSkills.add(isvh);
         this.setSaveFlag(this.getSaveFlag() | CharacterSaveFlag.INNER_SKILL.getFlag());
         this.getClient().getSession().writeAndFlush(
               CField.updateInnerPotential((byte) 2, isvh.getSkillId(), isvh.getSkillLevel(), isvh.getRank()));
      } else if (this.getInnerLevel() >= 3) {
         CharacterPotentialHolder isvh = new CharacterPotentialHolder(70000015, (byte) 5, (byte) 40, (byte) 0, false);
         this.innerSkills.add(isvh);
         this.setSaveFlag(this.getSaveFlag() | CharacterSaveFlag.INNER_SKILL.getFlag());
         this.getClient().getSession().writeAndFlush(
               CField.updateInnerPotential((byte) 3, isvh.getSkillId(), isvh.getSkillLevel(), isvh.getRank()));
      }

      if (this.getInnerLevel() < 3) {
         this.setInnerLevel(this.getInnerLevel() + 1);
      }
   }

   public Map<String, String> getCustomValues() {
      return this.CustomValues;
   }

   public Map<String, Integer> getCustomValues2() {
      return this.CustomValues2;
   }

   public String getKeyValue(String key) {
      return this.CustomValues.containsKey(key) ? this.CustomValues.get(key) : null;
   }

   public void removeKeyValue(String key) {
      this.CustomValues.remove(key);
   }

   public void setKeyValue(String key, String values) {
      if (this.CustomValues.containsKey(key)) {
         this.CustomValues.remove(key);
      }

      this.CustomValues.put(key, values);
      this.setSaveFlag(this.getSaveFlag() | CharacterSaveFlag.KEY_VALUES.getFlag());
   }

   public int getKeyValue2(String key) {
      if (this.CustomValues2.containsKey(key)) {
         return this.CustomValues2.get(key);
      } else {
         return key.contains("hyper") ? 0 : -1;
      }
   }

   public void setKeyValue2(String key, int values) {
      if (this.CustomValues2.containsKey(key)) {
         this.CustomValues2.remove(key);
      }

      this.CustomValues2.put(key, values);
      this.setSaveFlag(this.getSaveFlag() | CharacterSaveFlag.KEY_VALUES2.getFlag());
   }

   public void gainAddDamageSin(int value) {
      int v = this.getKeyValue2("add_damage_sin");
      if (v == -1) {
         v = 1;
      }

      this.setKeyValue2("add_damage_sin", v + value);
      this.setSaveFlag(this.getSaveFlag() | CharacterSaveFlag.KEY_VALUES2.getFlag());
   }

   public int getAddDamageSin() {
      return this.getKeyValue2("add_damage_sin");
   }

   public void setAddDamageSin(int value) {
      this.setKeyValue2("add_damage_sin", value);
   }

   public void gainAddDamage(long value) {
      String v = this.getKeyValue("add_damage");
      long dam = 0L;
      if (v != null) {
         dam = Long.parseLong(v);
      }

      dam += value;
      this.setKeyValue("add_damage", String.valueOf(dam));
   }

   public long getAddDamage() {
      String v = this.getKeyValue("add_damage");
      return v != null ? Long.parseLong(v) : 0L;
   }

   public void setAddDamage(long value) {
      this.setKeyValue("add_damage", String.valueOf(value));
   }

   public int getHongboPoint() {
      return DBConfig.isGanglim ? this.getOneInfoQuestInteger(QuestExConstants.NeoCoreEvent.getQuestID(), "point")
            : this.hongboPoint;
   }

   public void gainHongboPoint(int value) {
      this.gainHongboPoint(value, true);
   }

   public void gainHongboPoint(int value, boolean qexUpdate) {
      if (DBConfig.isGanglim) {
         this.updateOneInfo(
               QuestExConstants.NeoCoreEvent.getQuestID(),
               "week",
               String.valueOf(this.getOneInfoQuestInteger(QuestExConstants.NeoCoreEvent.getQuestID(), "week") + value));
         this.updateOneInfo(
               QuestExConstants.NeoCoreEvent.getQuestID(),
               "sum",
               String.valueOf(this.getOneInfoQuestInteger(QuestExConstants.NeoCoreEvent.getQuestID(), "sum") + value));
         this.updateOneInfo(
               QuestExConstants.NeoCoreEvent.getQuestID(),
               "point",
               String.valueOf(
                     this.getOneInfoQuestInteger(QuestExConstants.NeoCoreEvent.getQuestID(), "point") + value));
      } else {
         this.hongboPoint += value;
         if (qexUpdate) {
            this.updateOneInfo(16180, "point", String.valueOf(this.hongboPoint));
         }
      }
   }

   public void setHongboPoint(int value) {
      if (DBConfig.isGanglim) {
         this.updateOneInfo(QuestExConstants.NeoCoreEvent.getQuestID(), "point", String.valueOf(value));
      }

      this.hongboPoint = value;
   }

   public int getTSDPoint() {
      return this.tsdPoint;
   }

   public void setTSDPoint(int tsdPoint) {
      this.tsdPoint = tsdPoint;
   }

   public int getTSDTotalPoint() {
      return this.tsdTotalPoint;
   }

   public void setTSDTotalPoint(int tsdTotalPoint) {
      this.tsdTotalPoint = tsdTotalPoint;
   }

   public void gainTSDPoint(int tsdPoint) {
      this.tsdPoint += tsdPoint;
      if (tsdPoint > 0) {
         this.tsdTotalPoint += tsdPoint;
      }
   }

   public int getTS() {
      return this.tsPoint;
   }

   public void setTS(int value) {
      this.tsPoint = value;
   }

   public void gainTS(int value) {
      this.tsPoint += value;
   }

   public final String getToday() {
      SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
      return sdf.format(Calendar.getInstance().getTime());
   }

   public boolean bClearCheck(int qexKey, String keyValue, boolean isPracticeMode) {
      int clearCheck = this.getOneInfoQuestInteger(qexKey, keyValue);
      int checkValue = 1;
      if (DBConfig.isGanglim) {
         checkValue += this.getBossTier();
      } else {
         String checkBoss = "";
         if (qexKey == 1234589) {
            if (keyValue.startsWith("dunkel_clear_")) {
               checkBoss = "Dunkel";
            }

            if (keyValue.startsWith("dusk_clear_")) {
               checkBoss = "Dusk";
            }
         }

         if (qexKey == 1234569) {
            if (keyValue.startsWith("swoo_clear_")) {
               checkBoss = "Swoo";
            }

            if (keyValue.startsWith("demian_clear_")) {
               checkBoss = "Demian";
            }

            if (keyValue.startsWith("guardian_angel_slime_clear_")) {
               checkBoss = "GuardianSlime";
            }

            if (keyValue.startsWith("lucid_clear_")) {
               checkBoss = "Lucid";
            }

            if (keyValue.startsWith("will_clear_")) {
               checkBoss = "Will";
            }

            if (keyValue.startsWith("jinhillah_clear_")) {
               checkBoss = "JinHillah";
            }
         }

         if (qexKey == QuestExConstants.SerniumSeren.getQuestID() && keyValue.startsWith("clear_")) {
            checkBoss = "Seren";
         }

         boolean nonDefined = false;
         boolean single = true;
         if (keyValue.contains("clear_multi")) {
            single = false;
         } else if (keyValue.contains("clear_single")) {
            single = true;
         } else {
            nonDefined = true;
         }

         if (!nonDefined) {
            int reset = this.getOneInfoQuestInteger(QuestExConstants.WeeklyQuestResetCount.getQuestID(),
                  checkBoss + (single ? "Single" : "Multi"));
            checkValue += reset;
         }
      }

      return checkValue <= clearCheck && !isPracticeMode;
   }

   public void clearCount(int qexKey, String keyValue, String bossName) {
      int clearCheck = this.getOneInfoQuestInteger(qexKey, keyValue) + 1;
      int checkValue = 1 + this.getBossTier();
      this.dropMessage(5, String.format("금일 %s 입장횟수 %d / %d", bossName, clearCheck, checkValue));
   }

   public boolean CountCheck(String key, int value) {
      return this.CountCheck(key, value, false);
   }

   public boolean CountCheck(String key, int value, boolean isHell) {
      if (key.equals("random_portal") && DBConfig.isGanglim) {
         return true;
      } else if (DBConfig.isGanglim && isHell) {
         return true;
      } else {
         String v = this.getKeyValue(key);
         if (v != null && !v.isEmpty()) {
            int count = Integer.parseInt(v);
            if (DBConfig.isGanglim) {
               value += this.getBossTier();
            }

            if (count >= value) {
               String time = this.getKeyValue(key + "_time");
               return time == null || time.isEmpty() ? true : !time.equals(this.getToday());
            } else {
               return true;
            }
         } else {
            return true;
         }
      }
   }

   public int GetCount(String key) {
      String v = this.getKeyValue(key);
      int count = 0;
      if (v != null && !v.isEmpty()) {
         String time = this.getKeyValue(key + "_time");
         if (time != null && !time.isEmpty()) {
            if (!time.equals(this.getToday())) {
               this.setKeyValue(key + "_time", this.getToday());
               this.setKeyValue(key, "0");
            } else {
               count = Integer.parseInt(v);
            }
         }
      }

      return count;
   }

   public void CountAdd(String key) {
      String v = this.getKeyValue(key);
      int count = 0;
      if (v != null && !v.isEmpty()) {
         count = Integer.parseInt(v);
      }

      String time = this.getKeyValue(key + "_time");
      if (time != null && !time.isEmpty()) {
         if (!time.equals(this.getToday())) {
            this.setKeyValue(key + "_time", this.getToday());
            this.setKeyValue(key, "1");
            return;
         }
      } else {
         this.setKeyValue(key + "_time", this.getToday());
      }

      this.setKeyValue(key, String.valueOf(count + 1));
   }

   public boolean CountClear(String key) {
      String v = this.getKeyValue(key);
      if (v != null && !v.isEmpty()) {
         String time = this.getKeyValue(key + "_time");
         if (time == null || time.isEmpty()) {
            return false;
         } else if (!time.equals(this.getToday())) {
            return false;
         } else {
            this.setKeyValue(key, String.valueOf(0));
            return true;
         }
      } else {
         return false;
      }
   }

   public boolean isLeader() {
      Party party = this.getParty();
      return party == null ? false : party.getPartyMember().getLeader().getId() == this.getId();
   }

   public void setClock(int value) {
      this.send(CField.getClock(value));
   }

   public void resetBMDeath() {
      SecondaryStatEffect effect = this.getBuffedEffect(SecondaryStatFlag.BMageDeath);
      if (effect != null) {
         SecondaryStatManager statManager = new SecondaryStatManager(this.getClient(), this.secondaryStat);
         statManager.changeStatValue(SecondaryStatFlag.BMageDeath, effect.getSourceId(), 0);
         statManager.temporaryStatSet();
      }
   }

   public int getPieceOfCore() {
      String count = this.getOneInfoQuest(1477, "count");
      return count != null && !count.isEmpty() ? Integer.parseInt(count) : 0;
   }

   public void setPieceOfCore(int count) {
      count = Math.max(0, count);
      this.updateOneInfo(1477, "count", String.valueOf(count));
   }

   public void gainPieceOfCore(int delta) {
      this.setPieceOfCore(this.getPieceOfCore() + delta);
   }

   public void unlockMaxDamage() {
      SkillFactory.getSkill(1105).getEffect(1).applyTo(this);
   }

   public void giveDonatorBuff() {
      if (this.getKeyValue2("buck_shot") == 1) {
         this.temporaryStatSet(5321054, Integer.MAX_VALUE, SecondaryStatFlag.BuckShot, 3);
      }

      if (this.getKeyValue2("sharp_eyes") == 1) {
         if (DBConfig.isGanglim) {
            this.temporaryStatSet(13121005, Integer.MAX_VALUE, SecondaryStatFlag.SharpEyes, 7705);
         } else {
            this.temporaryStatSet(80001837, Integer.MAX_VALUE, SecondaryStatFlag.SharpEyes, 12830);
         }
      }

      if (this.getKeyValue2("holy_symbol") == 1) {
         if (DBConfig.isGanglim) {
            Map<SecondaryStatFlag, Integer> flags = Map.of(SecondaryStatFlag.HolySymbol, 75);
            this.temporaryStatSet(2311003, 20, Integer.MAX_VALUE, flags);
         } else {
            Map<SecondaryStatFlag, Integer> flags = Map.of(SecondaryStatFlag.HolySymbol, 150);
            this.temporaryStatSet(80001836, 1, Integer.MAX_VALUE, flags);
         }
      }

      if (this.getKeyValue2("speed_infusion") == 1) {
         if (DBConfig.isGanglim) {
            this.temporaryStatSet(5121009, Integer.MAX_VALUE, SecondaryStatFlag.SpeedInfusion, -2);
         } else {
            Map<SecondaryStatFlag, Integer> statups = new HashMap<>();
            statups.put(SecondaryStatFlag.indiePAD, 550);
            statups.put(SecondaryStatFlag.indieMAD, 550);
            statups.put(SecondaryStatFlag.indieBDR, 30);
            statups.put(SecondaryStatFlag.indieDEF, 550);
            statups.put(SecondaryStatFlag.indieMMP, 5000);
            statups.put(SecondaryStatFlag.indieMMP, 5000);
            statups.put(SecondaryStatFlag.AdvancedBless, 20);
            this.temporaryStatSet(80001838, 1, Integer.MAX_VALUE, statups);
         }
      }

      if (this.getKeyValue2("cross_over") == 1) {
         if (DBConfig.isGanglim) {
            this.temporaryStatSet(1311015, Integer.MAX_VALUE, SecondaryStatFlag.indiePMDR, 30);
         } else if (GameConstants.isDarkKnight(this.job)) {
            if (this.hasBuffBySkillID(1311015)) {
               this.temporaryStatResetBySkillID(1311015);
            }

            this.temporaryStatSet(80001841, Integer.MAX_VALUE, SecondaryStatFlag.indiePMDR, 100);
         } else {
            this.temporaryStatSet(80001841, Integer.MAX_VALUE, SecondaryStatFlag.indiePMDR, 30);
         }
      }

      if (this.getKeyValue2("shadow_partner") == 1) {
         this.temporaryStatSet(4111002, Integer.MAX_VALUE, SecondaryStatFlag.ShadowPartner, 70);
      }

      if (this.getKeyValue2("trifling_whim") == 1) {
         this.temporaryStatSet(13120003, Integer.MAX_VALUE, SecondaryStatFlag.TriflingWhimOnOff, 1);
      }

      if (this.getKeyValue2("magic_guard") == 1) {
         this.temporaryStatSet(2001002, Integer.MAX_VALUE, SecondaryStatFlag.MagicGuard, 85);
      }

      if (this.getKeyValue2("mark_of_assassins") == 1) {
         this.temporaryStatSet(4100011, Integer.MAX_VALUE, SecondaryStatFlag.ForceAtomOnOff, 1);
      }

      if (this.getKeyValue2("magic_arrow") == 1) {
         this.changeType = 3;
         this.temporaryStatSet(3101009, Integer.MAX_VALUE, SecondaryStatFlag.QuiverCatridge, 40);
      }

      if (this.getKeyValue2("rand_area_attack") == 1) {
         this.temporaryStatSet(80001762, Integer.MAX_VALUE, SecondaryStatFlag.RandAreaAttack, 5);
      }

      if (this.getKeyValue2("rune_buff1") == 1) {
         Map<SecondaryStatFlag, Integer> statups = new HashMap<>();
         statups.put(SecondaryStatFlag.indieJump, 130);
         statups.put(SecondaryStatFlag.indieSpeed, 150);
         statups.put(SecondaryStatFlag.indieBooster, -3);
         this.temporaryStatSet(80001427, 1, Integer.MAX_VALUE, statups);
      }

      if (DBConfig.isGanglim) {
         this.setBonusCTSStat();
         if (this.getHgrade() > 0) {
            int skillId = 80003159 + this.getHgrade();
            if (this.getHgrade() >= 11) {
               skillId = 80003176 + (this.getHgrade() - 11);
            }

            this.temporaryStatSet(SecondaryStatFlag.indieACC, skillId, Integer.MAX_VALUE, 1);
         }

         if (this.getPgrade() > 0) {
            int skillId = 80003169 + this.getPgrade();
            this.temporaryStatSet(SecondaryStatFlag.indieACC, skillId, Integer.MAX_VALUE, 1);
         }
      }
   }

   public long getLastUsePanicSkill() {
      return this.lastUsePanicSkill;
   }

   public void setLastUsePanicSkill(long lastUsePanicSkill) {
      this.lastUsePanicSkill = lastUsePanicSkill;
   }

   public boolean isBattleRecordOnCalc() {
      return this.battleRecordOnCalc;
   }

   public void setBattleRecordOnCalc(boolean battleRecordOnCalc) {
      this.battleRecordOnCalc = battleRecordOnCalc;
   }

   public void 혁신의룰렛() {
      objects.utils.Timer.EtcTimer timer = objects.utils.Timer.EtcTimer.getInstance();
      final AtomicInteger jobType = new AtomicInteger(Randomizer.nextInt(4));
      final AtomicInteger itemID = new AtomicInteger(Randomizer.rand(1, 4));
      final AtomicInteger job = new AtomicInteger(Randomizer.nextInt(5));
      this.send(CField.showEffect("miro/frame"));
      this.send(CField.showEffect("miro/RR1/" + jobType.get()));
      this.send(CField.showEffect("miro/RR2/" + itemID.get()));
      this.send(CField.showEffect("miro/RR3/" + job.get()));
      int[] item1 = new int[] { 1112585, 1112586, 1112663, 1112318, 1112319, 1112320 };
      int[] item2 = new int[] { 1123007, 1123008, 1123009, 1123010, 1123011, 1123012 };
      itemID.set(itemID.get() == 1 ? item2[job.get()] : item1[job.get()]);
      timer.schedule(
            new Runnable() {
               @Override
               public void run() {
                  MapleCharacter.this.아이템지급(jobType.get(), job.get(), itemID.get());
                  MapleCharacter.this.send(
                        CField.NPCPacket.getNPCTalk(
                              9000134,
                              (byte) 0,
                              "#fn나눔고딕 Extrabold#아래에서 당신의 내면의 결과를 확인해보세요.\r\n\r\n#b혁신의 룰렛#k 에서 [#i" + itemID.get()
                                    + "# #d#t" + itemID.get() + "##k](이)가 소환 되었습니다.",
                              "00 00",
                              (byte) 0));
               }
            },
            6000L);
   }

   public void 아이템지급(int jobType, int job, int itemID) {
      Equip equip = (Equip) MapleItemInformationProvider.getInstance().getEquipById(itemID);
      short str = 0;
      short dex = 0;
      short int_ = 0;
      short luk = 0;
      int stat = 0;
      switch (job) {
         case 0:
            switch (jobType) {
               case 0:
                  str = 5;
                  break;
               case 1:
                  int_ = 5;
                  break;
               case 2:
                  dex = 5;
                  break;
               case 3:
                  luk = 5;
                  break;
               case 4:
                  if (this.getJob() >= 510 || this.getJob() <= 512) {
                     str = 5;
                  } else if (this.getJob() < 520 && this.getJob() > 522) {
                     str = 5;
                  } else {
                     dex = 5;
                  }
            }
         case 1:
            switch (jobType) {
               case 0:
                  str = 10;
                  break;
               case 1:
                  dex = 10;
                  break;
               case 2:
                  int_ = 10;
                  break;
               case 3:
                  luk = 10;
            }

            stat = 5;
            break;
         case 2:
            switch (jobType) {
               case 0:
                  str = 15;
                  break;
               case 1:
                  int_ = 15;
                  break;
               case 2:
                  dex = 15;
                  break;
               case 3:
                  luk = 15;
                  break;
               case 4:
                  if (this.getJob() >= 510 || this.getJob() <= 512) {
                     str = 15;
                  } else if (this.getJob() < 520 && this.getJob() > 522) {
                     str = 15;
                  } else {
                     dex = 15;
                  }
            }

            stat = 7;
            break;
         case 3:
            switch (jobType) {
               case 0:
                  str = 20;
                  break;
               case 1:
                  int_ = 20;
                  break;
               case 2:
                  dex = 20;
                  break;
               case 3:
                  luk = 20;
                  break;
               case 4:
                  if (this.getJob() >= 510 || this.getJob() <= 512) {
                     str = 20;
                  } else if (this.getJob() < 520 && this.getJob() > 522) {
                     str = 20;
                  } else {
                     dex = 20;
                  }
            }
         case 4:
            switch (jobType) {
               case 0:
                  str = 25;
                  break;
               case 1:
                  int_ = 25;
                  break;
               case 2:
                  dex = 25;
                  break;
               case 3:
                  luk = 25;
                  break;
               case 4:
                  if (this.getJob() >= 510 || this.getJob() <= 512) {
                     str = 25;
                  } else if (this.getJob() < 520 && this.getJob() > 522) {
                     str = 25;
                  } else {
                     dex = 25;
                  }
            }

            stat = 11;
            break;
         case 5:
            switch (jobType) {
               case 0:
                  str = 30;
                  break;
               case 1:
                  int_ = 30;
                  break;
               case 2:
                  dex = 30;
                  break;
               case 3:
                  luk = 30;
                  break;
               case 4:
                  if (this.getJob() >= 510 || this.getJob() <= 512) {
                     str = 30;
                  } else if (this.getJob() < 520 && this.getJob() > 522) {
                     str = 30;
                  } else {
                     dex = 30;
                  }
            }

            stat = 15;
      }

      equip.setStr(str);
      equip.setDex(dex);
      equip.setInt(int_);
      equip.setLuk(luk);
      equip.setBossDamage((byte) stat);
      equip.setTotalDamage((byte) stat);
      equip.setAllStat((byte) stat);
      MapleInventoryManipulator.addFromDrop(this.getClient(), equip, false);
   }

   public boolean isFPMage() {
      return this.getJob() >= 210 && this.getJob() <= 212;
   }

   public boolean isILMage() {
      return this.getJob() >= 220 && this.getJob() <= 222;
   }

   public boolean isBishop() {
      return this.getJob() >= 230 && this.getJob() <= 232;
   }

   public void chatMsg(int type, String msg) {
      this.send(CField.chatMsg(type, msg));
   }

   public int getBodyOfSteal() {
      return this.bodyOfSteal;
   }

   public void setBodyOfSteal(int bodyOfSteal) {
      this.bodyOfSteal = bodyOfSteal;
   }

   public void addBodyOfSteal() {
      this.bodyOfSteal++;
   }

   public long getSkillStartTime(int skillID) {
      return this.skillStartTime.containsKey(skillID) ? this.skillStartTime.get(skillID) : 0L;
   }

   public void setSkillStartTime(int skillID, long bodyOfStealStartTIme) {
      if (this.skillStartTime.containsKey(skillID)) {
         this.skillStartTime.replace(skillID, bodyOfStealStartTIme);
      } else {
         this.skillStartTime.put(skillID, bodyOfStealStartTIme);
      }
   }

   public void removeSkillStartTime(int skillID) {
      this.skillStartTime.remove(skillID);
   }

   public String getMacAddress() {
      return this.macAddress;
   }

   public void setMacAddress(String address) {
      this.macAddress = address;
   }

   public int getKillPoint() {
      return this.killPoint;
   }

   public void setKillPoint(int point) {
      this.killPoint = point;
   }

   public void gainKillPoint(int delta) {
      this.gainKillPoint(delta, 7);
   }

   public void gainKillPoint(int delta, int type) {
      this.gainKillPoint(delta, type, true);
   }

   public void gainKillPoint(int delta, int type, boolean qexUpdate) {
   }

   public long getLastUseArrowRain() {
      return this.lastUseArrowRain;
   }

   public void setLastUseArrowRain(long lastUseArrowRain) {
      this.lastUseArrowRain = lastUseArrowRain;
   }

   public final void showRecvGift(int itemID, String from) {
      this.send(
            CField.addPopupSay(
                  9062000, 3000, "#b" + from + "#k 님에게 #b(" + MapleItemInformationProvider.getInstance().getName(itemID)
                        + ")#k을(를) 선물받으셨습니다. 인벤토리를 확인해보세요.",
                  ""));
   }

   public int getSlowAttackCount() {
      return this.slowAttackCount;
   }

   public void setSlowAttackCount(int slowAttackCount) {
      this.slowAttackCount = slowAttackCount;
   }

   public int getReadyToDie() {
      return this.readyToDie;
   }

   public void setReadyToDie(int value) {
      this.readyToDie = value;
   }

   public void addReadyToDie() {
      this.readyToDie++;
   }

   public int getEnergySkillID() {
      switch (this.getJob()) {
         case 510:
            return 5100015;
         case 511:
            return 5110014;
         case 512:
            return 5120018;
         case 1510:
         case 1511:
         case 1512:
            return 15100004;
         default:
            return 0;
      }
   }

   public int getViperEnergyCharge() {
      return this.viperEnergyCharge;
   }

   public void setViperEnergyCharge(int viperEnergyCharge) {
      this.viperEnergyCharge = viperEnergyCharge;
   }

   public int getViperEnergyOrb() {
      return this.viperEnergyOrb;
   }

   public void setViperEnergyOrb(int viperEnergyOrb) {
      this.viperEnergyOrb = viperEnergyOrb;
   }

   public int getBlackJackCount() {
      return this.blackJackCount;
   }

   public void setBlackJackCount(int blackJackCount) {
      this.blackJackCount = blackJackCount;
   }

   public int getHowlingGaleCount() {
      return this.howlingGaleCount;
   }

   public void setHowlingGaleCount(int howlingGaleCount) {
      this.howlingGaleCount = howlingGaleCount;
   }

   public void startFishingTask() {
      if (this.fishingTask == null) {
         if (this.lastFishingTime == 0L) {
            this.lastFishingTime = System.currentTimeMillis();
         }

         if (this.getMapId() == ServerConstants.chairFishingMapID) {
            this.fishingTask = objects.utils.Timer.MapTimer.getInstance()
                  .register(
                        new Runnable() {
                           @Override
                           public void run() {
                              if (MapleCharacter.this.lastFishingTime != 0L
                                    && System.currentTimeMillis() - MapleCharacter.this.lastFishingTime >= 60000L) {
                                 if (MapleCharacter.this.getMapId() != ServerConstants.chairFishingMapID) {
                                    MapleCharacter.this.dropMessage(5, "맵이 변경되어 휴식 포인트를 얻을 수 없습니다.");
                                    MapleCharacter.this.cancelFishingTask();
                                 } else {
                                    Integer chairRiding = MapleCharacter.this
                                          .getBuffedValue(SecondaryStatFlag.RideVehicle);
                                    if (MapleCharacter.this.getChair() == 0 && chairRiding == null) {
                                       MapleCharacter.this.cancelFishingTask();
                                    } else if (MapleCharacter.this.getClient().getPlayer() == null) {
                                       MapleCharacter.this.cancelFishingTask();
                                    } else {
                                       long curTime = System.currentTimeMillis();
                                       MapleCharacter.this.lastFishingTime = curTime;
                                       long restPointTime = MapleCharacter.this.getOneInfoQuestLong(
                                             QuestExConstants.JinRestPointReward.getQuestID(), "RestPTime");
                                       if (curTime - restPointTime >= 58000L) {
                                          int restPoint = MapleCharacter.this.getOneInfoQuestInteger(
                                                QuestExConstants.JinRestPointReward.getQuestID(), "RestPoint");
                                          MapleCharacter.this.updateOneInfo(
                                                QuestExConstants.JinRestPointReward.getQuestID(), "RestPoint",
                                                String.valueOf(restPoint + 1));
                                          MapleCharacter.this.updateOneInfo(
                                                QuestExConstants.JinRestPointReward.getQuestID(), "RestPTime",
                                                String.valueOf(curTime));
                                       }

                                       MapleCharacter.this.send(CField.fishingInfo(3));
                                       MapleCharacter.this.send(CField.fishingInfo(6));
                                       MapleCharacter.this.gainDancePoint(1);
                                       MapleCharacter.this.send(
                                             CWvsContext.getStaticScreenMessage("휴식 포인트를 1포인트 획득하여 총 "
                                                   + MapleCharacter.this.getDancePoint() + "포인트를 보유중입니다.", false, 1));
                                    }
                                 }
                              }
                           }
                        },
                        1000L);
            if (DBConfig.isGanglim) {
               this.send(CField.chatMsg(1, "지금부터 1분마다 휴식 포인트를 1점씩 획득할 수 있습니다."));
            } else {
               this.dropMessage(6, "1분마다 휴식 포인트 1점을 획득합니다.");
            }
         }
      }
   }

   public void cancelFishingTask() {
      if (this.fishingTask != null) {
         this.fishingTask.cancel(true);
         this.fishingTask = null;
      }
   }

   public boolean inFishing() {
      return this.fishingTask != null;
   }

   public long getLastFishingTime() {
      return this.lastFishingTime;
   }

   public void setLastFishingTime(long lastFishingTime) {
      this.lastFishingTime = lastFishingTime;
   }

   public void startChairTask() {
      if (this.ChairTask == null) {
         if (this.lastChairTime == 0L) {
            this.lastChairTime = System.currentTimeMillis();
         }

         if (ServerConstants.isRoyalFishingMap(this.getMapId())) {
            this.ChairTask = objects.utils.Timer.MapTimer.getInstance()
                  .register(
                        new Runnable() {
                           @Override
                           public void run() {
                              if (MapleCharacter.this.lastChairTime != 0L
                                    && System.currentTimeMillis() - MapleCharacter.this.lastChairTime >= 60000L) {
                                 if (!ServerConstants.isRoyalFishingMap(MapleCharacter.this.getMapId())) {
                                    MapleCharacter.this.dropMessage(5, "맵이 변경되어 휴식 포인트를 얻을 수 없습니다.");
                                    MapleCharacter.this.cancelChairTask();
                                 } else {
                                    MapleCharacter.this.lastChairTime = System.currentTimeMillis();
                                    if (DBConfig.isGanglim) {
                                       MapleItemInformationProvider ii = MapleItemInformationProvider.getInstance();
                                       List<Triple<Integer, Integer, Integer>> list = new ArrayList<>(
                                             MapleFishing.fishingItem);
                                       Collections.shuffle(list);

                                       for (Triple<Integer, Integer, Integer> item : list) {
                                          if (Randomizer.isSuccess(item.right)) {
                                             MapleCharacter.this.gainItem(item.left, item.mid);
                                             MapleCharacter.this.dropMessage(6, "[낚시 알림] 낚시를통해 ["
                                                   + ii.getName(item.left) + "] 을(를) " + item.mid + "개 얻었습니다!");
                                             break;
                                          }
                                       }
                                    }

                                    int point = MapleCharacter.this.getKeyValue(100712, "point");
                                    MapleCharacter.this.setKeyValue(100712, "point", ++point + "");
                                    MapleCharacter.this.updateInfoQuest(
                                          100712,
                                          "point="
                                                + MapleCharacter.this.getKeyValue(100712, "point")
                                                + ";start=1;date="
                                                + GameConstants.getCurrentDate_NoTime()
                                                + ";today=0;start2=1;lock=1");
                                 }
                              }
                           }
                        },
                        1000L);
            if (DBConfig.isGanglim) {
               this.dropMessage(5, "[휴식 안내] 휴식을 통해 1분마다 네오 젬을 얻으실 수 있습니다.");
               this.dropMessage(5, "[낚시 안내] 낚시를 시작합니다.");
            }
         }
      }
   }

   public void cancelChairTask() {
      if (this.ChairTask != null) {
         this.ChairTask.cancel(true);
         this.ChairTask = null;
      }
   }

   public boolean isShadowServantChangePos() {
      return this.shadowServantChangePos;
   }

   public void setShadowServantChangePos(boolean shadowServantChangePos) {
      this.shadowServantChangePos = shadowServantChangePos;
   }

   public long getMegaSmasherChargeStartTime() {
      return this.megaSmasherChargeStartTime;
   }

   public void setMegaSmasherChargeStartTime(long megaSmasherChargeStartTime) {
      this.megaSmasherChargeStartTime = megaSmasherChargeStartTime;
   }

   public void cancelFireBombTask() {
      if (this.fireBombTask != null) {
         this.fireBombTask.cancel(true);
         this.fireBombTask = null;
      }

      this.dispelDebuff(SecondaryStatFlag.FireBomb);
   }

   public void startFireBombTask() {
      if (this.getBuffedValue(SecondaryStatFlag.NotDamaged) == null
            && this.getIndieTemporaryStats(SecondaryStatFlag.indiePartialNotDamaged).size() <= 0) {
         Integer value = this.getBuffedValueDefault(SecondaryStatFlag.FireBomb, 0);
         int x = 1;
         this.dispelDebuff(SecondaryStatFlag.FireBomb);
         int max = 3;
         int v = Math.min(max, value + x);
         this.giveDebuff(SecondaryStatFlag.FireBomb, v, 0, 2147483647L, 183, 1);
      }
   }

   public void cancelDemonFrenzyTask() {
      if (this.demonFrenzyTask != null) {
         this.demonFrenzyTask.cancel(true);
         this.demonFrenzyTask = null;
      }
   }

   public int getActivePsychicAreaCount() {
      return this.activePsychicAreaCount;
   }

   public void setActivePsychicAreaCount(int activePsychicAreaCount) {
      this.activePsychicAreaCount = activePsychicAreaCount;
   }

   public int getAndAddActivePsychicAreaCount() {
      return this.activePsychicAreaCount++;
   }

   public int getPsychicTornadoActiveCount() {
      return this.psychicTornadoActiveCount;
   }

   public void setPsychicTornadoActiveCount(int psychicTornadoActiveCount) {
      this.psychicTornadoActiveCount = psychicTornadoActiveCount;
   }

   public long getPsychicTornadoStartTime() {
      return this.psychicTornadoStartTime;
   }

   public void setPsychicTornadoStartTime(long psychicTornadoStartTime) {
      this.psychicTornadoStartTime = psychicTornadoStartTime;
   }

   public long getLastActiveChainArtsFuryTime() {
      return this.lastActiveChainArtsFuryTime;
   }

   public void setLastActiveChainArtsFuryTime(long lastActiveChainArtsFuryTime) {
      this.lastActiveChainArtsFuryTime = lastActiveChainArtsFuryTime;
   }

   public boolean isHammerResult() {
      return this.hammerResult;
   }

   public void setHammerResult(boolean hammerResult) {
      this.hammerResult = hammerResult;
   }

   public int getAdrenalinBoostCount() {
      return this.adrenalinBoostCount;
   }

   public void setAdrenalinBoostCount(int adrenalinBoostCount) {
      this.adrenalinBoostCount = adrenalinBoostCount;
   }

   public long getLastDemonFrenzyBloodTime() {
      return this.lastDemonFrenzyBloodTime;
   }

   public void setLastDemonFrenzyBloodTime(long lastDemonFrenzyBloodTime) {
      this.lastDemonFrenzyBloodTime = lastDemonFrenzyBloodTime;
   }

   public void giveDefaultVMatrixSkill() {
      for (Integer skillID : this.getDefaultVMatrixSkill()) {
         int coreID = VCoreData.getCoreIdBySkill(skillID);
         if (coreID != 0) {
            VSpecialCoreOption specialCoreOption = VCoreData.getSpecialCoreOption(coreID);
            long availableTime = -1L;
            if (specialCoreOption != null) {
               availableTime = System.currentTimeMillis() + 1209600000L;
            }

            VCore core = new VCore(System.currentTimeMillis(), coreID, this.getId(), 1, 0, 1, skillID, 0, 0,
                  specialCoreOption, availableTime, -1, false);
            this.addVCoreSkills(core);
            this.send(CWvsContext.UpdateCore(this, true, 13, 0));
            this.send(CWvsContext.MakeCoreResult(core, 1));
         }
      }

      this.setSaveFlag(this.getSaveFlag() | CharacterSaveFlag.V_MATRIX.getFlag());
   }

   public List<Integer> getDefaultVMatrixSkill() {
      List<Integer> skills = new ArrayList<>();
      skills.add(400001000);
      switch (this.getJob()) {
         case 112:
            skills.add(400011001);
            skills.add(400011027);
            skills.add(400011073);
            skills.add(400011124);
            break;
         case 122:
            skills.add(400011003);
            skills.add(400011052);
            skills.add(400011072);
            skills.add(400011131);
            break;
         case 132:
            skills.add(400011004);
            skills.add(400011054);
            skills.add(400011068);
            skills.add(400011047);
            break;
         case 212:
            skills.add(400021001);
            skills.add(400021028);
            skills.add(400021066);
            skills.add(400021101);
            break;
         case 222:
            skills.add(400021002);
            skills.add(400021030);
            skills.add(400021067);
            skills.add(400021094);
            break;
         case 232:
            skills.add(400021003);
            skills.add(400021032);
            skills.add(400021070);
            skills.add(400021086);
            break;
         case 312:
            skills.add(400031002);
            skills.add(400031020);
            skills.add(400031028);
            skills.add(400031053);
            break;
         case 322:
            skills.add(400031006);
            skills.add(400031015);
            skills.add(400031025);
            skills.add(400031055);
            break;
         case 332:
            skills.add(400031034);
            skills.add(400031036);
            skills.add(400031037);
            skills.add(400031057);
            break;
         case 412:
            skills.add(400041001);
            skills.add(400041020);
            skills.add(400041038);
            skills.add(400041061);
            break;
         case 422:
            skills.add(400041002);
            skills.add(400041025);
            skills.add(400041039);
            skills.add(400041069);
            break;
         case 434:
            skills.add(400041006);
            skills.add(400041021);
            skills.add(400041042);
            skills.add(400041075);
            break;
         case 512:
            skills.add(400051002);
            skills.add(400051015);
            skills.add(400051042);
            skills.add(400051070);
            break;
         case 522:
            skills.add(400051006);
            skills.add(400051021);
            skills.add(400051040);
            skills.add(400051073);
            break;
         case 532:
            skills.add(400051008);
            skills.add(400051024);
            skills.add(400051038);
            skills.add(400051074);
            break;
         case 1112:
            skills.add(400011005);
            skills.add(400011055);
            skills.add(400011088);
            skills.add(400011048);
            break;
         case 1212:
            skills.add(400021004);
            skills.add(400021042);
            skills.add(400021072);
            skills.add(400021092);
            break;
         case 1312:
            skills.add(400031003);
            skills.add(400031022);
            skills.add(400031030);
            skills.add(400031058);
            break;
         case 1412:
            skills.add(400041008);
            skills.add(400041028);
            skills.add(400041037);
            skills.add(400041059);
            break;
         case 1512:
            skills.add(400051007);
            skills.add(400051016);
            skills.add(400051044);
            skills.add(400051058);
            break;
         case 2112:
            skills.add(400011016);
            skills.add(400011031);
            skills.add(400010070);
            skills.add(400011121);
            break;
         case 2217:
            skills.add(400021012);
            skills.add(400021046);
            skills.add(400021073);
            skills.add(400021095);
            break;
         case 2312:
            skills.add(400031007);
            skills.add(400031017);
            skills.add(400031024);
            skills.add(400031044);
            break;
         case 2412:
            skills.add(400041009);
            skills.add(400041022);
            skills.add(400041040);
            skills.add(400041055);
            break;
         case 2512:
            skills.add(400051010);
            skills.add(400051022);
            skills.add(400051043);
            skills.add(400051078);
            break;
         case 2712:
            skills.add(400021005);
            skills.add(400021041);
            skills.add(400021071);
            skills.add(400021105);
            break;
         case 3112:
            skills.add(400011006);
            skills.add(400011057);
            skills.add(400011077);
            skills.add(400011110);
            break;
         case 3122:
            skills.add(400011010);
            skills.add(400011038);
            skills.add(400011090);
            skills.add(400011112);
            break;
         case 3212:
            skills.add(400021006);
            skills.add(400021047);
            skills.add(400021069);
            skills.add(400021087);
            break;
         case 3312:
            skills.add(400031005);
            skills.add(400031012);
            skills.add(400031032);
            skills.add(400031046);
            break;
         case 3512:
            skills.add(400051009);
            skills.add(400051017);
            skills.add(400051041);
            skills.add(400051068);
            break;
         case 3612:
            skills.add(400041007);
            skills.add(400041029);
            skills.add(400041044);
            skills.add(400041057);
            break;
         case 3712:
            skills.add(400011017);
            skills.add(400011028);
            skills.add(400011091);
            skills.add(400011116);
            break;
         case 5112:
            skills.add(400011011);
            skills.add(400011032);
            skills.add(400011083);
            skills.add(400011127);
            break;
         case 6112:
            skills.add(400011012);
            skills.add(400011058);
            skills.add(400011079);
            skills.add(400011118);
            break;
         case 6312:
            skills.add(400031061);
            skills.add(400031065);
            skills.add(400031062);
            skills.add(400031066);
            break;
         case 6412:
            skills.add(400041033);
            skills.add(400041035);
            skills.add(400041041);
            skills.add(400041074);
            break;
         case 6512:
            skills.add(400051011);
            skills.add(400051018);
            skills.add(400051046);
            skills.add(400051072);
            break;
         case 10112:
            skills.add(400011015);
            skills.add(400011039);
            skills.add(400011098);
            skills.add(400011134);
            break;
         case 14212:
            skills.add(400021008);
            skills.add(400021048);
            skills.add(400021074);
            skills.add(400021096);
            break;
         case 15112:
            skills.add(400011105);
            skills.add(400011108);
            skills.add(400011109);
            skills.add(400011136);
            break;
         case 15212:
            skills.add(400021061);
            skills.add(400021063);
            skills.add(400021068);
            skills.add(400021099);
            break;
         case 15412:
            skills.add(400041082);
            skills.add(400041084);
            skills.add(400041087);
            skills.add(400041089);
            break;
         case 15512:
            skills.add(400051334);
            skills.add(400051036);
            skills.add(400051047);
            skills.add(400051080);
            break;
         case 16212:
            skills.add(400021122);
            skills.add(400021123);
            skills.add(400021129);
            skills.add(400021130);
            break;
         case 16412:
            skills.add(400041048);
            skills.add(400041050);
            skills.add(400041052);
            skills.add(400041063);
      }

      return skills;
   }

   public int getSpiritWardCount() {
      return this.spiritWardCount;
   }

   public void setSpiritWardCount(int spiritWardCount) {
      this.spiritWardCount = spiritWardCount;
   }

   public List<IndieTemporaryStatEntry> getIndieTemporaryStats(SecondaryStatFlag flag) {
      return this.getIndieTemporaryStatEntries(flag);
   }

   public IndieTemporaryStatEntry getIndieTemporaryStat(SecondaryStatFlag flag, int skillID) {
      return this.getIndieTemporaryStatEntry(flag, skillID);
   }

   public boolean hasTimeoutMoveMapTask() {
      return this.timeOutMoveTask != null;
   }

   public void registerTimeoutMoveMapTask(Runnable runnable, int time) {
      if (this.timeOutMoveTask == null) {
         this.timeOutMoveTask = objects.utils.Timer.MapTimer.getInstance().schedule(runnable, time);
      }
   }

   public void cancelTimeoutMoveMapTask() {
      if (this.timeOutMoveTask != null) {
         this.timeOutMoveTask.cancel(true);
         this.timeOutMoveTask = null;
         this.setStartTimeoutMoveTime(0L);
         this.setTimeoutMoveDuration(0);
      }
   }

   public long getStartTimeoutMoveTime() {
      return this.startTimeoutMoveTime;
   }

   public void setStartTimeoutMoveTime(long startTimeoutMoveTime) {
      this.startTimeoutMoveTime = startTimeoutMoveTime;
   }

   public int getTimeoutMoveDuration() {
      return this.timeoutMoveDuration;
   }

   public void setTimeoutMoveDuration(int timeoutMoveDuration) {
      this.timeoutMoveDuration = timeoutMoveDuration;
   }

   public void temporaryStatSet(int skillID, int skillLevel) {
      SecondaryStatEffect effect = SkillFactory.getSkill(skillID).getEffect(skillLevel);
      if (effect != null) {
         effect.applyTo(this);
      }
   }

   public ReentrantReadWriteLock getCoreListsLock() {
      return this.coreListsLock;
   }

   public void gainItemAllStat(int itemid, short quantity, short allstat, short wmtk) {
      Equip equip = new Equip(itemid, quantity, (byte) 0);
      equip.setStr(allstat);
      equip.setDex(allstat);
      equip.setInt(allstat);
      equip.setLuk(allstat);
      if (wmtk != -1) {
         equip.setWatk(wmtk);
         equip.setMatk(wmtk);
      }

      MapleInventoryManipulator.addFromDrop(this.client, equip, true);
   }

   public int getStarPer(int index) {
      return this.StarPer == null ? 0 : this.StarPer[index];
   }

   public void setStarPer(int index, int per) {
      this.StarPer[index] = per;
   }

   public int getTest() {
      return this.test;
   }

   public void addTest() {
      this.test++;
   }

   public void setTest(int test) {
      this.test = test;
   }

   public int getBlessMark() {
      return this.blessMark;
   }

   public void setBlessMark(int blessMark) {
      this.blessMark = blessMark;
   }

   public void addBlessMark() {
      if (this.blessMark < 10) {
         this.blessMark++;
      }
   }

   public Summoned getSummonByMovementType(SummonMoveAbility type) {
      Summoned var4;
      try {
         Iterator var2 = this.getSummonsReadLock().iterator();

         Summoned summon;
         do {
            if (!var2.hasNext()) {
               return null;
            }

            summon = (Summoned) var2.next();
         } while (summon.getMoveAbility() != type);

         var4 = summon;
      } finally {
         this.unlockSummonsReadLock();
      }

      return var4;
   }

   public Summoned getSummonBySkillID(int skillID) {
      Summoned var4;
      try {
         Iterator var2 = this.getSummonsReadLock().iterator();

         Summoned summon;
         do {
            if (!var2.hasNext()) {
               return null;
            }

            summon = (Summoned) var2.next();
         } while (summon.getSkill() != skillID);

         var4 = summon;
      } finally {
         this.unlockSummonsReadLock();
      }

      return var4;
   }

   public int getSummonedSize(int skillID) {
      int size = 0;

      try {
         for (Summoned summon : this.getSummonsReadLock()) {
            if (summon.getSkill() == skillID) {
               size++;
            }
         }
      } finally {
         this.unlockSummonsReadLock();
      }

      return size;
   }

   public List<Summoned> getSummons(int skillID) {
      List<Summoned> list = new ArrayList<>();

      try {
         for (Summoned summon : this.getSummonsReadLock()) {
            if (summon.getSkill() == skillID) {
               list.add(summon);
            }
         }
      } finally {
         this.unlockSummonsReadLock();
      }

      return list;
   }

   public int getBlessMarkSkillID() {
      int blessMark = 0;
      if (this.getSkillLevel(152000007) > 0) {
         blessMark = 152000007;
         if (this.getSkillLevel(152110009) > 0) {
            blessMark = 152110009;
         }

         if (this.getSkillLevel(152120012) > 0) {
            blessMark = 152120012;
         }
      }

      return blessMark;
   }

   public int getCurseMarkSkillID() {
      int curseMark = 0;
      if (this.getSkillLevel(152100012) > 0) {
         curseMark = 152100012;
         if (this.getSkillLevel(152110010) > 0) {
            curseMark = 152110010;
         }

         if (this.getSkillLevel(152120013) > 0) {
            curseMark = 152120013;
         }
      }

      return curseMark;
   }

   public boolean isActiveGloryWing() {
      return this.activeGloryWing;
   }

   public void setActiveGloryWing(boolean activeGloryWing) {
      this.activeGloryWing = activeGloryWing;
   }

   public boolean isUseMortalWingBit() {
      return this.useMortalWingBit;
   }

   public void setUseMortalWingBit(boolean useMortalWingBit) {
      this.useMortalWingBit = useMortalWingBit;
   }

   public void initShieldChasingCount(int key) {
      this.shieldChasingCount.put(key, 0);
      this.shieldChasingCount.put(key + 1, 0);
   }

   public int getShieldChasingCount(int key) {
      return this.shieldChasingCount.containsKey(key) ? this.shieldChasingCount.get(key) : -1;
   }

   public void addShieldChasingCount(int key) {
      if (this.shieldChasingCount.containsKey(key)) {
         this.shieldChasingCount.put(key, this.shieldChasingCount.get(key) + 1);
      }
   }

   public void resetShieldChasingCount(int key) {
      if (this.shieldChasingCount.containsKey(key)) {
         this.shieldChasingCount.remove(key);
      }
   }

   public int getForceAtomKey() {
      return this.forceAtomKey;
   }

   public int getAndAddForceAtomKey() {
      return this.forceAtomKey += 2;
   }

   public void setForceAtomKey(int forceAtomKey) {
      this.forceAtomKey = forceAtomKey;
   }

   public long getLastActiveLightningCascade() {
      return this.lastActiveLightningCascade;
   }

   public void setLastActiveLightningCascade(long lastActiveLightningCascade) {
      this.lastActiveLightningCascade = lastActiveLightningCascade;
   }

   public int getRoadRingExpBoost() {
      return this.roadRingExpBoost;
   }

   public void setRoadRingExpBoost(int roadRingExpBoost) {
      this.roadRingExpBoost = roadRingExpBoost;
   }

   public int getShadowBatMobCount() {
      return this.shadowBatMobCount;
   }

   public void setShadowBatMobCount(int shadowBatMobCount) {
      this.shadowBatMobCount = shadowBatMobCount;
   }

   public int getNightWalkerAttackCount() {
      return this.nightWalkerAttackCount;
   }

   public void setNightWalkerAttackCount(int nightWalkerAttackCount) {
      this.nightWalkerAttackCount = nightWalkerAttackCount;
   }

   public int getLastUseSkill() {
      return this.lastUseSkill;
   }

   public void setLastUseSkill(int lastUseSkill) {
      this.lastUseSkill = lastUseSkill;
   }

   public void setSaveFlag(int flag) {
      this.saveFlag = flag;
   }

   public int getSaveFlag() {
      return this.saveFlag;
   }

   public void setSaveFlag2(int flag) {
      this.saveFlag2 = flag;
   }

   public int getSaveFlag2() {
      return this.saveFlag2;
   }

   public Map<Integer, QuestEx> getQuestInfos() {
      return this.questinfo;
   }

   public Map<String, String> getCustomInfos() {
      return this.custominfo;
   }

   public CashShop getCashShop() {
      return this.cs;
   }

   public boolean isProcessSave() {
      return this.processSave;
   }

   public void setProcessSave(boolean processSave) {
      this.processSave = processSave;
   }

   public LinkSkill getLinkSkill() {
      return this.linkSkill;
   }

   public SkillAlarm getSkillAlarm() {
      return this.skillAlarm;
   }

   public HundredBingo getBingoGame() {
      return this.bingoGame;
   }

   public void setBingoGame(HundredBingo bingoGame) {
      this.bingoGame = bingoGame;
   }

   public boolean isCCByScript() {
      return this.ccByScript;
   }

   public String getCurrentDirection() {
      String ret = this.curDirection;
      this.curDirection = null;
      return ret;
   }

   public void setCurrentDirection(String curDirection) {
      this.curDirection = curDirection;
      AllowedDirectionFieldMan.engage(curDirection);
   }

   public int getReincarnationCount() {
      return this.reincarnationCount;
   }

   public void setReincarnationCount(int reincarnationCount) {
      this.reincarnationCount = reincarnationCount;
   }

   public void addReincarnationCount(int count) {
      this.reincarnationCount += count;
   }

   public long getStartReincarnationTime() {
      return this.startReincarnationTime;
   }

   public void setStartReincarnationTime(long startReincarnationTime) {
      this.startReincarnationTime = startReincarnationTime;
   }

   public void addAuctionWishList(int auctionID) {
      this.auctionWishList.add(auctionID);
      this.setSaveFlag(this.getSaveFlag() | CharacterSaveFlag.AUCTION_WISH_LIST.getFlag());
   }

   public void removeAuctionWishList(Integer auctionID) {
      this.auctionWishList.remove(auctionID);
      this.setSaveFlag(this.getSaveFlag() | CharacterSaveFlag.AUCTION_WISH_LIST.getFlag());
   }

   public List<Integer> getAuctionWishList() {
      return this.auctionWishList;
   }

   public int getWreckageCount() {
      return this.wreckageCount;
   }

   public void setWreckageCount(int wreckageCount) {
      this.wreckageCount = wreckageCount;
   }

   public int incAndGetWreckageCount() {
      return ++this.wreckageCount;
   }

   public int decAndGetWreckageCount() {
      return --this.wreckageCount;
   }

   public long getCanNextSpecterStateTime() {
      return this.canNextSpecterStateTime;
   }

   public void setCanNextSpecterStateTime(long canNextSpecterStateTime) {
      this.canNextSpecterStateTime = canNextSpecterStateTime;
   }

   public int getPassiveStack() {
      return this.passiveStack;
   }

   public void setPassiveStack(int passiveStack) {
      this.passiveStack = passiveStack;
   }

   public void addBossDamage(int bdr) {
      this.setKeyValue2("add_bdr", this.getKeyValue2("add_bdr") + bdr);
      this.giveBossDamage();
   }

   public void addCriticalDamage(int criticalDamage) {
      this.setKeyValue2("add_critical_dam", this.getKeyValue2("add_critical_dam") + criticalDamage);
      this.temporaryStatSet(72000046, Integer.MAX_VALUE, SecondaryStatFlag.indieCD,
            this.getKeyValue2("add_critical_dam"));
      this.giveCriticalDamage();
   }

   public void giveBossDamage() {
      this.temporaryStatSet(72000046, Integer.MAX_VALUE, SecondaryStatFlag.indieBDR, this.getKeyValue2("add_bdr"));
   }

   public void giveCriticalDamage() {
      this.temporaryStatSet(72000046, Integer.MAX_VALUE, SecondaryStatFlag.indieCD,
            this.getKeyValue2("add_critical_dam"));
   }

   public long getChangeEmotionTime() {
      return this.changeEmotionTime;
   }

   public void setChangeEmotionTime(long changeEmotionTime) {
      this.changeEmotionTime = changeEmotionTime;
   }

   public boolean inDancing() {
      return this.dancePointTask != null;
   }

   public void gainDancePoint(int value) {
      this.dancePoint += value;
      if (value > 0) {
         this.totalDancePoint += value;
      }
   }

   public int getDancePoint() {
      return this.dancePoint;
   }

   public void setDancePoint(int value) {
      this.dancePoint = value;
   }

   public int getTotalDancePoint() {
      return this.totalDancePoint;
   }

   public void startDancePointTask(final int itemID, final int cycle) {
      if (this.dancePointTask == null) {
         if (this.lastDancePointTime == 0L) {
            this.lastDancePointTime = System.currentTimeMillis();
         }

         if (this.getMapId() == 910001000 || this.getMapId() == 993050600) {
            this.dropMessage(5, "댄스타임 시작!");
            this.dancePointTask = objects.utils.Timer.MapTimer.getInstance().register(new Runnable() {
               @Override
               public void run() {
                  if (MapleCharacter.this.lastDancePointTime != 0L
                        && System.currentTimeMillis() - MapleCharacter.this.lastDancePointTime >= cycle) {
                     if (MapleCharacter.this.getMapId() != 910001000 && MapleCharacter.this.getMapId() != 993050600) {
                        MapleCharacter.this.cancelDancePointTask();
                     }

                     if (MapleCharacter.this.getStackTodayCount("today_dance_point") >= 1500) {
                        MapleCharacter.this.cancelDancePointTask();
                     }

                     if (MapleCharacter.this.getInventory(MapleInventoryType.SETUP).findById(itemID) != null) {
                        MapleCharacter.this.lastDancePointTime = System.currentTimeMillis();
                        MapleCharacter.this.gainDancePoint(1);
                        MapleCharacter.this.CountAdd("today_dance_point");
                        MapleCharacter.this.dropMessage(5,
                              "댄스 포인트를 1획득하여 " + MapleCharacter.this.getDancePoint() + "포인트가 되었습니다.");
                     } else {
                        MapleCharacter.this.cancelDancePointTask();
                     }
                  }
               }
            }, 1000L);
         }
      }
   }

   public void cancelDancePointTask() {
      if (this.dancePointTask != null) {
         this.dancePointTask.cancel(true);
         this.dancePointTask = null;
      }
   }

   public int getStackTodayCount(String key) {
      String v = this.getKeyValue(key);
      if (v != null && !v.isEmpty()) {
         int count = Integer.parseInt(v);
         if (count > 0) {
            String time = this.getKeyValue(key + "_time");
            if (time == null || time.isEmpty()) {
               return 0;
            } else {
               return time.equals(this.getToday()) ? count : 0;
            }
         } else {
            return 0;
         }
      } else {
         return 0;
      }
   }

   public int getGuildBonusExpBoost() {
      return this.guildBonusExpBoost;
   }

   public void setGuildBonusExpBoost(int guildBonusExpBoost) {
      this.guildBonusExpBoost = guildBonusExpBoost;
   }

   public void checkGuildBonusExpBoost() {
      boolean find = false;

      for (int i = -12; i >= -21; i--) {
         Equip equip = (Equip) this.getInventory(MapleInventoryType.EQUIPPED).getItem((short) i);
         if (equip != null) {
            for (int medalID : ServerConstants.guildMedalItemID) {
               if (equip.getItemId() == medalID) {
                  this.dropMessage(5, "길드 훈장 착용 효과로 인하여 경험치를 20% 보너스 획득합니다.");
                  this.guildBonusExpBoost = 20;
                  find = true;
               }
            }

            for (int medalIDx : ServerConstants.singleMedalItemID) {
               if (equip.getItemId() == medalIDx) {
                  this.dropMessage(5, "훈장 착용 효과로 인하여 경험치를 20% 보너스 획득합니다.");
                  this.guildBonusExpBoost = 20;
                  find = true;
               }
            }
         }
      }

      if (!find) {
         this.guildBonusExpBoost = 0;
      }
   }

   public int getDrawElfEar_Look() {
      if (GameConstants.isCanElfEar(this.getJob())) {
         if (GameConstants.isIllium(this.getJob())) {
            switch (this.drawElfEar) {
               case 0:
                  return 2;
               case 2:
                  return 0;
               default:
                  return this.drawElfEar;
            }
         } else if (GameConstants.isMercedes(this.getJob())) {
            switch (this.drawElfEar) {
               case 0:
                  return 1;
               case 1:
                  return 0;
               default:
                  return this.drawElfEar;
            }
         } else {
            switch (this.drawElfEar) {
               case 0:
                  return 3;
               case 3:
                  return 0;
               default:
                  return this.drawElfEar;
            }
         }
      } else {
         return 0;
      }
   }

   public int getDrawElfEar() {
      return GameConstants.isCanElfEar(this.getJob()) ? this.drawElfEar : 3;
   }

   public void setDrawElfEar(int drawElfEar) {
      this.drawElfEar = drawElfEar;
   }

   public int getDrawTail() {
      try {
         return this.getOneInfoQuestInteger(7786, "sw");
      } catch (NullPointerException var2) {
         return 0;
      }
   }

   public void setDrawTail(int drawTail) {
      this.drawTail = drawTail;
   }

   public int getShift() {
      return this.shift;
   }

   public void setShift(int shift) {
      this.shift = shift;
   }

   public boolean isStartedFrozenLink() {
      return this.startFrozenLink;
   }

   public void cancelFrozenLinkTask() {
      this.frozenLinkSerialNumber = 0L;
      this.startFrozenLink = false;
   }

   public void addFrozenLinkMobCount(int count) {
      this.frozenLinkMobCount += count;
      if (this.frozenLinkMobCount <= 0) {
         this.frozenLinkMobCount = 0;
      }

      this.send(CField.FrozenLinkMobCount(this.frozenLinkMobCount));
   }

   public void startFrozenLinkTask() {
      if (this.getFrozenLinkMobID() != 0) {
         if (this.frozenLinkMobCount > 0) {
            this.send(CField.FrozenLinkMobCount(this.frozenLinkMobCount));
            this.startFrozenLink = true;
            this.setFrozenLinkSerialNumber(System.currentTimeMillis() - this.getId() + Randomizer.nextInt());
            if (this.getMapId() == 993014200) {
               for (int linkX : this.frozenLinkX) {
                  for (int i : this.frozenLinkY) {
                     MapleMonster mob = MapleLifeFactory.getMonster(this.getFrozenLinkMobID());
                     this.getMap().spawnMonsterOnFrozenLink(mob, new Point(linkX, i), this.getFrozenLinkSerialNumber());
                  }
               }
            }
         }
      }
   }

   public int getFrozenLinkMobID() {
      return this.frozenLinkMobID;
   }

   public void setFrozenLinkMobID(int frozenLinkMobID) {
      this.frozenLinkMobID = frozenLinkMobID;
   }

   public int getFrozenLinkMobCount() {
      return this.frozenLinkMobCount;
   }

   public void setFrozenLinkMobCount(int frozenLinkMobCount) {
      this.frozenLinkMobCount = frozenLinkMobCount;
   }

   public long getFrozenLinkSerialNumber() {
      return this.frozenLinkSerialNumber;
   }

   public void setFrozenLinkSerialNumber(long frozenLinkSerialNumber) {
      this.frozenLinkSerialNumber = frozenLinkSerialNumber;
   }

   public int getCurseWeakeningStack() {
      return this.curseWeakeningStack;
   }

   public void setCurseWeakeningStack(int curseWeakeningStack) {
      this.curseWeakeningStack = curseWeakeningStack;
   }

   public int getRelicCharge() {
      return this.relicCharge;
   }

   public void setRelicCharge(int relicCharge) {
      this.relicCharge = Math.max(0, relicCharge);
   }

   public int getLastUseCardinalForce() {
      return this.lastUseCardinalForce;
   }

   public void setLastUseCardinalForce(int lastUseCardinalForce) {
      this.lastUseCardinalForce = lastUseCardinalForce;
   }

   public int getPathfinderPattern() {
      return this.pathfinderPattern;
   }

   public void setPathfinderPattern(int pathfinderPattern) {
      this.pathfinderPattern = pathfinderPattern;
   }

   public void handleRelicChargeCon(int skillID, int forceCon, int targets) {
      SecondaryStatEffect eff = null;
      if (forceCon == -1) {
         if (targets > 0) {
            int sLV = this.getTotalSkillLevel(1298);
            if (sLV == 1) {
               eff = SkillFactory.getSkill(3010001).getEffect(1);
            } else if (sLV == 2) {
               eff = SkillFactory.getSkill(3300001).getEffect(1);
            } else if (sLV == 3) {
               eff = SkillFactory.getSkill(3310000).getEffect(1);
            }

            if (eff != null) {
               if (this.getCurseWeakeningStack() < eff.getX()) {
                  this.setCurseWeakeningStack(this.getCurseWeakeningStack() + 1);
               }

               eff.applyTo(this);
            }

            eff = SkillFactory.getSkill(3300000).getEffect(1);
            int max = eff.getU();
            if (this.getJob() == 332) {
               eff = SkillFactory.getSkill(3320000).getEffect(1);
            }

            if (this.getJob() >= 330 && this.getJob() <= 332) {
               int delta = skillID != 3300002 && skillID != 3321003 ? eff.getY() : targets * eff.getX();
               if (this.getRelicCharge() < max) {
                  this.setRelicCharge(Math.min(max, this.getRelicCharge() + delta));
                  this.onAncientGuardians(delta);
               }

               eff = SkillFactory.getSkill(3300000).getEffect(1);
               eff.applyTo(this);
            }
         }

         if (this.getLastUseCardinalForce() != 0 && this.getLastUseCardinalForce() != skillID) {
            int delta = 500;
            if (this.getJob() == 332) {
               delta = 1000;
            }

            this.changeCooldown(3301008, -delta);
            this.changeCooldown(3311010, -delta);
            this.changeCooldown(3321012, -delta);

            for (int i = 3321014; i <= 3321020; i++) {
               this.changeCooldown(i, -delta);
            }

            for (int i = 3321035; i <= 3321040; i++) {
               this.changeCooldown(i, -delta);
            }
         }

         this.setLastUseCardinalForce(skillID);
      } else if (forceCon != 0 && skillID != 3300000) {
         eff = SkillFactory.getSkill(3300000).getEffect(1);
         if (eff != null && System.currentTimeMillis() - this.getLastUpdatableTime() >= 1000L) {
            this.setRelicCharge(Math.max(0, this.getRelicCharge() - forceCon));
            eff.applyTo(this);
            this.setLastUpdatableTime(System.currentTimeMillis());
         }
      }
   }

   public long getLastUpdatableTime() {
      return this.lastUpdatableTime;
   }

   public void setLastUpdatableTime(long lastUpdatableTime) {
      this.lastUpdatableTime = lastUpdatableTime;
   }

   public int getCurseToleranceStack() {
      return this.curseToleranceStack;
   }

   public void setCurseToleranceStack(int curseToleranceStack) {
      this.curseToleranceStack = curseToleranceStack;
   }

   public boolean addCurseToleranceStack(int max) {
      if (this.curseToleranceStack < max) {
         this.curseToleranceStack++;
         return true;
      } else {
         return false;
      }
   }

   public int getAncientGuidance() {
      return this.ancientGuidance;
   }

   public void setAncientGuidance(int ancientGuidance) {
      this.ancientGuidance = ancientGuidance;
   }

   public long getEndAdditionalTransitionTime() {
      return this.endAdditionalTransitionTime;
   }

   public void setEndAdditionalTransitionTime(long endAdditionalTransitionTime) {
      this.endAdditionalTransitionTime = endAdditionalTransitionTime;
   }

   public int getAdditionalTransitionCount() {
      return this.additionalTransitionCount;
   }

   public void setAdditionalTransitionCount(int additionalTransitionCount) {
      this.additionalTransitionCount = additionalTransitionCount;
   }

   public int getDamReduceR() {
      return this.damReduceR;
   }

   public void setDamReduceR(int damReduceR) {
      this.damReduceR = damReduceR;
   }

   public void startAncientAstraTask(final int activeSkillID, final int forceCon) {
      this.cancelAncientAstraTask();
      this.ancientAstraTask = objects.utils.Timer.BuffTimer.getInstance().register(new Runnable() {
         @Override
         public void run() {
            SecondaryStatEffect eff = SkillFactory.getSkill(3300000).getEffect(1);
            if (eff != null) {
               int max = eff.getU();
               if (MapleCharacter.this.getRelicCharge() <= 0) {
                  MapleCharacter.this.send(CField.cancelAncientAstra(activeSkillID));
                  MapleCharacter.this.cancelAncientAstraTask();
                  return;
               }

               MapleCharacter.this.setRelicCharge(Math.min(max, MapleCharacter.this.getRelicCharge() - forceCon));
               eff.applyTo(MapleCharacter.this);
            }
         }
      }, 1000L);
   }

   public void cancelAncientAstraTask() {
      if (this.ancientAstraTask != null) {
         this.ancientAstraTask.cancel(true);
         this.ancientAstraTask = null;
      }
   }

   public HungryMuto getHungryMuto() {
      return this.hungryMuto;
   }

   public void setHungryMuto(HungryMuto hungryMuto) {
      this.hungryMuto = hungryMuto;
   }

   public int getMutoPickupItemID() {
      return this.mutoPickupItemID;
   }

   public void setMutoPickupItemID(int mutoPickupItemID) {
      this.mutoPickupItemID = mutoPickupItemID;
   }

   public int getMutoPickupItemQ() {
      return this.mutoPickupItemQ;
   }

   public void setMutoPickupItemQ(int mutoPickupItemQ) {
      this.mutoPickupItemQ = mutoPickupItemQ;
   }

   public int getMutoClearRank() {
      int value = this.getKeyValue2("has_muto_reward");
      return value != -1 && value == 0 ? this.getKeyValue2("muto_rank") : -1;
   }

   public void setMutoClearRank(int mutoClearRank) {
      this.setKeyValue2("muto_rank", mutoClearRank);
      this.setKeyValue2("has_muto_reward", 0);
   }

   public int getMutoClearTime() {
      int value = this.getKeyValue2("has_muto_reward");
      return value != -1 && value == 0 ? this.getKeyValue2("muto_clear_time") : -1;
   }

   public void setMutoClearTime(int mutoClearTime) {
      this.setKeyValue2("muto_clear_time", mutoClearTime);
      this.setKeyValue2("has_muto_reward", 0);
   }

   public int getMutoClearDifficulty() {
      int value = this.getKeyValue2("has_muto_reward");
      return value != -1 && value == 0 ? this.getKeyValue2("muto_clear_difficulty") : -1;
   }

   public void setMutoClearDifficulty(int difficulty) {
      this.setKeyValue2("muto_clear_difficulty", difficulty);
      this.setKeyValue2("has_muto_reward", 0);
   }

   public void mutoTodayHighReward(int value) {
      String v = this.getKeyValue("muto_reward");
      int count = 0;
      if (v != null && !v.isEmpty()) {
         count = Integer.parseInt(v);
      }

      String time = this.getKeyValue("muto_reward_time");
      if (time != null && !time.isEmpty()) {
         if (!time.equals(this.getToday())) {
            this.setKeyValue("muto_reward_time", this.getToday());
            this.setKeyValue("muto_reward", "0");
            return;
         }
      } else {
         this.setKeyValue("muto_reward_time", this.getToday());
      }

      this.setKeyValue("muto_reward", String.valueOf(value));
   }

   public int getMutoHighRank() {
      return this.getOneInfo(39015, "rank") == null ? -1 : Integer.parseInt(this.getOneInfo(39015, "rank"));
   }

   public int getMutoHighDifficultly() {
      return this.getOneInfo(39015, "difficultly") == null ? -1
            : Integer.parseInt(this.getOneInfo(39015, "difficultly"));
   }

   public void setMutoHighRecord(int rank, int difficultly) {
      if (this.getOneInfo(39015, "rank") == null) {
         this.updateInfoQuest(39015, "rank=" + rank + ";difficultly=" + difficultly + ";");
      }

      int diff = Integer.parseInt(this.getOneInfo(39015, "difficultly"));
      if (diff < difficultly) {
         this.updateOneInfo(39015, "difficultly", String.valueOf(difficultly));
         this.updateOneInfo(39015, "rank", String.valueOf(rank));
      } else if (diff == difficultly && Integer.parseInt(this.getOneInfo(39015, "rank")) > rank) {
         this.updateOneInfo(39015, "rank", String.valueOf(rank));
      }
   }

   public int getBuzzingHousePerfectCount() {
      return this.buzzingHousePerfectCount;
   }

   public void setBuzzingHousePerfectCount(int count) {
      this.buzzingHousePerfectCount = count;
   }

   public int getBuzzingHouseBlockCount() {
      return this.buzzingHouseBlockCount;
   }

   public void setBuzzingHouseBlockCount(int buzzingHouseBlockCount) {
      this.buzzingHouseBlockCount = buzzingHouseBlockCount;
   }

   public void addBuzzingHouseBlockCount(int count) {
      this.buzzingHouseBlockCount += count;
   }

   public void addBuzzingHousePerfectCount(int count) {
      this.buzzingHousePerfectCount += count;
   }

   public void startBuzzingHouseTask() {
      this.buzzingHouseTask = objects.utils.Timer.MapTimer.getInstance().schedule(new Runnable() {
         @Override
         public void run() {
            MapleCharacter.this.send(CField.UIPacket.setStandAloneMode(false));
            MapleCharacter.this.send(CField.UIPacket.IntroLock(false));
            GameServer cserv = MapleCharacter.this.getClient().getChannelServer();
            Field target = cserv.getMapFactory().getMap(993017000);
            MapleCharacter.this.changeMap(target, target.getPortal(0));
         }
      }, 301000L);
   }

   public void cancelBuzzingHouseTask() {
      if (this.buzzingHouseTask != null) {
         this.buzzingHouseTask.cancel(true);
         this.buzzingHouseTask = null;
      }
   }

   public boolean inBuzzingHouse() {
      return this.buzzingHouseTask != null;
   }

   public long getStackExp() {
      return this.stackExp;
   }

   public void setStackExp(long stackExp) {
      this.stackExp = stackExp;
   }

   public void addStackExp(long stackExp) {
      this.stackExp += stackExp;
   }

   public int getInnerSkillLevel(int skillID) {
      if (this.innerSkills == null) {
         return 0;
      } else {
         for (CharacterPotentialHolder holder : new LinkedList<>(this.innerSkills)) {
            if (holder != null && holder.getSkillId() == skillID) {
               return holder.getSkillLevel();
            }
         }

         return 0;
      }
   }

   public long getLastChangedChannelTime() {
      return this.lastChangedChannelTime;
   }

   public void setLastChangedChannelTime(long lastChangedChannelTime) {
      this.lastChangedChannelTime = lastChangedChannelTime;
   }

   public boolean isSelectDungeon() {
      return this.selectDungeon;
   }

   public void setSelectDungeon(boolean selectDungeon) {
      this.selectDungeon = selectDungeon;
   }

   public CalcDamage getCalcDamage() {
      return this.calcDamage;
   }

   public int getBossLimitClear1() {
      return this.bossLimitClear1;
   }

   public void setBossLimitClear1(int bossLimitClear1) {
      this.bossLimitClear1 = bossLimitClear1;
   }

   public int getBossLimitClear2() {
      return this.bossLimitClear2;
   }

   public void setBossLimitClear2(int bossLimitClear2) {
      this.bossLimitClear2 = bossLimitClear2;
   }

   public int getBossLimitClear3() {
      return this.bossLimitClear3;
   }

   public void setBossLimitClear3(int bossLimitClear3) {
      this.bossLimitClear3 = bossLimitClear3;
   }

   public void checkAngelicBless() {
      Iterator<Item> iter = this.getInventory(MapleInventoryType.EQUIPPED).iterator();
      int count = 0;

      while (iter.hasNext()) {
         Equip item = (Equip) iter.next();
         if (item != null) {
            int equippedSummon = 0;
            switch (item.getItemId()) {
               case 1112585:
                  equippedSummon = 1085;
                  break;
               case 1112586:
                  equippedSummon = 1087;
                  break;
               case 1112594:
                  equippedSummon = 1090;
                  break;
               case 1112663:
               case 1112735:
                  equippedSummon = 1179;
            }

            if (equippedSummon > 0) {
               Summoned s = new Summoned(
                     this, equippedSummon, 1, this.getTruePosition(), SummonMoveAbility.FOLLOW, (byte) 0,
                     System.currentTimeMillis() + 2147483647L);
               this.getMap().spawnSummon(s, Integer.MAX_VALUE);
               this.addSummon(s);
               break;
            }
         }
      }
   }

   public void checkEquippedMasterLabel() {
      Iterator<Item> iter = this.getInventory(MapleInventoryType.EQUIPPED).iterator();
      int count = 0;

      while (iter.hasNext()) {
         Equip item = (Equip) iter.next();
         if (item != null && item.getCsGrade() == 3 && item.isSpecialRoyal()) {
            count++;
         }
      }

      if (DBConfig.isGanglim) {
         for (int i = 80004000; i <= 80004002; i++) {
            this.temporaryStatResetBySkillID(i);
         }
      }

      if (count >= 3) {
         this.giveMasterLabelSetBuff(count);
      }
   }

   public void checkStrangeCore() {
      boolean check = false;
      List<VCore> list = this.getVCoreSkillsNoLock().stream().filter(a -> a.getState() == 2)
            .collect(Collectors.toList());

      for (VCore core : list) {
         int position = core.getPosition();
         if (list.stream().filter(a -> a.getPosition() == position).count() > 1L) {
            check = true;
            break;
         }
      }

      if (check) {
         for (VCore corex : this.getVCoreSkillsNoLock()) {
            if (corex.getState() == 2) {
               corex.setState(1);
            }

            corex.setPosition(-1);
         }

         this.setSaveFlag(this.getSaveFlag() | CharacterSaveFlag.V_MATRIX.getFlag());
      }
   }

   public void checkPitchBlackBuff() {
      for (int i = 80003185; i <= 80003188; i++) {
         this.temporaryStatResetBySkillID(i);
      }

      AtomicInteger ai = new AtomicInteger(0);
      this.getInventory(MapleInventoryType.EQUIPPED).list().stream().collect(Collectors.toList()).forEach(i -> {
         for (int id : this.equipList) {
            if (i.getItemId() == id) {
               ai.addAndGet(1);
               break;
            }
         }
      });
      int skillID = 0;
      int attack = 0;
      int allStat = 0;
      switch (ai.get()) {
         case 3:
         case 4:
            skillID = 80003185;
            attack = 200;
            allStat = 150;
            break;
         case 5:
         case 6:
            skillID = 80003186;
            attack = 250;
            allStat = 200;
            break;
         case 7:
         case 8:
            skillID = 80003187;
            attack = 300;
            allStat = 250;
            break;
         case 9:
         case 10:
            skillID = 80003188;
            attack = 400;
            allStat = 350;
      }

      if (skillID > 0) {
         Map<SecondaryStatFlag, Integer> statList = new HashMap<>();
         statList.put(SecondaryStatFlag.indiePAD, attack);
         statList.put(SecondaryStatFlag.indieMAD, attack);
         statList.put(SecondaryStatFlag.indieSTR, allStat);
         statList.put(SecondaryStatFlag.indieDEX, allStat);
         statList.put(SecondaryStatFlag.indieINT, allStat);
         statList.put(SecondaryStatFlag.indieLUK, allStat);
         this.temporaryStatSet(skillID, 1, Integer.MAX_VALUE, statList);
      }
   }

   public void giveMasterLabelSetBuff(int count) {
      int statR = 0;
      int atk = 0;
      int pmdr = 0;
      Map<SecondaryStatFlag, Integer> statList = new HashMap<>();
      if (DBConfig.isGanglim) {
         if (count >= 3 && count < 4) {
            statR = 5;
            atk = 40;
         } else if (count >= 4 && count < 5) {
            statR = 10;
            atk = 55;
            pmdr = 10;
         } else if (count >= 5) {
            statR = 20;
            atk = 90;
            pmdr = 15;
            count = 5;
         }

         statList.put(SecondaryStatFlag.indieStatR, statR);
         statList.put(SecondaryStatFlag.indiePAD, atk);
         statList.put(SecondaryStatFlag.indieMAD, atk);
         if (pmdr > 0) {
            statList.put(SecondaryStatFlag.indiePMDR, pmdr);
         }

         for (int i = 80004000; i <= 80004002; i++) {
            this.temporaryStatResetBySkillID(i);
         }

         int skillID = 80004000;
         if (count == 4) {
            skillID = 80004001;
         } else if (count >= 5) {
            skillID = 80004002;
         }

         this.temporaryStatSet(skillID, 1, Integer.MAX_VALUE, statList);
      } else {
         int skillID = 80003179;
         if (count == 3) {
            statR = 5;
            atk = 30;
         } else if (count == 4) {
            statR = 10;
            atk = 50;
            pmdr = 10;
            skillID = 80003180;
         } else if (count >= 5) {
            statR = 20;
            atk = 80;
            pmdr = 15;
            int var8 = 5;
            skillID = 80003181;
         }

         statList.put(SecondaryStatFlag.indieStatR, statR);
         statList.put(SecondaryStatFlag.indiePAD, atk);
         statList.put(SecondaryStatFlag.indieMAD, atk);
         if (pmdr > 0) {
            statList.put(SecondaryStatFlag.indiePMDR, pmdr);
         }

         for (int i = 80003179; i <= 80003181; i++) {
            this.temporaryStatResetBySkillID(i);
         }

         this.temporaryStatSet(skillID, 1, Integer.MAX_VALUE, statList);
      }
   }

   public void checkDonatorMedalBuff(int itemID) {
      int expBoost = 0;
      int atkBoost = 0;
      boolean find = false;

      for (int i = -12; i >= -21; i--) {
         Equip equip = (Equip) this.getInventory(MapleInventoryType.EQUIPPED).getItem((short) i);
         if (equip != null && equip.getItemId() == itemID) {
            find = true;
         }
      }

      if (find) {
         switch (itemID) {
            case 1142172:
               atkBoost = 10;
               expBoost = 20;
               break;
            case 1142249:
            case 1142635:
               atkBoost = 15;
               expBoost = 30;
               break;
            case 1142345:
               atkBoost = 25;
               expBoost = 50;
               break;
            case 1142392:
               atkBoost = 30;
               expBoost = 60;
               break;
            case 1142393:
               atkBoost = 20;
               expBoost = 40;
               break;
            case 1143020:
               atkBoost = 40;
               expBoost = 70;
         }
      }

      if (atkBoost > 0 && expBoost > 0) {
         this.donatorBonusExpBoost = expBoost;
         Map<SecondaryStatFlag, Integer> statList = new HashMap<>();
         statList.put(SecondaryStatFlag.indiePadR, atkBoost);
         statList.put(SecondaryStatFlag.indieMadR, atkBoost);
         if (expBoost > 0) {
            this.dropMessage(5,
                  "훈장 착용 효과로 인하여 경험치 " + this.donatorBonusExpBoost + "%와 공/마 " + atkBoost + "% 증가 버프가 적용됩니다.");
         }

         this.temporaryStatSet(72000047, 1, Integer.MAX_VALUE, statList);
      }
   }

   public int getDeathCount() {
      return this.deathCount;
   }

   public void setDeathCountJinMulti(int deathCount) {
      this.deathCount = deathCount;
      this.deathCount();
   }

   public void setDeathCount(int deathCount) {
      this.deathCount = deathCount;
      this.deathCount();
      if (!DBConfig.isGanglim && this.isMultiMode()) {
         boolean multiOut = deathCount <= 0;

         for (MapleCharacter partyMember : this.getPartyMembers()) {
            if (partyMember.getId() != this.getId()) {
               if (multiOut) {
                  partyMember.setDeathCountJinMulti(0);
                  partyMember.setMusicReceive("");
                  partyMember.setTransferWhiteFadeOut(false);
                  partyMember.setTransferFieldOverlap(false);
                  partyMember.setRegisterTransferFieldTime(System.currentTimeMillis() + 1000L);
                  partyMember.setRegisterTransferField(ServerConstants.TownMap);
                  partyMember.dropMessage(5, "공유된 데스 카운트가 0이 되어 마을로 이동됩니다.");
               } else {
                  partyMember.setDeathCountJinMulti(deathCount);
               }
            }
         }

         if (multiOut) {
            this.setMusicReceive("");
            this.setTransferWhiteFadeOut(false);
            this.setTransferFieldOverlap(false);
            this.setRegisterTransferFieldTime(System.currentTimeMillis() + 1000L);
            this.setRegisterTransferField(ServerConstants.TownMap);
            this.dropMessage(5, "공유된 데스 카운트가 0이 되어 마을로 이동됩니다.");
            if (this.getEventInstance() != null && this.getEventInstance().hasEventTimer()) {
               this.getEventInstance().stopEventTimer();
               this.getEventInstance().dispose();
            }
         }
      }
   }

   public void deathCount() {
      if ((this.getMapId() < 450013000 || this.getMapId() > 450013700) && this.getMapId() != ServerConstants.TownMap) {
         if (this.getMapId() != 450010400 && this.getMapId() != 450010500) {
            this.send(CField.getDeathCount(this, this.deathCount));
         }
      }
   }

   public void setBossMode(int bossMode) {
      this.bossMode = bossMode;
      this.bossMode();
   }

   public int getBossMode() {
      return this.bossMode;
   }

   public void bossMode() {
      this.send(CField.setBossMode(this.getBossMode()));
   }

   public void setAutoRespawn(int waitTime, int respawnTime) {
      this.send(CField.setAutoRespawn(waitTime, respawnTime));
   }

   public long getLastBroadcastingChat() {
      return this.lastBroadcastingChat;
   }

   public void setLastBroadcastingChat(long lastBroadcastingChat) {
      this.lastBroadcastingChat = lastBroadcastingChat;
   }

   public int getDonatorBonusExpBoost() {
      return this.donatorBonusExpBoost;
   }

   public void setDonatorBonusExpBoost(int donatorBonusExpBoost) {
      this.donatorBonusExpBoost = donatorBonusExpBoost;
   }

   public MapleDailyGiftInfo getDailyGift() {
      return this.dailyGift;
   }

   public int getJuhunEquipPosition() {
      return this.juhunEquipPosition;
   }

   public void setJuhunEquipPosition(int juhunEquipPosition) {
      this.juhunEquipPosition = juhunEquipPosition;
   }

   public int getSymbolSrc() {
      return this.symbolSrc;
   }

   public void setSymbolSrc(int symbolSrc) {
      this.symbolSrc = symbolSrc;
   }

   public int getEnchantPoint() {
      return this.enchantPoint;
   }

   public void setEnchantPoint(int enchantPoint) {
      this.enchantPoint = enchantPoint;
   }

   public long getLastFairyTime() {
      return this.lastFairyTime;
   }

   public void setLastFairyTime(long lastFairyTime) {
      this.lastFairyTime = lastFairyTime;
   }

   public void registerMobQuest(int questID, MobQuest mobQuest) {
      if (this.mobQuests.containsKey(questID)) {
         this.mobQuests.get(questID).add(mobQuest);
      } else {
         List<MobQuest> list = new ArrayList<>();
         list.add(mobQuest);
         this.mobQuests.put(questID, list);
      }

      this.setSaveFlag(this.getSaveFlag() | CharacterSaveFlag.MOB_QUEST.getFlag());
   }

   public void removeMobQuest(int questID) {
      this.mobQuests.remove(questID);
      this.setSaveFlag(this.getSaveFlag() | CharacterSaveFlag.MOB_QUEST.getFlag());
   }

   public List<MobQuest> getMobQuest(int questID) {
      return this.mobQuests.get(questID);
   }

   public int getMobCount(int questID, int mobID) {
      if (this.mobQuests.isEmpty()) {
         return 0;
      } else {
         if (this.mobQuests.containsKey(questID)) {
            for (MobQuest quest : this.mobQuests.get(questID)) {
               if (quest.getQuestID() == questID) {
                  return quest.getMobCount();
               }
            }
         }

         return 0;
      }
   }

   public List<Integer> getMobQuestID(int mobID) {
      List<Integer> ret = new ArrayList<>();
      if (this.mobQuests.isEmpty()) {
         return ret;
      } else {
         for (List<MobQuest> mq : this.mobQuests.values()) {
            for (MobQuest q : mq) {
               if (q.getMobID() == mobID) {
                  ret.add(q.getQuestID());
               }
            }
         }

         return ret;
      }
   }

   public boolean canCompleteWeeklyQuest(int questID) {
      AtomicBoolean canComplete = new AtomicBoolean(true);
      this.getWeeklyQuest().stream().filter(q -> q.getQuestID() == questID).forEach(q -> {
         if (q.getType() == 0) {
            q.setQuantity(this.getItemQuantity(q.getNeedID(), false));
         }

         if (q.getNeedQuantity() > q.getQuantity()) {
            canComplete.set(false);
         }
      });
      return canComplete.get();
   }

   public final String getMobName(int mobID) {
      MapleMonster mob = MapleLifeFactory.getMonster(mobID);
      return mob != null ? mob.getStats().getName() : "";
   }

   public String displayWeeklyQuestStatus(int questID) {
      StringBuilder msg = new StringBuilder();
      this.getWeeklyQuest().stream().filter(q -> q.getQuestID() == questID).forEach(q -> {
         msg.append("#e[" + this.questType[q.getType()] + "]#n #b");
         if (q.getType() == 0) {
            q.setQuantity(this.getItemQuantity(q.getNeedID(), false));
            this.setSaveFlag(this.getSaveFlag() | CharacterSaveFlag.WEEKLY_QUEST.getFlag());
         }

         if (q.getType() == 0) {
            msg.append("#z" + q.getNeedID() + "# ");
         } else {
            msg.append(this.getMobName(q.getNeedID())).append(" ");
         }

         msg.append(q.getNeedQuantity());
         msg.append(this.questType2[q.getType()]);
         msg.append("#k ");
         msg.append(this.questType[q.getType()]);
         msg.append(" 하기 #e(");
         msg.append(q.getNeedQuantity());
         msg.append(" / ");
         msg.append(q.getQuantity());
         msg.append(")#n \r\n");
      });
      return msg.toString();
   }

   public void setWeeklyQuestCount(int type, int needID) {
      this.getWeeklyQuest()
            .stream()
            .collect(Collectors.toList())
            .forEach(
                  q -> {
                     if (q.getNeedID() == needID && (q.getQuantity() + 1 <= q.getNeedQuantity() || q.getType() == 0)) {
                        if (q.getType() == 0) {
                           q.setQuantity(this.getItemQuantity(q.getNeedID(), false));
                        } else {
                           q.setQuantity(Math.min(q.getNeedQuantity(), q.getQuantity() + 1));
                        }

                        String name = "";
                        if (type == 0) {
                           name = MapleItemInformationProvider.getInstance().getName(needID);
                        } else {
                           MapleMonster mob = MapleLifeFactory.getMonster(needID);
                           if (mob != null) {
                              name = mob.getStats().getName();
                           }
                        }

                        this.send(CField.UIPacket.progressMessageFont(
                              name + " (" + q.getQuantity() + " / " + q.getNeedQuantity() + ")", false));
                        if (this.canCompleteWeeklyQuest(q.getQuestID())) {
                           this.send(CField.addPopupSay(9062000, 3000,
                                 "#b[" + WeeklyQuest.QuestName.getQuestName(q.getQuestID()) + "]#k 퀘스트를 클리어 할 수 있습니다.",
                                 ""));
                        } else if (q.getQuantity() >= q.getNeedQuantity()) {
                           this.send(
                                 CField.addPopupSay(
                                       9062000,
                                       15000,
                                       "#b[" + WeeklyQuest.QuestName.getQuestName(q.getQuestID()) + "]#k \r\n\r\n"
                                             + this.displayWeeklyQuestStatus(q.getQuestID()),
                                       ""));
                        }

                        this.setSaveFlag(this.getSaveFlag() | CharacterSaveFlag.WEEKLY_QUEST.getFlag());
                     }
                  });
   }

   public void setMobCount(MapleMonster mob, int delta) {
      this.getMobQuestID(mob.getId())
            .forEach(
                  m -> {
                     List<MobQuest> mobQuest = this.getMobQuest(m);
                     if (mobQuest != null) {
                        for (MobQuest q : mobQuest) {
                           if (q.getMobID() == mob.getId() && q.getMobCount() < q.getNeedCount()) {
                              q.setMobCount(q.getMobCount() + 1);
                              String mobName = mob.getStats().getName();
                              this.send(CField.UIPacket.progressMessageFont(
                                    mobName + " (" + q.getMobCount() + " / " + q.getNeedCount() + ")", false));
                              if (this.canCompleteMobQuest(q.getQuestID())) {
                                 this.send(
                                       CField.addPopupSay(
                                             9062000,
                                             3000,
                                             "#b[" + MobQuest.QuestName.getQuestName(q.getQuestID())
                                                   + "]#k 퀘스트를 클리어 할 수 있습니다.\r\n#e컨텐츠 시스템 > 익스트림 퀘스트#n를 통해 클리어해주시기 바랍니다.",
                                             ""));
                              }
                           }
                        }
                     }
                  });
      this.setSaveFlag(this.getSaveFlag() | CharacterSaveFlag.MOB_QUEST.getFlag());
   }

   public Map<Integer, List<MobQuest>> getMobQuests() {
      return this.mobQuests;
   }

   public boolean canCompleteMobQuest(int questID) {
      boolean check = true;
      if (this.getMobQuest(questID) == null) {
         return false;
      } else {
         for (MobQuest mobQuest : this.getMobQuest(questID)) {
            if (mobQuest.getNeedCount() > mobQuest.getMobCount()) {
               check = false;
            }
         }

         return check;
      }
   }

   public void checkAfterInGame() {
      if (this.getJob() >= 1000 && this.getJob() < 2000 && this.getSkillLevel(10001254) == 0) {
         this.changeSkillLevel(10001254, 1, 1);
      }

      if (this.getJob() >= 3500 && this.getJob() <= 3512 && this.getSkillLevel(30001068) == 0) {
         this.changeSkillLevel(30001068, 1, 1);
      }
   }

   public DamageSkinSaveInfo getDamageSkinSaveInfo() {
      return this.damageSkinSaveData;
   }

   public void setDamageSkinSaveInfo(DamageSkinSaveInfo info) {
      this.damageSkinSaveData = info;
   }

   public int getScrollFeverProbInc() {
      return this.scrollFeverProbInc;
   }

   public void setScrollFeverProbInc(int scrollFeverProbInc) {
      this.scrollFeverProbInc = scrollFeverProbInc;
   }

   public int getHuFailedStreak() {
      return this.huFailedStreak;
   }

   public void setHuFailedStreak(int huFailedStreak) {
      this.huFailedStreak = huFailedStreak;
   }

   public long getHuLastFailedUniqueID() {
      return this.huLastFailedUniqueID;
   }

   public void setHuLastFailedUniqueID(long huLastFailedUniqueID) {
      this.huLastFailedUniqueID = huLastFailedUniqueID;
   }

   public List<Integer> getQuickSlotKeyMapped() {
      return this.quickSlotKeyMapped;
   }

   public void setQuickSlotKeyMapped(List<Integer> quickSlotKeyMapped) {
      this.quickSlotKeyMapped = quickSlotKeyMapped;
      this.setSaveFlag(this.getSaveFlag() | CharacterSaveFlag.QUICK_SLOT_KEY_MAPPED.getFlag());
   }

   public void doFinalAttack(int skillID, List<Integer> targets) {
      Skill skill = SkillFactory.getSkill(skillID);
      if (skill != null) {
         int finalAttackSkillID = skill.getFinalAttackId();
         List<Integer> activeWeaponType = skill.getFinalAttack();
         Item item = this.getInventory(MapleInventoryType.EQUIPPED).getItem((short) -11);
         if (item != null) {
            int idx = item.getItemId() / 10000 % 100;
            if (GameConstants.isZero(this.getJob()) && this.getZeroInfo().isBeta()) {
               idx = 56;
            }

            int weaponIdx = idx;
            long count = activeWeaponType.stream().filter(t -> t == weaponIdx).count();
            if (count > 0L || GameConstants.isZero(this.getJob())) {
               byte skillLevel = 0;
               if (this.getJob() == 212) {
                  if (this.getSkillLevel(2121007) > 0) {
                     skillLevel = (byte) this.getSkillLevel(2121007);
                     finalAttackSkillID = 2120013;
                  }
               } else if (this.getJob() == 222) {
                  if (this.getSkillLevel(2221007) > 0) {
                     skillLevel = (byte) this.getSkillLevel(2221007);
                     finalAttackSkillID = 2220014;
                  }
               } else if (this.getJob() == 2112) {
                  if (this.getSkillLevel(21120012) > 0) {
                     skillLevel = (byte) this.getSkillLevel(21120012);
                     finalAttackSkillID = 21120012;
                  }
               } else if (this.getJob() == 312) {
                  if (this.getSkillLevel(3120008) > 0) {
                     skillLevel = (byte) this.getSkillLevel(3120008);
                     finalAttackSkillID = 3120008;
                  }
               } else if (this.getJob() == 3212) {
                  if (this.getSkillLevel(3120008) > 0) {
                     skillLevel = (byte) this.getSkillLevel(32121004);
                     finalAttackSkillID = 32121011;
                  }
               } else if (this.getJob() == 3312 && this.getSkillLevel(33120011) > 0) {
                  skillLevel = (byte) this.getSkillLevel(33120011);
                  finalAttackSkillID = 33120011;
               }

               if (finalAttackSkillID > 0) {
                  if (skillID == 1001005 && this.getSkillLevel(finalAttackSkillID) <= 0) {
                     if (this.getSkillLevel(1200002) > 0) {
                        finalAttackSkillID = 1200002;
                     } else if (this.getSkillLevel(1300002) > 0) {
                        finalAttackSkillID = 1300002;
                     }
                  }

                  if (finalAttackSkillID == 1100002) {
                     if (this.getSkillLevel(1120013) > 0) {
                        finalAttackSkillID = 1120013;
                     }
                  } else if (finalAttackSkillID == 51100002 && this.getSkillLevel(51120002) > 0) {
                     finalAttackSkillID = 51120002;
                  }

                  if (skillLevel == 0) {
                     skillLevel = (byte) this.getSkillLevel(finalAttackSkillID);
                  }

                  if (skillLevel > 0) {
                     Skill s = SkillFactory.getSkill(finalAttackSkillID);
                     if (s != null) {
                        SecondaryStatEffect eff = s.getEffect(skillLevel);
                        if (eff != null) {
                           byte prop = (byte) eff.getProb();
                           Integer value = null;
                           if ((value = this.getBuffedValue(SecondaryStatFlag.FinalAttackProp)) != null) {
                              prop = (byte) Math.min(100, prop + value);
                           }

                           this.doActiveFinalAttack(finalAttackSkillID, prop, skillID, weaponIdx, targets);
                        }
                     }
                  }
               }
            }

            if (this.getBuffedValue(SecondaryStatFlag.DualBladeFinal) != null) {
               this.send(CField.finalAttackRequest(true, 4341054, skillID, weaponIdx, targets));
            }
         }
      }
   }

   public void doActiveFinalAttack(int finalAttackSkillID, int prop, int skillID, int weaponIdx,
         List<Integer> targets) {
      if ((finalAttackSkillID == 1100002 || finalAttackSkillID == 1120013) && this.getSkillLevel(1120048) > 0) {
         prop = (byte) (prop + 15);
      }

      if (Randomizer.isSuccess(prop)) {
         this.send(CField.finalAttackRequest(true, finalAttackSkillID, skillID, weaponIdx, targets));
      } else {
         this.send(CField.finalAttackRequest(true, 0, skillID, 0, targets));
      }
   }

   public void checkClear() {
      List<Pair<Item, MapleInventoryType>> listing = new ArrayList<>();

      for (MapleInventory iv : this.getInventorys()) {
         if (iv.getType() == MapleInventoryType.EQUIP || iv.getType() == MapleInventoryType.EQUIPPED) {
            for (Item item : new LinkedList<>(iv.list())) {
               listing.add(new Pair<>(item, iv.getType()));
            }
         }
      }

      listing.forEach(p -> {
         Equip equip = (Equip) p.left;
         this.checkClear_(equip);
      });
   }

   public void checkClear_(Equip equip) {
      switch (equip.getItemId()) {
         case 1003797:
         case 1003798:
         case 1003799:
         case 1003800:
         case 1003801:
         case 1042254:
         case 1042255:
         case 1042256:
         case 1042257:
         case 1042258:
         case 1062166:
         case 1062167:
         case 1062168:
         case 1062169:
         case 1212063:
         case 1222058:
         case 1232057:
         case 1242060:
         case 1242061:
         case 1262016:
         case 1272015:
         case 1282015:
         case 1302275:
         case 1312153:
         case 1322203:
         case 1332225:
         case 1342082:
         case 1362090:
         case 1372177:
         case 1382208:
         case 1402196:
         case 1412135:
         case 1422140:
         case 1432167:
         case 1442223:
         case 1452205:
         case 1462193:
         case 1472214:
         case 1482168:
         case 1492179:
         case 1522094:
         case 1532098:
         case 1582016:
         case 1592018:
            if (equip.getClearCheck() == 1) {
               int chuc = equip.getCHUC();
               int flag = equip.getItemState();
               String enchant = equip.getOwner();
               boolean amazing = false;
               MapleItemInformationProvider ii = MapleItemInformationProvider.getInstance();
               if ((flag & ItemStateFlag.AMAZING_HYPER_UPGRADE_CHECKED.getValue()) == 0) {
                  Equip copy = (Equip) equip.copy();
                  copy.setCHUC(0);
                  Equip origin = (Equip) ii.getEquipById(equip.getItemId());
                  if (copy.getWatk() > origin.getWatk()) {
                     amazing = true;
                  }
               }

               Equip zeroEquip = null;
               if (GameConstants.isZero(this.getJob())) {
                  zeroEquip = (Equip) this.getInventory(MapleInventoryType.EQUIPPED)
                        .getItem((short) (equip.getPosition() == -11 ? -10 : -11));
               }

               EquipEnchantScroll.innocent(equip, InnocentFlag.NONE.getType() | InnocentFlag.BONUS_STAT.getType(), true,
                     zeroEquip);
               if (amazing) {
                  equip.setCHUC(0);

                  for (int i = 0; i < chuc; i++) {
                     boolean isWeapon = GameConstants.isWeapon(equip.getItemId());
                     int stat = 0;
                     int atk = 0;
                     switch (equip.getCHUC()) {
                        case 0:
                           stat = 19;
                           atk = isWeapon ? 6 : 0;
                           break;
                        case 1:
                           stat = 21;
                           atk = isWeapon ? 6 : 0;
                           break;
                        case 2:
                           stat = 23;
                           atk = isWeapon ? 7 : 0;
                           break;
                        case 3:
                           stat = 25;
                           atk = isWeapon ? 7 : 0;
                           break;
                        case 4:
                           stat = 27;
                           atk = isWeapon ? 8 : 0;
                           break;
                        case 5:
                           atk = isWeapon ? 11 : 8;
                           break;
                        case 6:
                           atk = isWeapon ? 15 : 9;
                           break;
                        case 7:
                           atk = isWeapon ? 17 : 10;
                           break;
                        case 8:
                           atk = isWeapon ? 18 : 11;
                           break;
                        case 9:
                           atk = isWeapon ? 19 : 12;
                           break;
                        case 10:
                           atk = isWeapon ? 22 : 13;
                           break;
                        case 11:
                           atk = isWeapon ? 23 : 14;
                           break;
                        case 12:
                           atk = isWeapon ? 25 : 15;
                           break;
                        case 13:
                           atk = isWeapon ? 26 : 16;
                           break;
                        default:
                           atk = isWeapon ? 27 : 17;
                     }

                     equip.setStr((short) (equip.getStr() + stat));
                     equip.setDex((short) (equip.getDex() + stat));
                     equip.setInt((short) (equip.getInt() + stat));
                     equip.setLuk((short) (equip.getLuk() + stat));
                     equip.setWatk((short) (equip.getWatk() + atk));
                     equip.setMatk((short) (equip.getMatk() + atk));
                     equip.setCHUC((byte) (equip.getCHUC() + 1));
                  }
               }

               if (enchant.contains("성")) {
                  String a = enchant.split("성")[0];
                  int lv = Integer.parseInt(a);
                  int[] allStats = new int[] { 5, 5, 10, 10, 20, 20, 30, 50, 75, 100 };
                  int[] attacks = new int[] { 0, 0, 5, 5, 10, 10, 15, 25, 35, 50 };

                  for (int i = 0; i < lv; i++) {
                     equip.setStr((short) (equip.getStr() + allStats[i]));
                     equip.setDex((short) (equip.getDex() + allStats[i]));
                     equip.setInt((short) (equip.getInt() + allStats[i]));
                     equip.setLuk((short) (equip.getLuk() + allStats[i]));
                     equip.setWatk((short) (equip.getWatk() + attacks[i]));
                     equip.setMatk((short) (equip.getMatk() + attacks[i]));
                     equip.setOwner(lv + "성");
                  }
               }

               if (!amazing && chuc > 0) {
                  equip.setItemState(ItemStateFlag.AMAZING_HYPER_UPGRADE_CHECKED.getValue());
               }

               this.send(CWvsContext.InventoryPacket.scrolledItem(equip, equip, false, false, equip.getPosition() < 0));
               this.dropMessage(
                     5,
                     "["
                           + ii.getName(equip.getItemId())
                           + "] 아이템이 2019년 9월 25일 점검 시점 이전 아이템 옵션 초기화 대상 아이템으로 놀라운 장비 강화 주문서, 스타포스, 인챈트, 잠재능력, 추가옵션을 제외한 옵션이 초기화되었습니다.");
            }
         default:
            equip.setClearCheck(0);
      }
   }

   public List<CharacterPotentialHolder> getLastMiracleCirculator() {
      return this.lastMiracleCirculator;
   }

   public void setLastMiracleCirculator(List<CharacterPotentialHolder> lastMiracleCirculator) {
      this.lastMiracleCirculator = lastMiracleCirculator;
   }

   public MapleUnion getMapleUnion() {
      if (this.currentUnion == null && this.accountTotalLevel >= 500) {
         this.currentUnion = new MapleUnion();
      }

      return this.currentUnion;
   }

   public MapleUnion getMapleUnion(int preset) {
      return this.unionPreset[preset];
   }

   public void setCurrentUnion(MapleUnion union) {
      this.currentUnion = union;
   }

   public MapleUnion[] getMapleUnionPreset() {
      return this.unionPreset;
   }

   public boolean canCreateMapleUnion() {
      int totalLevel = 0;
      int characterCount = 0;
      if (this.isGM()) {
         return true;
      } else {
         DBConnection db = new DBConnection();

         try (Connection con = DBConnection.getConnection()) {
            PreparedStatement ps = con.prepareStatement("SELECT level, job FROM characters WHERE accountid = ?");
            ps.setInt(1, this.getAccountID());
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
               int level = rs.getInt("level");
               if (level >= 60 || MapleUnionData.getPointsByJobLevel(rs.getInt("job"), level).size() > 0) {
                  totalLevel += level;
                  characterCount++;
               }
            }

            rs.close();
            ps.close();
         } catch (SQLException var10) {
            System.out.println(var10.toString());
         }

         return totalLevel >= 500 && characterCount >= 3;
      }
   }

   public void checkJoinNewbieGuild() {
      int newbieGuildID = 10000;
      int totalLevel = 0;
      DBConnection db = new DBConnection();

      try (Connection con = DBConnection.getConnection()) {
         PreparedStatement ps = con.prepareStatement("SELECT level, job FROM characters WHERE accountid = ?");
         ps.setInt(1, this.getAccountID());
         ResultSet rs = ps.executeQuery();

         while (rs.next()) {
            int level = rs.getInt("level");
            totalLevel += level;
         }

         rs.close();
         ps.close();
      } catch (SQLException var10) {
         System.out.println(var10.toString());
      }

      this.accountTotalLevel = totalLevel;
      if (!DBConfig.isGanglim) {
         if (totalLevel < 500 && this.getLevel() < 220 && this.getOneInfoQuestInteger(1234677, "join_newbie") <= 0
               && this.getGuild() == null) {
            this.setGuildId(newbieGuildID);
            this.setGuildRank((byte) 5);
            Center.Guild.addGuildMember(this.mgc);
            this.send(CWvsContext.GuildPacket.showGuildInfo(this));
            this.saveGuildStatus();
            this.getMap().broadcastMessage(CField.loadGuildData(this));
            this.send(
                  CField.addPopupSay(
                        9062000,
                        10000,
                        "#e#b[초보자B]#k#n 길드에 자동으로 가입되었습니다.\r\n계정 내 #r통합레벨이 500#k을 넘으면 계정 내 모든 캐릭터가 길드에서 자동으로 탈퇴되며,\r\n#r캐릭터 레벨이 220#k을 넘으면 해당 캐릭터는 자동으로 탈퇴됩니다.\r\n\r\n#b강림#k에서 행복한 하루 되세요.",
                        ""));
            this.updateOneInfo(1234677, "join_newbie", "1");
         }
      }
   }

   public void checkLevelBuff() {
      if (!DBConfig.isGanglim) {
         for (int i = 777799; i <= 777805; i++) {
            this.temporaryStatResetBySkillID(i);
         }

         Map<SecondaryStatFlag, Integer> statList = new HashMap<>();
         if (this.getLevel() >= 280 && this.getLevel() < 290) {
            statList.put(SecondaryStatFlag.indieSTR, 150);
            statList.put(SecondaryStatFlag.indieDEX, 150);
            statList.put(SecondaryStatFlag.indieINT, 150);
            statList.put(SecondaryStatFlag.indieLUK, 150);
            statList.put(SecondaryStatFlag.indiePAD, 100);
            statList.put(SecondaryStatFlag.indieMAD, 100);
            this.temporaryStatSet(80003182, 1, Integer.MAX_VALUE, statList);
         } else if (this.getLevel() >= 290 && this.getLevel() < 300) {
            statList.put(SecondaryStatFlag.indieSTR, 200);
            statList.put(SecondaryStatFlag.indieDEX, 200);
            statList.put(SecondaryStatFlag.indieINT, 200);
            statList.put(SecondaryStatFlag.indieLUK, 200);
            statList.put(SecondaryStatFlag.indiePAD, 150);
            statList.put(SecondaryStatFlag.indieMAD, 150);
            statList.put(SecondaryStatFlag.indieBDR, 5);
            this.temporaryStatSet(80003183, 1, Integer.MAX_VALUE, statList);
         } else if (this.getLevel() >= 300) {
            statList.put(SecondaryStatFlag.indieSTR, 400);
            statList.put(SecondaryStatFlag.indieDEX, 400);
            statList.put(SecondaryStatFlag.indieINT, 400);
            statList.put(SecondaryStatFlag.indieLUK, 400);
            statList.put(SecondaryStatFlag.indiePAD, 250);
            statList.put(SecondaryStatFlag.indieMAD, 250);
            statList.put(SecondaryStatFlag.indieBDR, 10);
            this.temporaryStatSet(80003184, 1, Integer.MAX_VALUE, statList);
         }
      }
   }

   public void checkExtraAbility() {
      for (int i = 0; i < (DBConfig.isGanglim ? 18 : 9); i++) {
         this.temporaryStatResetBySkillID(787878 + i);
      }

      int index = 0;

      for (ExtraAbilityStatEntry entry : this.getExtraAbilityStats()[this.getExtraAbilitySlot()]) {
         if (entry.getOption() != ExtraAbilityOption.ReduceCooltime && entry.getOption().getFlag() != null) {
            for (SecondaryStatFlag flag : entry.getOption().getFlag()) {
               if (flag != SecondaryStatFlag.indieDamReduceR) {
                  this.temporaryStatSet(787878 + index++, Integer.MAX_VALUE, flag, entry.getValue());
               }
            }
         }
      }

      if (DBConfig.isGanglim) {
         this.getMap().calcIncMobGen(this, false);
      }
   }

   public void checkSkills() {
      Map<Skill, SkillEntry> skills = this.getSkills();
      List<Integer> availableJobs = this.getAvailableJobs();
      List<Pair<Integer, Integer>> removeSkills = new ArrayList<>();
      List<Skill> resetSkills = new ArrayList<>();

      for (Pair<Integer, Integer> stolenSkill : this.stolenSkills) {
         Skill sk = SkillFactory.getSkill(stolenSkill.left);
         if (sk == null || sk.isInvisible()) {
            removeSkills.add(stolenSkill);
         }
      }

      for (Pair<Integer, Integer> removeSkill : removeSkills) {
         this.stolenSkills.remove(removeSkill);
      }

      for (Entry<Skill, SkillEntry> skill : skills.entrySet()) {
         int skId = skill.getKey().getId() / 10000;
         if ((skId >= 100 && skId < 7000 || skId >= 10000 && skId < 17000) && !availableJobs.contains(skId)) {
            boolean stolen = false;

            for (Pair<Integer, Integer> stolenSkillx : this.stolenSkills) {
               if (stolenSkillx.getLeft() == skill.getKey().getId()) {
                  stolen = true;
                  break;
               }
            }

            if (!stolen) {
               resetSkills.add(skill.getKey());
            }
         }
      }

      resetSkills.forEach(r -> this.changeSkillLevel(r, 0, 0));
   }

   public List<Integer> getAvailableJobs() {
      List<Integer> availableJobs = new ArrayList<>();
      int div = this.getJob() < 1000 ? 100 : 1000;
      int job = this.getJob();
      if (GameConstants.isKain(job)) {
         div = 6003;
      } else if (GameConstants.isKadena(job)) {
         div = 6002;
      } else if (GameConstants.isAngelicBuster(job)) {
         div = 6001;
      } else if (GameConstants.isEvan(job)) {
         div = 2001;
      } else if (GameConstants.isMercedes(job)) {
         div = 2002;
      } else if (GameConstants.isDemonSlayer(job) || GameConstants.isDemonAvenger(job)) {
         div = 3001;
      } else if (GameConstants.isPhantom(job)) {
         div = 2003;
      } else if (GameConstants.isLuminous(job)) {
         div = 2004;
      } else if (GameConstants.isXenon(job)) {
         div = 3002;
      } else if (GameConstants.isEunWol(job)) {
         div = 2005;
      } else if (GameConstants.isIllium(job)) {
         div = 15000;
      } else if (GameConstants.isArk(job)) {
         div = 15001;
      } else if (GameConstants.isAdele(job)) {
         div = 15002;
      } else if (GameConstants.isKhali(job)) {
         div = 15003;
         availableJobs.add(15400);
         availableJobs.add(15410);
         availableJobs.add(15411);
         availableJobs.add(15412);
      } else if (GameConstants.isHoyoung(job)) {
         div = 16000;
      } else if (GameConstants.isLara(job)) {
         div = 16001;
      } else if (GameConstants.isCannon(job)) {
         div = 501;
      } else if (GameConstants.isPathFinder(job)) {
         div = 301;
      }

      if (GameConstants.isDemonAvenger(job)) {
         availableJobs.add(3101);
      }

      availableJobs.add(job / div * div);
      int max = 0;
      if (job % 10 != 0 && job % 100 >= 10) {
         max = job % 10 + 2;
      } else if (job % 100 >= 10) {
         max = 1;
      }

      if (job < 1000) {
         availableJobs.add(0);
      }

      for (int i = 0; i < max; i++) {
         int jobId = i == 0 ? job - job % 100 : (i == 1 ? job - job % 10 : job - job % 10 + (i - 1));
         if (!availableJobs.contains(jobId)) {
            availableJobs.add(jobId);
         }
      }

      return availableJobs;
   }

   public int getTotalArcane() {
      int ret = 0;

      for (Item item : this.getInventory(MapleInventoryType.EQUIPPED).list()) {
         if (GameConstants.isArcaneSymbol(item.getItemId())) {
            Equip equip = (Equip) item;
            ret += equip.getArc();
         }
      }

      return ret;
   }

   public int getTotalAthentic() {
      int ret = 0;

      for (Item item : this.getInventory(MapleInventoryType.EQUIPPED).list()) {
         if (GameConstants.isAuthenticSymbol(item.getItemId())) {
            Equip equip = (Equip) item;
            ret += equip.getArc();
         }
      }

      return ret;
   }

   public void firstLoadMapleUnion() {
      this.firstLoadMapleUnion(false);
   }

   public int getTotalCHUC(int playerID, Connection con) throws SQLException {
      PreparedStatement ps = con.prepareStatement("SELECT inventoryitemid FROM inventoryitems WHERE characterid = ?");
      ps.setInt(1, playerID);
      ResultSet rs = ps.executeQuery();
      int totalCHUC = 0;

      while (rs.next()) {
         long uniqueID = rs.getLong("inventoryitemid");
         PreparedStatement ps2 = con.prepareStatement("SELECT CHUC FROM inventoryequipment WHERE inventoryitemid = ?");
         ps2.setLong(1, uniqueID);
         ResultSet rs2 = ps2.executeQuery();

         while (rs2.next()) {
            int chuc = rs2.getInt("CHUC");
            totalCHUC += chuc;
         }

         rs2.close();
         ps2.close();
      }

      rs.close();
      ps.close();
      return totalCHUC;
   }

   public void sendUnionPacket() {
      if (this.currentUnion != null) {
         this.updateOneInfo(QuestExConstants.UnionRankInfo.getQuestID(), "rank",
               String.valueOf(this.currentUnion.rank));
         PacketEncoder packet = new PacketEncoder();
         packet.writeShort(SendPacketOpcode.MAPLE_UNION_CONTEXT.getValue());
         packet.writeInt(this.currentUnion.rank);
         this.currentUnion.encodeContext(packet);
         this.vaildateMapleUnion(this.currentUnion, false);
         this.send(packet.getPacket());

         for (int i = 0; i < 5; i++) {
            MapleUnion union = this.getMapleUnion(i);
            if (union != null) {
               packet.writeShort(SendPacketOpcode.MAPLE_UNION_PRESET.getValue());
               packet.writeInt(i);
               packet.write(union.changeableGroup.size());

               for (int group : union.changeableGroup) {
                  packet.writeInt(group);
               }

               packet.writeInt(union.activeRaiders.size());

               for (MapleUnionEntry r : union.activeRaiders) {
                  r.encode(packet);
               }

               this.send(packet.getPacket());
            }
         }

         this.checkUnionMaxCoinAlert(this.currentUnion);
      }
   }

   public boolean firstLoadMapleUnion(boolean force) {
      if (this.currentUnion != null) {
         return false;
      } else {
         String v = this.getOneInfoQuest(QuestExConstants.UnionRankInfo.getQuestID(), "rank");
         if (force || v != null && !v.isEmpty()) {
            try {
               try (Connection con = DBConnection.getConnection()) {
                  List<MapleUnionEntry> raiders = new ArrayList<>();
                  PreparedStatement ps = con
                        .prepareStatement("SELECT id, name, job, level FROM characters WHERE accountid = ?");
                  ps.setInt(1, this.getAccountID());
                  ResultSet rs = ps.executeQuery();

                  while (rs.next()) {
                     int job = rs.getInt("job");
                     int level = rs.getInt("level");
                     UnionCardData cd = MapleUnionData.getUnionCardData(job);
                     if (cd != null && (GameConstants.isZero(job) ? level >= 130 : level >= 60)) {
                        MapleUnionEntry entry = new MapleUnionEntry();
                        entry.characterID = rs.getInt("id");
                        entry.job = job;
                        entry.level = level;
                        entry.name = rs.getString("name");
                        entry.starForce = this.getTotalCHUC(entry.characterID, con);
                        entry.board = -1;
                        entry.unk1 = 0;
                        entry.type = 1;
                        raiders.add(entry);
                     }
                  }

                  rs.close();
                  ps.close();

                  for (int i = 0; i < 5; i++) {
                     this.loadMapleUnionByPreset(i, con, raiders);
                  }
               }

               return true;
            } catch (SQLException var13) {
               System.err.println("메이플 유니온 캐릭터 로드를 실패하였습니다.");
               var13.printStackTrace();
               return false;
            }
         } else {
            return false;
         }
      }
   }

   public void loadMapleUnionByPreset(int preset, Connection con, List<MapleUnionEntry> raiders) throws SQLException {
      MapleUnion union = new MapleUnion();
      int currentPreset = preset;
      PreparedStatement ps = con
            .prepareStatement("SELECT rank, current_preset FROM maple_union_data WHERE account_id = ?");
      ps.setInt(1, this.getAccountID());
      ResultSet rs = ps.executeQuery();
      if (rs.next()) {
         union.rank = rs.getInt("rank");
         union.currentPreset = preset;
         currentPreset = rs.getInt("current_preset");
      } else {
         int vv = this.getOneInfoQuestInteger(QuestExConstants.UnionRankInfo.getQuestID(), "rank");
         if (vv >= 101) {
            union.rank = vv;
         } else {
            union.rank = 101;
         }

         union.currentPreset = preset;
         this.setSaveFlag(this.getSaveFlag() | CharacterSaveFlag.MAPLE_UNION_DATA.getFlag());
      }

      rs.close();
      ps.close();
      List<MapleUnionEntry> activeRaiders = new ArrayList<>();

      for (MapleUnionEntry entry : raiders) {
         MapleUnionEntry active = this.loadUnionRaiders(con, preset, entry);
         if (active != null) {
            active.starForce = entry.starForce;
            activeRaiders.add(active);
         }
      }

      union.activeRaiders = activeRaiders;
      union.raiders = raiders;
      union.name = String.valueOf(preset);
      if (preset == currentPreset) {
         this.currentUnion = union;
         this.saveUnionLevel();
      }

      this.unionPreset[preset] = union;
   }

   private void saveUnionLevel() {
      int unionLevel = this.getUnionLevel();

      try (
            Connection con = DBConnection.getConnection();
            PreparedStatement ps = con.prepareStatement("UPDATE accounts SET unionLevel = ? WHERE id = ?");) {
         ps.setInt(1, unionLevel);
         ps.setInt(2, this.getAccountID());
         ps.executeUpdate();
      } catch (SQLException var10) {
         var10.printStackTrace();
      }
   }

   public MapleUnionEntry loadUnionRaiders(Connection con, int preset, MapleUnionEntry entry) {
      MapleUnionEntry ret = null;

      try {
         PreparedStatement ps = con.prepareStatement(
               "SELECT `type`, angle, board FROM maple_union_raiders WHERE account_id = ? and preset = ? and player_id = ?");
         ps.setInt(1, this.getAccountID());
         ps.setInt(2, preset);
         ps.setInt(3, entry.characterID);
         ResultSet rs = ps.executeQuery();
         if (rs.next()) {
            ret = new MapleUnionEntry();
            ret.type = rs.getInt("type");
            ret.characterID = entry.characterID;
            ret.angle = rs.getInt("angle");
            ret.board = rs.getInt("board");
            ret.level = entry.level;
            ret.name = "";
            ret.job = entry.job;
            ret.starForce = 0;
            ret.unk1 = 0;
         }

         rs.close();
         ps.close();
      } catch (SQLException var7) {
      }

      return ret;
   }

   public void loadMapleUnionPreset(MapleUnion union, Connection con, int preset) {
      if (union != null) {
         try {
            PreparedStatement ps = con.prepareStatement(
                  "SELECT preset, changeable_group FROM maple_union_group WHERE account_id = ? and preset = ?");
            ps.setInt(1, this.getAccountID());
            ps.setInt(2, preset);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
               String[] value = rs.getString("changeable_group").split(",");
               union.changeableGroup.clear();

               for (String v : value) {
                  int cg = Integer.parseInt(v);
                  union.changeableGroup.add(cg);
               }
            } else {
               union.changeableGroup.clear();

               for (int i = 0; i < 8; i++) {
                  union.changeableGroup.add(i);
               }

               this.setSaveFlag(this.getSaveFlag() | CharacterSaveFlag.MAPLE_UNION_GROUP.getFlag());
            }

            rs.close();
            ps.close();
         } catch (SQLException var12) {
            System.out.println("[오류] 메이플 유니온 프리셋 로드에 실패하였습니다. " + var12);
         }
      }
   }

   public void vaildateMapleUnion(MapleUnion union, boolean vaildateStat) {
      this.currentUnion = union;
      String value = this.getOneInfoQuest(QuestExConstants.UnionPreset.getQuestID(), "presetNo");
      if (value != null && !value.isEmpty() && union.currentPreset != Integer.parseInt(value)) {
         this.updateOneInfo(QuestExConstants.UnionPreset.getQuestID(), "presetNo", value);
      }

      for (int i = 0; i < this.currentUnion.changeableGroup.size(); i++) {
         int group = this.currentUnion.changeableGroup.get(i);
         String v = this.getOneInfoQuest(18791, String.valueOf(i));
         if (v != null && !v.isEmpty() && Integer.parseInt(v) != group) {
            this.updateOneInfo(18791, String.valueOf(i), String.valueOf(group));
         }
      }

      if (vaildateStat) {
         this.getStat().recalcLocalStats(this);
      }
   }

   private void checkUnionMaxCoinAlert(MapleUnion union) {
      UnionRankData data = MapleUnionData.getRankData(union.rank);
      String value = this.getOneInfoQuest(18098, "coin");
      if (value != null && !value.isEmpty()) {
         if (data != null && data.getCoinStackMax() == Integer.parseInt(value)) {
            PacketEncoder packet = new PacketEncoder();
            packet.writeShort(SendPacketOpcode.MAPLE_UNION_MAX_COIN.getValue());
            packet.writeInt(0);
            packet.writeInt(data.getCoinStackMax());
            this.send(packet.getPacket());
         }
      }
   }

   public Field_Union getFieldUnion() {
      return this.field_union;
   }

   public void updateUnionRaid() {
      String lastTimeString = this.getOneInfoQuest(18790, "lastTime");
      long unionAttackPower = this.currentUnion.getAttackPower();
      String damage = this.getOneInfoQuest(18790, "damage");
      long d = 0L;
      if (damage != null && !damage.isEmpty()) {
         d = Long.parseLong(damage);
      }

      boolean checkCoinMax = false;
      if (lastTimeString != null && !lastTimeString.isEmpty()) {
         long last = MapleUnionConstants.fromUnionDateString(lastTimeString);
         long diff = System.currentTimeMillis() - last;
         long totalDeal = (long) ((double) (diff / 1000L) * unionAttackPower);

         while (totalDeal > 0L) {
            int mobType = 0;
            long mobDefenceHP = 0L;
            long mobNormalHP = 0L;
            String mobType_ = this.getOneInfoQuest(QuestExConstants.UnionMobInfo.getQuestID(), "mobType");
            String mobDefenceHP_ = this.getOneInfoQuest(QuestExConstants.UnionMobInfo.getQuestID(), "mobDefenceHP");
            String mobNormalHP_ = this.getOneInfoQuest(QuestExConstants.UnionMobInfo.getQuestID(), "mobNormalHP");
            if (mobType_ != null && !mobType_.isEmpty()) {
               mobType = Integer.parseInt(mobType_);
            }

            if (mobDefenceHP_ != null && !mobDefenceHP_.isEmpty()) {
               mobDefenceHP = Long.parseLong(mobDefenceHP_);
            }

            if (mobNormalHP_ != null && !mobNormalHP_.isEmpty()) {
               mobNormalHP = Long.parseLong(mobNormalHP_);
               mobNormalHP = Long.parseLong(mobNormalHP_);
            }

            int normalMobID = 9833101 + mobType;
            int defenceMobID = 9833201 + mobType;
            if (mobDefenceHP == 0L) {
               mobDefenceHP = MapleLifeFactory.getMonster(defenceMobID).getStats().getMaxHp();
            }

            if (mobNormalHP == 0L) {
               mobNormalHP = MapleLifeFactory.getMonster(normalMobID).getStats().getMaxHp();
            }

            long defenceDeal = Math.min(mobDefenceHP - 1L, totalDeal);
            long beforeDamage = d;
            if (defenceDeal <= 0L) {
               long normalDeal = Math.min(mobNormalHP - 1L, totalDeal);
               if (normalDeal > 0L) {
                  totalDeal -= normalDeal;
                  mobNormalHP -= normalDeal;
                  d += normalDeal;
               }
            } else {
               totalDeal -= defenceDeal;
               mobDefenceHP -= defenceDeal;
               d += defenceDeal;
            }

            long a = d / 100000000000L;
            long b = beforeDamage / 100000000000L;
            if (a > b) {
               int coin = (int) (a - b);
               String cv = this.getOneInfoQuest(18098, "coin");
               int c_ = 0;
               if (cv != null && !cv.isEmpty()) {
                  c_ = Integer.parseInt(cv);
               }

               if (coin > 0 && this.setSavedUnionCoin(c_ + coin) != 0) {
                  checkCoinMax = true;
               }
            }

            if (d >= 100000000000000L) {
               d %= 100000000000000L;
            }

            if (mobNormalHP <= 1L && mobDefenceHP <= 1L) {
               this.advanceNextUnion();
            } else {
               this.updateOneInfo(QuestExConstants.UnionMobInfo.getQuestID(), "mobType", String.valueOf(mobType));
               this.updateOneInfo(QuestExConstants.UnionMobInfo.getQuestID(), "mobDefenceHP",
                     String.valueOf(mobDefenceHP));
               this.updateOneInfo(QuestExConstants.UnionMobInfo.getQuestID(), "mobNormalHP",
                     String.valueOf(mobNormalHP));
            }
         }
      }

      this.updateOneInfo(18790, "lastTime", MapleUnionConstants.toUnionDate());
      this.updateOneInfo(18790, "damage", String.valueOf(d));
      if (checkCoinMax) {
         this.checkUnionMaxCoinAlert(this.currentUnion);
      }
   }

   public void advanceNextUnion() {
      String v = this.getOneInfoQuest(QuestExConstants.UnionMobInfo.getQuestID(), "mobType");
      int mobType = 0;
      if (v != null && !v.isEmpty()) {
         mobType = Integer.parseInt(v);
      }

      mobType = (mobType + 1) % 5;
      this.updateOneInfo(QuestExConstants.UnionMobInfo.getQuestID(), "mobType", String.valueOf(mobType));
      this.updateOneInfo(QuestExConstants.UnionMobInfo.getQuestID(), "mobDefenceHP", "0");
      this.updateOneInfo(QuestExConstants.UnionMobInfo.getQuestID(), "mobNormalHP", "0");
      this.updateOneInfo(18790, "lastTime", MapleUnionConstants.toUnionDate());
   }

   public int setSavedUnionCoin(int c) {
      if (this.currentUnion != null) {
         UnionRankData rd = MapleUnionData.getRankData(this.currentUnion.rank);
         if (c >= 0 && rd.getCoinStackMax() >= c) {
            this.updateOneInfo(18098, "coin", String.valueOf(c));
            this.updateOneInfo(18098, "lastTime", MapleUnionConstants.toUnionDate());
            return c;
         } else {
            this.updateOneInfo(18098, "coin", String.valueOf(rd.getCoinStackMax()));
            this.updateOneInfo(18098, "lastTime", MapleUnionConstants.toUnionDate());
            return rd.getCoinStackMax();
         }
      } else {
         return 0;
      }
   }

   public void beginRaid() {
      this.field_union = new Field_Union();
      this.field_union.beginRaid(this);
   }

   public void endRaid() {
      this.field_union.endRaid(this);
      this.field_union = null;
   }

   public int incSavedUnionCoin() {
      String v = this.getOneInfoQuest(18098, "coin");
      int coin = 0;
      if (v != null && !v.isEmpty()) {
         coin = Integer.parseInt(v);
      }

      return this.setSavedUnionCoin(coin + 1);
   }

   public int getUnionActive() {
      return this.currentUnion == null ? 0 : this.currentUnion.activeRaiders.size();
   }

   public int getUnionCharacterCount() {
      return this.currentUnion == null ? 0 : this.currentUnion.raiders.size();
   }

   public int getUnionActiveMax() {
      int attackerCount = -1;
      if (this.currentUnion == null) {
         return -1;
      } else {
         int rank = this.currentUnion.rank;
         UnionRankData rd = MapleUnionData.getRankData(rank);
         return rd.getAttackerCount();
      }
   }

   public int getUnionCoin() {
      int coin = 0;
      String value = this.getOneInfoQuest(QuestExConstants.UnionCoin.getQuestID(), "point");
      if (value != null && !value.isEmpty()) {
         coin = Integer.parseInt(value);
      }

      return coin;
   }

   public void incUnionCoin(int delta) {
      int coin = this.getUnionCoin();
      coin += delta;
      if (DBConfig.isGanglim) {
         this.gainItem(4310229, (short) delta, false, 0L, "");
      }

      if (coin < 0) {
         coin = 0;
      }

      this.updateOneInfo(QuestExConstants.UnionCoin.getQuestID(), "point", String.valueOf(coin));
   }

   public String getUnionLevelName() {
      return this.currentUnion == null ? "언랭크" : MapleUnionData.getRankFullName(this.currentUnion.rank);
   }

   public String getNextUnionLevelName() {
      if (this.currentUnion == null) {
         return "언랭크";
      } else {
         int rank = this.currentUnion.rank;
         int next = MapleUnionConstants.getNextRank(rank);
         return next != rank ? MapleUnionData.getRankFullName(next) : "";
      }
   }

   public int getNextUnionActiveMax() {
      int attackerCount = -1;
      if (this.currentUnion == null) {
         return -1;
      } else {
         int rank = this.currentUnion.rank;
         int next = MapleUnionConstants.getNextRank(rank);
         if (next != rank) {
            UnionRankData rd = MapleUnionData.getRankData(next / 100, next % 100);
            attackerCount = rd.getAttackerCount();
         }

         return attackerCount;
      }
   }

   public int getNextUnionNeedCoin() {
      if (this.currentUnion == null) {
         return -1;
      } else {
         int rank = this.currentUnion.rank;
         int next = MapleUnionConstants.getNextRank(rank);
         return next != rank ? MapleUnionConstants.getNeedLevelUpCoin(next) : -1;
      }
   }

   public int getNextUnionNeedLevel() {
      int level = -1;
      if (this.currentUnion == null) {
         return -1;
      } else {
         int rank = this.currentUnion.rank;
         int next = MapleUnionConstants.getNextRank(rank);
         if (next != rank) {
            UnionRankData rd = MapleUnionData.getRankData(next / 100, next % 100);
            level = rd.getLevel();
         }

         return level;
      }
   }

   public int getUnionLevel() {
      int totalLevel = 0;
      if (this.currentUnion == null) {
         return -1;
      } else {
         List<MapleUnionEntry> raiders = new ArrayList<>(this.currentUnion.raiders);
         raiders.sort((a, b) -> b.level - a.level);
         int remain = 42;

         for (MapleUnionEntry entry : raiders) {
            totalLevel += entry.level;
            if (--remain <= 0) {
               break;
            }
         }

         return totalLevel;
      }
   }

   public int levelUpUnion() {
      int ret = -1;
      if (this.currentUnion == null) {
         return -1;
      } else {
         int rank = this.currentUnion.rank;
         int next = MapleUnionConstants.getNextRank(rank);
         if (next == rank) {
            return 1;
         } else {
            int needCoin = this.getNextUnionNeedCoin();
            if (this.getUnionCoin() < needCoin) {
               return 2;
            } else if (this.getUnionLevel() < this.getNextUnionNeedLevel()) {
               return 3;
            } else {
               this.currentUnion.rank = next;

               for (MapleUnion union : this.getMapleUnionPreset()) {
                  union.rank = next;
               }

               int var9 = 0;
               this.incUnionCoin(-needCoin);
               this.updateOneInfo(QuestExConstants.UnionRankInfo.getQuestID(), "rank",
                     String.valueOf(this.currentUnion.rank));
               PacketEncoder packet = new PacketEncoder();
               packet.writeShort(SendPacketOpcode.MAPLE_UNION_CONTEXT.getValue());
               packet.writeInt(0);
               this.currentUnion.encodeContext(packet);
               this.vaildateMapleUnion(this.currentUnion, false);
               this.send(packet.getPacket());
               this.setSaveFlag(this.getSaveFlag() | CharacterSaveFlag.QUEST_INFO.getFlag());
               this.setSaveFlag(this.getSaveFlag() | CharacterSaveFlag.MAPLE_UNION_DATA.getFlag());
               return var9;
            }
         }
      }
   }

   public long getMobPenaltyAnnounceTime() {
      return this.mobPenaltyAnnounceTime;
   }

   public void setMobPenaltyAnnounceTime(long mobPenaltyAnnounceTime) {
      this.mobPenaltyAnnounceTime = mobPenaltyAnnounceTime;
   }

   public Point getFireBlinkPos() {
      return this.fireBlinkPos;
   }

   public void setFireBlinkPos(Point fireBlinkPos) {
      this.fireBlinkPos = fireBlinkPos;
   }

   public int getDarknessAscension() {
      return this.darknessAscension;
   }

   public void setDarknessAscension(int darknessAscension) {
      this.darknessAscension = darknessAscension;
   }

   public int getDarknessAscensionHP() {
      return this.darknessAscensionHP;
   }

   public void setDarknessAscensionHP(int darknessAscensionHP) {
      this.darknessAscensionHP = darknessAscensionHP;
   }

   public void sendRegisterExtraSkillWithIndex(Point position, boolean isLeft, int skillID, int... index) {
      Skill skill = SkillFactory.getSkill(skillID);
      if (skill != null) {
         if (skill.getExtraSkillInfo() != null && !skill.getExtraSkillInfo().isEmpty()) {
            List<ExtraSkillInfo> extraSkills = new ArrayList<>(skill.getExtraSkillInfo());
            List<ExtraSkillInfo> l = new ArrayList<>();

            for (int i = 0; i < index.length; i++) {
               l.add(extraSkills.get(index[i]));
            }

            this.send(CField.getRegisterExtraSkill(skillID, position.x, position.y, isLeft, l, 1));
         }
      }
   }

   public void sendRegisterExtraSkill(Point position, boolean isLeft, int skillID) {
      this.sendRegisterExtraSkill(position, isLeft, skillID, 1);
   }

   public void sendRegisterExtraSkill(Point position, boolean isLeft, int skillID, int size) {
      this.sendRegisterExtraSkill(position, isLeft, skillID, size, Collections.emptyList());
   }

   public void sendRegisterExtraSkill(Point position, boolean isLeft, int skillID, int size, List<Integer> targets) {
      this.sendRegisterExtraSkill(position, isLeft, skillID, size, Collections.emptyList(), targets);
   }

   public void sendRegisterExtraSkill(Point position, boolean isLeft, int skillID, int size,
         List<Integer> beforeTargets, List<Integer> targets) {
      this.sendRegisterExtraSkill(position, isLeft, skillID, size, beforeTargets, targets, 0);
   }

   public void sendRegisterExtraSkill(
         Point position, boolean isLeft, int skillID, int size, List<Integer> beforeTargets, List<Integer> targets,
         int areaObjectID) {
      Skill skill = SkillFactory.getSkill(skillID);
      if (skill != null) {
         if (skill.getExtraSkillInfo() != null && !skill.getExtraSkillInfo().isEmpty()) {
            List<ExtraSkillInfo> extraSkills = new ArrayList<>(skill.getExtraSkillInfo());

            for (int i = 0; i < extraSkills.size(); i++) {
               System.out.println(extraSkills.get(i).skillID);
            }

            extraSkills.removeIf(info -> info.skillID == 400041079);
            this.send(CField.getRegisterExtraSkill(skillID, position.x, position.y, isLeft, extraSkills, size,
                  beforeTargets, targets, areaObjectID));
         }
      }
   }

   public void sendRegisterExtraSkillIndex(Point position, boolean isLeft, int skillID, int index) {
      Skill skill = SkillFactory.getSkill(skillID);
      if (skill != null) {
         if (skill.getExtraSkillInfo() != null && !skill.getExtraSkillInfo().isEmpty()) {
            List<ExtraSkillInfo> extraSkills = new ArrayList<>(skill.getExtraSkillInfo());
            this.send(
                  CField.getRegisterExtraSkill(
                        skillID, position.x, position.y, isLeft, Collections.singletonList(extraSkills.get(index)), 1,
                        Collections.EMPTY_LIST));
         }
      }
   }

   public void tryApplyLightningSpear(Point position, boolean isLeft) {
      if (this.getTotalSkillLevel(400051044) > 0) {
         SecondaryStatEffect eff = SkillFactory.getSkill(400051044).getEffect(this.getTotalSkillLevel(400051044));
         if (eff != null) {
            Integer value = this.getBuffedValue(SecondaryStatFlag.LightningSpear);
            if (value == null) {
               value = 0;
            }

            if (value >= eff.getX()) {
               if (this.getCooldownLimit(400051044) <= 0L) {
                  this.temporaryStatReset(SecondaryStatFlag.LightningSpear);
                  this.sendRegisterExtraSkill(position, isLeft, 400051044);
                  int cooldown = eff.getCooldown(this);
                  this.giveCoolDowns(400051044, System.currentTimeMillis(), cooldown);
                  this.send(CField.skillCooldown(400051044, cooldown));
                  this.temporaryStatReset(SecondaryStatFlag.LightningSpear);
               }

               return;
            }

            value = value + 1;
            this.temporaryStatSet(400051044, Integer.MAX_VALUE, SecondaryStatFlag.LightningSpear, value);
         }
      }
   }

   public void summonShadowBat(SecondaryStatEffect effect, Point specifiedPos) {
      Point pos = specifiedPos != null ? specifiedPos : this.getTruePosition();
      pos.x = pos.x + Randomizer.rand(-50, 50);
      pos.y = pos.y + Randomizer.rand(-50, 50);
      SecondaryStatEffect eff = this.getSkillLevelData(14000027);
      if (eff != null) {
         if (this.hasBuffBySkillID(14141502)) {
            Skill skillData = SkillFactory.getSkill(14141501);
            int bullet = skillData.getEffect(this.getTotalSkillLevel(14141501)).getBulletCount();
            if (this.getSecondAtoms().size() >= bullet) {
               return;
            }

            SecondAtomData data = skillData.getSecondAtomData();
            List<SecondAtom.Atom> atoms = new ArrayList<>();

            for (int i = 0; i < bullet; i++) {
               SecondAtomData.atom at = data.getAtoms().get(i);
               SecondAtom.Atom a = new SecondAtom.Atom(
                     this.getMap(), this.getId(), 14141501, ForceAtom.SN.getAndAdd(1),
                     SecondAtom.SecondAtomType.ShadowThrowingStars, 0, at);
               a.setPlayerID(this.getId());
               a.setSkillID(14141501);
               Point pos2 = this.getPosition();
               int diffx = at.getPos().x;
               int diffy = at.getPos().y;
               a.setPos(new Point(pos2.x + diffx, pos2.y + diffy));
               this.addSecondAtom(a);
               atoms.add(a);
            }

            SecondAtom secondAtom = new SecondAtom(this.getId(), 14141501, atoms);
            this.getMap().createSecondAtom(secondAtom);
            return;
         }

         SecondaryStatEffect e = this.getBuffedEffect(SecondaryStatFlag.NightWalkerBat);
         if (e != null) {
            int batSkillID = 14000027;
            int advancedLevel = 0;
            if (e.getSourceId() != 14121016 && (advancedLevel = this.getTotalSkillLevel(14110029)) > 0) {
               SecondaryStatEffect level = this.getSkillLevelData(14110029);
               if (this.getNightWalkerSpawnBatCount() >= level.getZ()) {
                  this.setNightWalkerSpawnBatCount(0);
                  batSkillID = 14110033;
                  Summoned summon = new Summoned(this, batSkillID, advancedLevel, pos, SummonMoveAbility.BIRD_FOLLOW,
                        (byte) 0, eff.getDuration());
                  this.getMap().spawnSummon(summon, eff.getDuration(), false, false);
                  this.addSummon(summon);
                  return;
               }
            }

            int batSkillLevel = effect.getLevel();
            if (e.getSourceId() == 14121016) {
               batSkillID = 14120017;
               batSkillLevel = e.getLevel();
            }

            if (this.getNightWalkerSpawnBatCount() >= effect.getZ()) {
               this.setNightWalkerSpawnBatCount(0);
               batSkillID = 14120019;
               Summoned summon = new Summoned(this, batSkillID, batSkillLevel, pos, SummonMoveAbility.BIRD_FOLLOW,
                     (byte) 0, eff.getDuration());
               this.getMap().spawnSummon(summon, eff.getDuration(), false, false);
               this.addSummon(summon);
               return;
            }

            Summoned summon = new Summoned(this, batSkillID, batSkillLevel, pos, SummonMoveAbility.BIRD_FOLLOW,
                  (byte) 0, eff.getDuration());
            this.getMap().spawnSummon(summon, eff.getDuration(), false, false);
            this.addSummon(summon);
            this.setNightWalkerSpawnBatCount(this.getNightWalkerSpawnBatCount() + 1);
         }
      }
   }

   public void checkDailyQuest() {
      QuestEx ex = this.getOneInfoQuestEx(1234567, "daily1");
      if (ex != null && ex.getTime() != null && !ex.getTime().equals(this.getToday())) {
         this.updateOneInfo(1234567, "daily1", "");
         this.removeMobQuest(1400);
         this.updateOneInfo(1234567, "daily2", "");
         this.removeMobQuest(1401);
      }

      ex = this.getOneInfoQuestEx(1234567, "daily2");
      if (ex != null && ex.getTime() != null && !ex.getTime().equals(this.getToday())) {
         this.updateOneInfo(1234567, "daily2", "");
         this.removeMobQuest(1401);
      }

      ex = this.getOneInfoQuestEx(1234568, "arkana");
      if (ex != null && ex.getTime() != null && !ex.getTime().equals(this.getToday())) {
         this.updateOneInfo(1234568, "arkana", "");
      }

      ex = this.getOneInfoQuestEx(1234579, "clear_mPark");
      if (ex != null && ex.getTime() != null && !ex.getTime().equals(this.getToday())) {
         this.updateOneInfo(1234579, "clear_mPark", "");
      }

      ex = this.getOneInfoQuestEx(501045, "mp");
      if (ex != null && ex.getTime() != null && !ex.getTime().equals(this.getToday())) {
         this.updateOneInfo(501045, "mp", "");
      }

      ex = this.getOneInfoQuestEx(1234569, "papulatus_clear");
      if (ex != null && ex.getTime() != null && !ex.getTime().equals(this.getToday())) {
         this.updateOneInfo(1234569, "papulatus_clear", "");
         if (!DBConfig.isGanglim) {
            this.updateOneInfo(1234569, "papulatus_clear_single", "");
            this.updateOneInfo(1234569, "papulatus_clear_multi", "");
         }
      }

      ex = this.getOneInfoQuestEx(1234569, "zakum_clear");
      if (ex != null && ex.getTime() != null && !ex.getTime().equals(this.getToday())) {
         this.updateOneInfo(1234569, "zakum_clear", "");
      }

      SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
      Calendar CAL = new GregorianCalendar(Locale.KOREA);
      String fDate = sdf.format(CAL.getTime());
      String[] dates = fDate.split("-");
      int year = Integer.parseInt(dates[0]);
      int month = Integer.parseInt(dates[1]);
      int day = Integer.parseInt(dates[2]);

      for (int i = 0; i < 2; i++) {
         if (this.getQuestStatus(16011 + i) > 0) {
            if (this.getQuestNoAdd(MapleQuest.getInstance(1601100 + i)) == null) {
               MapleQuest.getInstance(1601100 + i).forceStart(this, 0, "1997-01-01");
            }

            String[] G_dates = this.getQuestNoAdd(MapleQuest.getInstance(1601100 + i)).getCustomData().split("-");
            Date today = null;
            Date ad = null;

            try {
               today = sdf.parse(fDate);
               ad = sdf.parse(G_dates[0] + "-" + G_dates[1] + "-" + G_dates[2]);
            } catch (ParseException var25) {
            }

            int compare = today.compareTo(ad);
            boolean reset = compare >= 0;
            if (reset) {
               this.updateQuest(new MapleQuestStatus(MapleQuest.getInstance(16011 + i), 0));
            }
         }
      }

      if (this.getQuestStatus(3528) > 0) {
         try {
            Date today = sdf.parse(sdf.format(new Date().getTime()));
            Date cpt = sdf.parse(sdf.format(new Date(this.getQuest(3528).getCompletionTime())));
            if (today.after(cpt)) {
               this.updateQuest(new MapleQuestStatus(MapleQuest.getInstance(3528), 0));
            }
         } catch (Exception var24) {
         }
      }

      if (GameConstants.isArk(this.getJob())) {
         for (int ix = 34901; ix <= 34905; ix++) {
            if (this.getQuestStatus(ix) != 2) {
               this.updateQuest(new MapleQuestStatus(MapleQuest.getInstance(ix), 2));
            }
         }

         for (int ixx = 34915; ixx <= 34961; ixx++) {
            MapleQuest q = MapleQuest.getInstance(ixx);
            if (q != null && this.getQuestStatus(ixx) != 2) {
               this.forceCompleteQuest(ixx);
            }
         }

         if (this.getSkillLevel(150011074) < 1) {
            this.changeSkillLevel(150011074, 1, 1);
         }
      }

      if (GameConstants.isKadena(this.getJob())) {
         for (int ixxx = 34600; ixxx <= 34650; ixxx++) {
            MapleQuest q = MapleQuest.getInstance(ixxx);
            if (q != null && this.getQuestStatus(ixxx) != 2) {
               this.forceCompleteQuest(ixxx);
            }
         }
      }

      if (GameConstants.isIllium(this.getJob())) {
         for (int ixxxx = 34800; ixxxx <= 34823; ixxxx++) {
            MapleQuest q = MapleQuest.getInstance(ixxxx);
            if (q != null && this.getQuestStatus(ixxxx) != 2) {
               this.forceCompleteQuest(ixxxx);
            }
         }

         for (int ixxxxx = 34831; ixxxxx <= 34861; ixxxxx++) {
            MapleQuest q = MapleQuest.getInstance(ixxxxx);
            if (q != null && this.getQuestStatus(ixxxxx) != 2) {
               this.forceCompleteQuest(ixxxxx);
            }
         }

         MapleQuest q = MapleQuest.getInstance(34900);
         if (q != null && this.getQuestStatus(34900) != 2) {
            this.forceCompleteQuest(34900);
         }
      }

      if (GameConstants.isLara(this.getJob())) {
         for (Item a : this.getInventory(MapleInventoryType.EQUIP).list()) {
            if (GameConstants.isArcaneSymbol(a.getItemId()) && ((Equip) a).getInt() == 0) {
               ((Equip) a).setInt((short) (300 + (((Equip) a).getArcLevel() - 1) * 100));
               this.send(CWvsContext.InventoryPacket.updateArcaneSymbol(a));
            }

            if (GameConstants.isAuthenticSymbol(a.getItemId()) && ((Equip) a).getInt() == 0) {
               ((Equip) a).setInt((short) (500 + (((Equip) a).getArcLevel() - 1) * 200));
               this.send(CWvsContext.InventoryPacket.updateArcaneSymbol(a));
            }
         }

         for (Item a : this.getInventory(MapleInventoryType.EQUIPPED).list()) {
            if (GameConstants.isArcaneSymbol(a.getItemId()) && ((Equip) a).getInt() == 0) {
               ((Equip) a).setInt((short) (300 + (((Equip) a).getArcLevel() - 1) * 100));
               this.send(CWvsContext.InventoryPacket.updateArcaneSymbol(a));
            }

            if (GameConstants.isAuthenticSymbol(a.getItemId()) && ((Equip) a).getInt() == 0) {
               ((Equip) a).setInt((short) (500 + (((Equip) a).getArcLevel() - 1) * 200));
               this.send(CWvsContext.InventoryPacket.updateArcaneSymbol(a));
            }
         }

         if (this.getSkillLevel(150011074) < 1) {
            this.changeSkillLevel(150011074, 1, 1);
         }

         if (this.getSkillLevel(160011075) < 1) {
            this.changeSkillLevel(160011075, 1, 1);
         }

         if (this.getSkillLevel(160010000) < 1) {
            this.changeSkillLevel(160010000, 1, 1);
         }
      }

      if (GameConstants.isKaiser(this.getJob())
            && this.getInventory(MapleInventoryType.EQUIPPED).getItem((short) -10) != null) {
         int shieldID = this.getInventory(MapleInventoryType.EQUIPPED).getItem((short) -10).getItemId();
         if (this.level >= 100 && (shieldID >= 1352500 && shieldID <= 1352502 || shieldID == 1352504)) {
            this.removeAndChangeEquip(1352503, (short) -10);
            this.dropMessage(5, "카이저 보조무기가 자동 변경되었습니다.");
         }
      }

      if (GameConstants.isAngelicBuster(this.getJob())) {
         if (this.getInventory(MapleInventoryType.EQUIPPED).getItem((short) -10) != null) {
            int shieldID = this.getInventory(MapleInventoryType.EQUIPPED).getItem((short) -10).getItemId();
            if (this.level >= 100 && shieldID >= 1352600 && shieldID <= 1352603) {
               this.removeAndChangeEquip(1352604, (short) -10);
               this.dropMessage(5, "엔젤릭버스터 보조무기가 자동 변경되었습니다.");
            }
         } else if (this.getInventory(MapleInventoryType.EQUIPPED).getItem((short) -10) == null && this.level < 100) {
            this.removeAndChangeEquip(1352600, (short) -10);
            this.dropMessage(5, "엔젤릭버스터 보조무기가 자동 변경되었습니다.");
         }
      }

      if (GameConstants.isMihile(this.getJob())
            && this.getInventory(MapleInventoryType.EQUIPPED).getItem((short) -10) != null) {
         int shieldID = this.getInventory(MapleInventoryType.EQUIPPED).getItem((short) -10).getItemId();
         if (this.level >= 100 && shieldID >= 1098000 && shieldID <= 1098002) {
            this.removeAndChangeEquip(1098003, (short) -10);
            this.dropMessage(5, "미하일 보조무기가 자동 변경되었습니다.");
         }
      }

      if (GameConstants.isDemon(this.getJob())
            && this.getInventory(MapleInventoryType.EQUIPPED).getItem((short) -10) != null) {
         int shieldID = this.getInventory(MapleInventoryType.EQUIPPED).getItem((short) -10).getItemId();
         if (shieldID == 1099001 || shieldID == 1098000 || shieldID == 1098005 || shieldID == 1099000) {
            if (this.level >= 100) {
               this.removeAndChangeEquip(1099004, (short) -10);
            } else if (shieldID != 1099000) {
               this.removeAndChangeEquip(1099000, (short) -10);
            }

            this.dropMessage(5, "데몬슬레이어 보조무기가 자동 변경되었습니다.");
         }
      }

      if (this.level >= 200 && !GameConstants.isYetiPinkBean(this.getJob())) {
         int[] heroEchos = new int[] {
               1005,
               10001005,
               10001215,
               100001005,
               130001005,
               130011005,
               140001005,
               150001005,
               150011005,
               150021005,
               150031005,
               160001005,
               20001005,
               20011005,
               20021005,
               20031005,
               20041005,
               20051005,
               30001005,
               30011005,
               30021005,
               50001005,
               50001215,
               60001005,
               60011005,
               60011215,
               60021005,
               60031005
         };

         for (int hecho : heroEchos) {
            if (this.getAvailableJobs().contains(hecho / 10000) && this.getSkillLevel(hecho) == 0) {
               this.changeSkillLevel(hecho, 1, 1);
            }
         }

         MapleQuest quest = MapleQuest.getInstance(1465);
         MapleQuestStatus qs = this.getQuest(quest);
         if (quest != null && qs.getStatus() != 2) {
            MapleQuest.getInstance(1465).forceComplete(this, 2003);
            this.giveDefaultVMatrixSkill();
            this.send(CField.makeEffectScreen("Effect/5skill.img/screen"));
            this.send(CField.playSE("Sound/SoundEff.img/5thJob"));
         }

         int[] quests = new int[] { 1478 };

         for (int a : quests) {
            quest = MapleQuest.getInstance(a);
            qs = this.getQuest(a);
            if (quest != null && qs.getStatus() != 2) {
               MapleQuest.getInstance(a).forceComplete(this, 2003);
            }
         }

         if (GameConstants.isEunWol(this.getJob())) {
            quest = MapleQuest.getInstance(1542);
            qs = this.getQuest(quest);
            if (quest != null && qs.getStatus() != 2) {
               MapleQuest.getInstance(1542).forceComplete(this, 2003);
               this.send(CWvsContext.getScriptProgressMessage("[정령결속 극대화]를 통해 그리운 랑의 모습을 구현할 수 있게 되었습니다."));
            }
         }
      }

      UnmodifiableIterator var46 = QuestExConstants.bossEnterQuests.keySet().iterator();

      while (var46.hasNext()) {
         Integer prior = (Integer) var46.next();
         if (this.getQuestStatus(prior) < 2
               && this.getLevel() >= (Integer) QuestExConstants.bossEnterQuests.get(prior)) {
            this.forceCompleteQuest(prior);
         }
      }

      this.DailyBossReset(QuestExConstants.Horntail.getQuestID());
      this.DailyBossReset(QuestExConstants.PinkBeen.getQuestID());
      this.DailyBossReset(QuestExConstants.Arkarium.getQuestID());
      this.DailyBossReset(QuestExConstants.Magnus.getQuestID());
      this.DailyBossReset(QuestExConstants.Hillah.getQuestID());
      this.DailyBossReset(QuestExConstants.Zakum.getQuestID());
      this.DailyBossReset(QuestExConstants.VonLeon.getQuestID());
      this.DailyBossReset(QuestExConstants.Pierre.getQuestID());
      this.DailyBossReset(QuestExConstants.VonBon.getQuestID());
      this.DailyBossReset(QuestExConstants.CrimsonQueen.getQuestID());
      this.DailyBossReset(QuestExConstants.Vellum.getQuestID());
      if (DBConfig.isGanglim) {
         this.DailyBossReset(QuestExConstants.ChaosPinkBeen.getQuestID());
         this.DailyBossReset(QuestExConstants.HardMagnus.getQuestID());
         this.DailyBossReset(QuestExConstants.Cygnus.getQuestID());
         this.DailyBossReset(QuestExConstants.ChaosZakum.getQuestID());
         this.DailyBossReset(QuestExConstants.ChaosPierre.getQuestID());
         this.DailyBossReset(QuestExConstants.ChaosVonBon.getQuestID());
         this.DailyBossReset(QuestExConstants.ChaosCrimsonQueen.getQuestID());
         this.DailyBossReset(QuestExConstants.ChaosVellum.getQuestID());
      } else {
         this.WeeklyBossReset(QuestExConstants.ChaosPinkBeen.getQuestID());
         this.WeeklyBossReset(QuestExConstants.HardMagnus.getQuestID());
         this.WeeklyBossReset(QuestExConstants.Cygnus.getQuestID());
         this.WeeklyBossReset(QuestExConstants.ChaosZakum.getQuestID());
         this.WeeklyBossReset(QuestExConstants.ChaosPierre.getQuestID());
         this.WeeklyBossReset(QuestExConstants.ChaosVonBon.getQuestID());
         this.WeeklyBossReset(QuestExConstants.ChaosCrimsonQueen.getQuestID());
         this.WeeklyBossReset(QuestExConstants.ChaosVellum.getQuestID());
      }

      var46 = DailyQuests.dailyQuests.keySet().iterator();

      while (var46.hasNext()) {
         int arcaneDailyQuest = (Integer) var46.next();
         if (this.getQuestStatus(arcaneDailyQuest) > 0) {
            String[] G_dates = this.getQuestIfNullAdd(MapleQuest.getInstance(arcaneDailyQuest)).getCustomData()
                  .split("-");
            Date today = null;
            Date ad = null;

            try {
               today = sdf.parse(fDate);
               ad = sdf.parse(G_dates[10] + "-" + G_dates[11] + "-" + G_dates[12]);
            } catch (ParseException var23) {
            }

            int compare = today.compareTo(ad);
            boolean reset = compare >= 0;
            if (reset) {
               this.updateQuest(new MapleQuestStatus(MapleQuest.getInstance(arcaneDailyQuest), 0));

               for (Integer DailyQuest : DailyQuests.dailyQuests.get(arcaneDailyQuest)) {
                  this.updateQuest(new MapleQuestStatus(MapleQuest.getInstance(DailyQuest), 0));
               }

               this.send(CWvsContext.onCharacterModified(this, -1L));
               HyperHandler.updateSkills(this, 0);
               this.updateMatrixSkillsNoLock();
            }
         }
      }

      int lastDay = this.getOneInfoQuestInteger(1234570, "lastDay");
      int lastDayAccount = this.getOneInfoQuestInteger(1068, "lastDay");
      if (day != lastDay) {
         this.getTraits().forEach((key, value) -> value.setTodayExp(0));
         AchievementFactory.resetDayChange(this);
         this.setTodayContribution(0);
         this.updateOneInfo(1234570, "lastDay", String.valueOf(day));
         this.updateOneInfo(1234569, "hell_boss_count", "0");
         this.updateOneInfo(100711, "today", "0");
         this.updateOneInfo(100711, "lock", "0");
         this.updateOneInfo(100712, "today", "0");
         this.updateOneInfo(100711, "lock", "0");
         this.updateOneInfo(QuestExConstants.SerniumSeren.getQuestID(), "practice", "0");
         this.updateOneInfo(QuestExConstants.SerniumSeren.getQuestID(), "enter", "0");
         if (!DBConfig.isGanglim) {
            this.updateOneInfo(QuestExConstants.Pierre.getQuestID(), "eNum_single", "");
            this.updateOneInfo(QuestExConstants.Pierre.getQuestID(), "eNum_multi", "");
            this.updateOneInfo(QuestExConstants.CrimsonQueen.getQuestID(), "eNum_single", "");
            this.updateOneInfo(QuestExConstants.CrimsonQueen.getQuestID(), "eNum_multi", "");
            this.updateOneInfo(QuestExConstants.VonBon.getQuestID(), "eNum_single", "");
            this.updateOneInfo(QuestExConstants.VonBon.getQuestID(), "eNum_multi", "");
            this.updateOneInfo(QuestExConstants.Vellum.getQuestID(), "eNum_single", "");
            this.updateOneInfo(QuestExConstants.Vellum.getQuestID(), "eNum_multi", "");
            this.updateOneInfo(QuestExConstants.Arkarium.getQuestID(), "eNum_single", "");
            this.updateOneInfo(QuestExConstants.Arkarium.getQuestID(), "eNum_multi", "");
            this.updateOneInfo(1235859, "eliteMonster_Count", "");
            this.updateOneInfo(7003, "Single", "");
            this.updateOneInfo(7003, "Multi", "");
            this.updateInfoQuest(QuestExConstants.DailyQuestResetCount.getQuestID(), "");
         } else {
            this.client.setKeyValue("day_qitem", "0");
            this.updateOneInfo(1234569, "miniGame4_count", "0");
            if (DBConfig.isGanglim) {
               this.updateOneInfo(QuestExConstants.SerniumSeren.getQuestID(), "clear", "0");
               QuestExConstants.bossQuests.entrySet().forEach(e -> {
                  if ((Integer) e.getValue() > 0) {
                     if (this.getOneInfoQuestInteger((Integer) e.getValue(), "mobid") > 0) {
                        this.updateOneInfo((Integer) e.getValue(), "mobid", "");
                     }

                     if (this.getOneInfoQuestInteger((Integer) e.getValue(), "mobDead") > 0) {
                        this.updateOneInfo((Integer) e.getValue(), "mobDead", "");
                     }
                  }
               });

               for (int ixxxxxx = 0; ixxxxxx < 2; ixxxxxx++) {
                  this.updateOneInfo(1234569 + ixxxxxx, "demian_clear", "");
                  this.updateOneInfo(1234569 + ixxxxxx, "swoo_clear", "");
                  this.updateOneInfo(1234569 + ixxxxxx, "lucid_clear", "");
                  this.updateOneInfo(1234569 + ixxxxxx, "will_clear", "");
                  this.updateOneInfo(1234569 + ixxxxxx, "tengu_clear", "");
                  this.updateOneInfo(1234569 + ixxxxxx, "normal_mitsuhide_clear", "");
                  this.updateOneInfo(1234569 + ixxxxxx, "hard_mitsuhide_clear", "");
                  this.updateOneInfo(1234569 + ixxxxxx, "guardian_angel_slime_clear", "");
                  this.updateOneInfo(1234569 + ixxxxxx, "jinhillah_clear", "");
                  this.updateOneInfo(1234569 + ixxxxxx, "chaos_papulatus_clear", "");
                  this.updateOneInfo(1234569 + ixxxxxx, "chaos_zakum_clear", "");
                  this.updateOneInfo(1234569 + ixxxxxx, "chaos_pierre_clear", "");
                  this.updateOneInfo(1234569 + ixxxxxx, "chaos_banban_clear", "");
                  this.updateOneInfo(1234569 + ixxxxxx, "chaos_velum_clear", "");
                  this.updateOneInfo(1234569 + ixxxxxx, "chaos_b_queen_clear", "");
                  this.updateOneInfo(1234569 + ixxxxxx, "hard_magnus_clear", "");
                  this.updateOneInfo(1234569 + ixxxxxx, "akairum_clear", "");
               }

               this.updateOneInfo(1234569, "pinkbean_clear", "");
               this.updateOneInfo(1234569, "vonleon_clear", "");
               this.updateOneInfo(1234570, "vonleon_clear", "");
               this.updateOneInfo(1234571, "vonleon_clear", "");
               this.updateOneInfo(1234570, "blackmage_clear", "");
               this.updateOneInfo(1234589, "dusk_clear", "");
               this.updateOneInfo(1234590, "dusk_clear", "");
               this.updateOneInfo(1234569, "dunkel_clear", "");
               this.updateOneInfo(1234589, "dunkel_clear", "");
               this.updateOneInfo(1234569, "normal_swoo_clear", "");
               this.updateOneInfo(1234569, "normal_demian_clear", "");
               this.updateOneInfo(1234569, "normal_lucid_clear", "");
               this.updateOneInfo(1234569, "normal_dusk_clear", "");
               this.updateOneInfo(1234569, "normal_dunkel_clear", "");
               this.updateOneInfo(1234569, "hard_demian_clear", "");
               this.updateOneInfo(1234569, "hard_lucid_clear", "");
               this.updateOneInfo(1234569, "hard_will_clear", "");
               this.updateOneInfo(1234569, "chaos_dusk_clear", "");
               this.updateOneInfo(1234569, "hard_dunkel_clear", "");
               this.updateOneInfo(1234569, "normal_will_clear", "");
               this.updateOneInfo(1234569, "hard_swoo_clear", "");
               this.updateOneInfo(1234569, "ResetBoss", "0");
               this.updateOneInfo(1234569, "OffsetCount", "0");
            }
         }

         this.updateOneInfo(1234567, "buy_lp_2", "0");
         this.updateOneInfo(1234567, "buy_lp_3", "0");
         this.updateOneInfo(1234567, "buy_lp_4", "0");
         this.updateOneInfo(1234567, "buy_lp_5", "0");
         this.updateOneInfo(1235858, "praise", "0");
      }

      if (day != lastDayAccount) {
         this.updateOneInfo(1068, "lastDay", String.valueOf(day));
         this.updateOneInfo(1234567, "praise_hongbo", "");
         this.updateOneInfo(1234567, "jumpMap", "");
         this.updateOneInfo(1235859, "praise_dailyQuest_ClearCount", "");
         this.updateOneInfo(1235859, "praise_dailyQuest_MobCount", "");
         this.updateOneInfo(1234567, "UnionMiniGame_Count", "");
         this.updateOneInfo(1234567, "UnionMiniGame_Q", "");
         this.updateOneInfo(1211345, "get_meso", "0");
         this.updateOneInfo(1211345, "today", "0");
         if (DBConfig.isGanglim) {
            for (int ixxxxxx = 0; ixxxxxx <= 14; ixxxxxx++) {
               this.updateOneInfo(100778, ixxxxxx + "_buy_count", "0");
            }
         } else {
            for (int ixxxxxx = 0; ixxxxxx <= 14; ixxxxxx++) {
               this.updateOneInfo(QuestExConstants.KillPoint.getQuestID(), ixxxxxx + "_buy_count", "0");
            }
         }
      }

      for (int ixxxxxx = 0; ixxxxxx < 7; ixxxxxx++) {
         Calendar cal = Calendar.getInstance();
         cal.set(7, ixxxxxx);
         if (cal.getTimeInMillis() > System.currentTimeMillis()) {
            cal.set(3, cal.get(3) - 1);
         }

         int lastWeek = this.getOneInfoQuestInteger(1234570, "lastWeek" + ixxxxxx);
         int lastWeek2 = this.getOneInfoQuestInteger(QuestExConstants.IntensePowerCrystal.getQuestID(),
               "lastWeek" + ixxxxxx);
         int lastMonth = this.getOneInfoQuestInteger(1234570, "lastMonth");
         int currentWeek = cal.get(3);
         if (lastMonth != month) {
            this.updateOneInfo(1234570, "lastMonth", String.valueOf(month));
            String v = this.getOneInfo(1234570, "blackmage_clear");
            if (v != null && !v.isEmpty()) {
               this.updateOneInfo(1234570, "blackmage_clear", "");
            }
         }

         if (lastWeek2 != currentWeek) {
            this.updateOneInfo(QuestExConstants.IntensePowerCrystal.getQuestID(), "lastWeek" + ixxxxxx,
                  String.valueOf(currentWeek));
            if (ixxxxxx == 5) {
               this.updateOneInfo(QuestExConstants.IntensePowerCrystal.getQuestID(), "count", "180");
               MapleQuest questx = MapleQuest.getInstance(100717);
               MapleQuestStatus status = this.getQuest(questx);
               if (this.getOneInfoQuestInteger(QuestExConstants.NeoEventAdventureLog.getQuestID(), "start") == 1) {
                  this.updateQuest(new MapleQuestStatus(MapleQuest.getInstance(100717), 0));
                  this.updateQuest(new MapleQuestStatus(
                        MapleQuest.getInstance(QuestExConstants.NeoEventNormalMob.getQuestID()), 0));
                  this.updateOneInfo(QuestExConstants.NeoEventAdventureLog.getQuestID(), "start", "0");
                  this.updateOneInfo(QuestExConstants.NeoEventAdventureLog.getQuestID(), "mission", "0");
                  this.updateOneInfo(QuestExConstants.NeoEventAdventureLog.getQuestID(), "state", "0");
                  this.updateOneInfo(QuestExConstants.NeoEventNormalMob.getQuestID(), "m0", "0");
                  this.updateOneInfo(QuestExConstants.NeoEventEliteMob.getQuestID(), "m1", "0");
                  this.updateOneInfo(QuestExConstants.NeoEventRuneAct.getQuestID(), "RunAct", "0");
                  this.updateOneInfo(QuestExConstants.NeoEventRandomPortal.getQuestID(), "count", "0");
                  if (this.getQuestStatus(QuestExConstants.NeoEventEliteMob.getQuestID()) > 0) {
                     this.updateQuest(new MapleQuestStatus(
                           MapleQuest.getInstance(QuestExConstants.NeoEventEliteMob.getQuestID()), 0));
                  }

                  if (this.getQuestStatus(QuestExConstants.NeoEventRuneAct.getQuestID()) > 0) {
                     this.updateQuest(new MapleQuestStatus(
                           MapleQuest.getInstance(QuestExConstants.NeoEventRuneAct.getQuestID()), 0));
                  }

                  if (this.getQuestStatus(QuestExConstants.NeoEventRandomPortal.getQuestID()) > 0) {
                     this.updateQuest(new MapleQuestStatus(
                           MapleQuest.getInstance(QuestExConstants.NeoEventRandomPortal.getQuestID()), 0));
                  }
               }

               if (!DBConfig.isGanglim) {
                  this.updateOneInfo(QuestExConstants.NeoCoreEvent.getQuestID(), "reward_chaos_zakum", "");
                  this.updateOneInfo(QuestExConstants.NeoCoreEvent.getQuestID(), "reward_chaos_pierre", "");
                  this.updateOneInfo(QuestExConstants.NeoCoreEvent.getQuestID(), "reward_chaos_banban", "");
                  this.updateOneInfo(QuestExConstants.NeoCoreEvent.getQuestID(), "reward_b_queen", "");
                  this.updateOneInfo(QuestExConstants.NeoCoreEvent.getQuestID(), "reward_hard_magnus", "");
                  this.updateOneInfo(QuestExConstants.NeoCoreEvent.getQuestID(), "reward_chaos_velum", "");
                  this.updateOneInfo(QuestExConstants.NeoCoreEvent.getQuestID(), "reward_chaos_papulatus", "");
                  this.updateOneInfo(QuestExConstants.NeoCoreEvent.getQuestID(), "reward_normal_swoo", "");
                  this.updateOneInfo(QuestExConstants.NeoCoreEvent.getQuestID(), "reward_normal_demian", "");
                  this.updateOneInfo(QuestExConstants.NeoCoreEvent.getQuestID(), "reward_normal_lucid", "");
                  this.updateOneInfo(QuestExConstants.NeoCoreEvent.getQuestID(), "reward_normal_will", "");
                  this.updateOneInfo(QuestExConstants.NeoCoreEvent.getQuestID(), "reward_normal_dusk", "");
                  this.updateOneInfo(QuestExConstants.NeoCoreEvent.getQuestID(), "reward_normal_dunkel", "");
                  this.updateOneInfo(QuestExConstants.NeoCoreEvent.getQuestID(), "reward_hard_demian", "");
                  this.updateOneInfo(QuestExConstants.NeoCoreEvent.getQuestID(), "reward_hard_swoo", "");
                  this.updateOneInfo(QuestExConstants.NeoCoreEvent.getQuestID(), "reward_hard_lucid", "");
                  this.updateOneInfo(QuestExConstants.NeoCoreEvent.getQuestID(), "reward_hard_will", "");
                  this.updateOneInfo(QuestExConstants.NeoCoreEvent.getQuestID(), "reward_chaos_dusk", "");
                  this.updateOneInfo(QuestExConstants.NeoCoreEvent.getQuestID(), "reward_hard_dunkel", "");
                  this.updateOneInfo(QuestExConstants.NeoCoreEvent.getQuestID(), "reward_jinhillah", "");
                  this.updateOneInfo(QuestExConstants.NeoCoreEvent.getQuestID(), "week", "0");
                  this.updateOneInfo(QuestExConstants.NeoCoreEvent.getQuestID(), "lock", "0");
               }

               int count = this.getOneInfoQuestInteger(19770, "count");
               if (count > 0 && this.getOneInfoQuestInteger(19770, "active") == 0) {
                  this.updateOneInfo(19770, "count", "0");
               }
            } else if (ixxxxxx == 2 && DBConfig.isGanglim) {
               this.getClient().removeKeyValue("HgradeWeek");
            }
         }

         if (lastWeek != currentWeek) {
            this.updateOneInfo(1234570, "lastWeek" + ixxxxxx, String.valueOf(currentWeek));
            if (ixxxxxx == 2) {
               if (DBConfig.isGanglim) {
                  this.updateOneInfo(1234569, "hell_demian_clear", "");
                  this.updateOneInfo(1234569, "hell_lucid_clear", "");
                  this.updateOneInfo(1234569, "hell_swoo_clear", "");
                  this.updateOneInfo(1234569, "hell_will_clear", "");
                  this.updateOneInfo(1234569, "hell_dunkel_clear", "");
                  int count = this.getOneInfoQuestInteger(19770, "count");
                  if (count > 0 && this.getOneInfoQuestInteger(19770, "active") == 0) {
                     this.updateOneInfo(19770, "count", "0");
                  }
               }

               int rank = this.getOneInfoQuestInteger(15901, "rank_b");
               if (rank > 0) {
                  this.updateOneInfo(20200128, "last_week_dream_breaker", String.valueOf(rank));
               }
            } else if (ixxxxxx == 5) {
               if (!DBConfig.isGanglim) {
                  this.updateOneInfo(QuestExConstants.SerniumSeren.getQuestID(), "clear", "0");
                  this.updateOneInfo(QuestExConstants.SerniumSeren.getQuestID(), "clear_single", "0");
                  this.updateOneInfo(QuestExConstants.SerniumSeren.getQuestID(), "clear_multi", "0");
                  this.updateOneInfo(1234569, "demian_clear", "");
                  this.updateOneInfo(1234569, "demian_clear_single", "");
                  this.updateOneInfo(1234569, "demian_clear_multi", "");
                  this.updateOneInfo(1234569, "swoo_clear", "");
                  this.updateOneInfo(1234569, "swoo_clear_single", "");
                  this.updateOneInfo(1234569, "swoo_clear_multi", "");
                  this.updateOneInfo(1234569, "lucid_clear", "");
                  this.updateOneInfo(1234569, "lucid_clear_single", "");
                  this.updateOneInfo(1234569, "lucid_clear_multi", "");
                  this.updateOneInfo(1234569, "will_clear", "");
                  this.updateOneInfo(1234569, "will_clear_single", "");
                  this.updateOneInfo(1234569, "will_clear_multi", "");
                  this.updateOneInfo(1234569, "guardian_angel_slime_clear", "");
                  this.updateOneInfo(1234569, "guardian_angel_slime_clear_single", "");
                  this.updateOneInfo(1234569, "guardian_angel_slime_clear_multi", "");
                  this.updateOneInfo(1234569, "jinhillah_clear", "");
                  this.updateOneInfo(1234569, "jinhillah_clear_single", "");
                  this.updateOneInfo(1234569, "jinhillah_clear_multi", "");
                  this.updateOneInfo(1234569, "chaos_papulatus_clear", "");
                  this.updateOneInfo(1234569, "chaos_papulatus_clear_single", "");
                  this.updateOneInfo(1234569, "chaos_papulatus_clear_multi", "");
                  this.updateOneInfo(1234569, "chaos_zakum_clear", "");
                  this.updateOneInfo(1234569, "chaos_pierre_clear", "");
                  this.updateOneInfo(1234569, "ride_vehicle_select", "");
                  this.updateOneInfo(1234569, "chaos_banban_clear", "");
                  this.updateOneInfo(1234569, "chaos_velum_clear", "");
                  this.updateOneInfo(1234569, "chaos_velum_clear_single", "");
                  this.updateOneInfo(1234569, "chaos_velum_clear_multi", "");
                  this.updateOneInfo(1234569, "chaos_b_queen_clear", "");
                  this.updateOneInfo(1234569, "hard_magnus_clear", "");
                  this.updateOneInfo(1234569, "hell_demian_clear", "");
                  this.updateOneInfo(1234569, "hell_swoo_clear", "");
                  this.updateOneInfo(1234569, "hell_lucid_clear", "");
                  this.updateOneInfo(1234569, "hell_will_clear", "");
                  this.updateOneInfo(1234569, "hell_dunkel_clear", "");
                  this.updateOneInfo(1234589, "dusk_clear", "");
                  this.updateOneInfo(1234589, "dusk_clear_single", "");
                  this.updateOneInfo(1234589, "dusk_clear_multi", "");
                  this.updateOneInfo(1234589, "dunkel_clear", "");
                  this.updateOneInfo(1234589, "dunkel_clear_single", "");
                  this.updateOneInfo(1234589, "dunkel_clear_multi", "");
                  this.updateOneInfo(1234569, "normal_swoo_clear", "");
                  this.updateOneInfo(1234569, "normal_demian_clear", "");
                  this.updateOneInfo(1234569, "normal_lucid_clear", "");
                  this.updateOneInfo(1234569, "normal_will_clear", "");
                  this.updateOneInfo(1234569, "normal_dusk_clear", "");
                  this.updateOneInfo(1234569, "normal_dunkel_clear", "");
                  this.updateOneInfo(1234569, "hard_demian_clear", "");
                  this.updateOneInfo(1234569, "hard_demian_clear_single", "");
                  this.updateOneInfo(1234569, "hard_demian_clear_multi", "");
                  this.updateOneInfo(1234569, "hard_lucid_clear", "");
                  this.updateOneInfo(1234569, "hard_lucid_clear_single", "");
                  this.updateOneInfo(1234569, "hard_lucid_clear_multi", "");
                  this.updateOneInfo(1234569, "hard_will_clear", "");
                  this.updateOneInfo(1234569, "hard_will_clear_single", "");
                  this.updateOneInfo(1234569, "hard_will_clear_multi", "");
                  this.updateOneInfo(1234569, "chaos_dusk_clear", "");
                  this.updateOneInfo(1234569, "chaos_dusk_clear_single", "");
                  this.updateOneInfo(1234569, "chaos_dusk_clear_multi", "");
                  this.updateOneInfo(1234569, "hard_dunkel_clear", "");
                  this.updateOneInfo(1234569, "hard_dunkel_clear_single", "");
                  this.updateOneInfo(1234569, "hard_dunkel_clear_multi", "");
                  this.updateOneInfo(1234569, "hard_swoo_clear", "");
                  this.updateOneInfo(1234569, "hard_swoo_clear_single", "");
                  this.updateOneInfo(1234569, "hard_swoo_clear_multi", "");
                  this.updateInfoQuest(QuestExConstants.WeeklyQuestResetCount.getQuestID(), "");
               }

               for (int j = 0; j < 6; j++) {
                  int itemID = 2431968 + j;
                  if (DBConfig.isGanglim) {
                     this.updateOneInfo(1234569, "use_" + itemID, "0");
                  } else {
                     this.updateOneInfo(1234569, "use_" + itemID + "_single", "0");
                     this.updateOneInfo(1234569, "use_" + itemID + "_multi", "0");
                  }
               }
            }
         }
      }

      int[] weekQuests = new int[] { 26000, 34151 };

      for (int weekQuest : weekQuests) {
         if (this.getQuestStatus(weekQuest) > 0) {
            String[] G_dates = this.getQuestIfNullAdd(MapleQuest.getInstance(weekQuest)).getCustomData().split("-");
            Date today = null;
            Date ad = null;

            try {
               today = sdf.parse(fDate);
               ad = sdf.parse(G_dates[0] + "-" + G_dates[1] + "-" + G_dates[2]);
            } catch (ParseException var22) {
            }

            int compare = today.compareTo(ad);
            boolean reset = compare >= 0;
            if (reset) {
               this.updateQuest(new MapleQuestStatus(MapleQuest.getInstance(weekQuest), 0));
               this.send(CWvsContext.onCharacterModified(this, -1L));
               HyperHandler.updateSkills(this, 0);
               this.updateMatrixSkillsNoLock();
            }
         }
      }

      UnmodifiableIterator var78 = WeeklyQuests.dailyQuests.keySet().iterator();

      while (var78.hasNext()) {
         int wQuest = (Integer) var78.next();
         if (this.getQuestStatus(wQuest) > 0) {
            String[] G_dates = this.getQuestIfNullAdd(MapleQuest.getInstance(wQuest)).getCustomData().split("-");
            Date today = null;
            Date ad = null;

            try {
               today = sdf.parse(fDate);
               String yearS = G_dates[10];
               if (yearS.length() < 3) {
                  yearS = "20" + G_dates[10];
               }

               ad = sdf.parse(yearS + "-" + G_dates[11] + "-" + G_dates[12]);
            } catch (ParseException var21) {
            }

            int compare = today.compareTo(ad);
            boolean reset = compare >= 0;
            if (reset) {
               if (wQuest == 39165) {
                  this.updateOneInfo(39100, "FC", "0");
                  this.updateOneInfo(39105, "start", "0");
                  this.updateOneInfo(39105, "NpcSpeech", "0");
                  this.updateOneInfo(39106, "start", "0");
                  this.updateOneInfo(39106, "NpcSpeech", "0");
                  this.updateOneInfo(39107, "start", "0");
                  this.updateOneInfo(39107, "NpcSpeech", "0");
                  this.updateOneInfo(39108, "start", "0");
                  this.updateOneInfo(39108, "NpcSpeech", "0");
                  this.updateOneInfo(39116, "success", "0");
                  this.updateOneInfo(39125, "success", "0");
                  this.updateOneInfo(39152, "success", "0");
                  this.updateOneInfo(39161, "start", "0");
                  this.updateOneInfo(39162, "start", "0");
                  this.updateOneInfo(39163, "start", "0");
                  this.updateOneInfo(39164, "start", "0");
               } else if (wQuest == 39002) {
                  this.updateOneInfo(15708, "cq", "0");
               }

               this.updateQuest(new MapleQuestStatus(MapleQuest.getInstance(wQuest), 0));

               for (int wq : WeeklyQuests.dailyQuests.get(wQuest)) {
                  this.updateQuest(new MapleQuestStatus(MapleQuest.getInstance(wq), 0));
               }

               this.send(CWvsContext.onCharacterModified(this, -1L));
               HyperHandler.updateSkills(this, 0);
               this.updateMatrixSkillsNoLock();
            }
         }
      }
   }

   public void DailyBossReset(int questID) {
      Calendar CAL = new GregorianCalendar(Locale.KOREA);
      SimpleDateFormat sdfBoss = new SimpleDateFormat("yyyyMMdd");
      if (this.getOneInfo(questID, "eNum") != null) {
         try {
            String date = sdfBoss.format(CAL.getTime());
            Date today = sdfBoss.parse(date);
            Date toto = sdfBoss.parse(this.getInfoQuest(questID).getTime());
            int compare = today.compareTo(toto);
            if (compare > 0) {
               this.updateOneInfo(questID, "eNum", "0");
               if (!DBConfig.isGanglim) {
                  this.updateOneInfo(questID, "eNum_single", "0");
                  this.updateOneInfo(questID, "eNum_multi", "0");
               }
            }
         } catch (Exception var8) {
         }
      }
   }

   public void DailyFairyPendantReset(int questID) {
      if (this.getInfoQuest(questID) != null) {
         Calendar CAL = new GregorianCalendar(Locale.KOREA);
         SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
         QuestEx qex = this.getInfoQuest(questID);
         if (qex != null && this.getInfoQuest(questID).getData() != null
               && !this.getInfoQuest(questID).getData().equals("")) {
            try {
               String date = sdf.format(CAL.getTime());
               Date today = sdf.parse(date);
               Date toto = sdf.parse(this.getInfoQuest(questID).getTime());
               int compare = today.compareTo(toto);
               if (compare > 0) {
                  String itemUniequeID = this.getInfoQuest(questID).getData().split("=")[0];
                  Date dd = new Date();
                  SimpleDateFormat sdff = new SimpleDateFormat("yyMMddHHmmss");
                  String test = sdff.format(dd);
                  StringBuilder sb = new StringBuilder();
                  sb.append(test).append("|").append(test).append("|0|0|0");
                  this.fairyExp = 0;
                  this.updateInfoQuest(questID, itemUniequeID + "=" + sb.toString());
                  this.dropMessage(5, "자정이 지나 정령의 펜던트가 초기화 되었습니다.");
               }
            } catch (Exception var14) {
            }
         }
      }
   }

   public void WeeklyBossReset(int questID) {
      Calendar CAL = new GregorianCalendar(Locale.KOREA);
      SimpleDateFormat sdfBoss = new SimpleDateFormat("yyyyMMdd");
      if (this.getOneInfo(questID, "eNum") != null) {
         try {
            String date = sdfBoss.format(CAL.getTime());
            Date today = sdfBoss.parse(date);
            Date toto = sdfBoss.parse(this.getInfoQuest(questID).getTime());
            int a = 7 - toto.getDay() + 4;
            if (toto.getDay() < 4) {
               a = 4 - toto.getDay();
            }

            toto.setDate(toto.getDate() + a);
            boolean reset = today.after(toto) || today.equals(toto);
            if (reset) {
               this.updateOneInfo(questID, "eNum", "0");
               if (!DBConfig.isGanglim) {
                  this.updateOneInfo(questID, "eNum_single", "0");
                  this.updateOneInfo(questID, "eNum_multi", "0");
               }
            }
         } catch (Exception var9) {
         }
      }
   }

   public int decrementJinHillahDeathCount() {
      int result = -1;

      for (Field_JinHillah.JinHillahDeathCount dc : new ArrayList<>(this.jinHillahDeathCount)) {
         if (dc.getStatus() == Field_JinHillah.JinHillahDeathCountType.Green) {
            dc.setStatus(Field_JinHillah.JinHillahDeathCountType.Red);
            result = 0;
            break;
         }
      }

      int count = 0;

      for (Field_JinHillah.JinHillahDeathCount dcx : new ArrayList<>(this.jinHillahDeathCount)) {
         if (dcx.getStatus() == Field_JinHillah.JinHillahDeathCountType.Green) {
            count++;
         }
      }

      if (count <= 0) {
         result = -1;

         for (Field_JinHillah.JinHillahDeathCount dcxx : new ArrayList<>(this.jinHillahDeathCount)) {
            dcxx.setStatus(Field_JinHillah.JinHillahDeathCountType.Out);
         }

         this.setDeathCount(0);
         this.setDecrementDeathCount(0);
      }

      if (this.getMap() instanceof Field_JinHillah) {
         Field_JinHillah f = (Field_JinHillah) this.getMap();
         f.sendJinHillahDeathCount(this);
         f.updatePartyMemberDeathCount(this, true);
         this.updatePartyMemberHP();
      }

      this.send(CWvsContext.enableActions(this));
      return result;
   }

   public void setJinHillahDeathCountOut() {
      for (Field_JinHillah.JinHillahDeathCount dc : new ArrayList<>(this.jinHillahDeathCount)) {
         if (dc.getStatus() == Field_JinHillah.JinHillahDeathCountType.Green) {
            dc.setStatus(Field_JinHillah.JinHillahDeathCountType.Out);
         }
      }

      if (this.getMap() instanceof Field_JinHillah) {
         Field_JinHillah f = (Field_JinHillah) this.getMap();
         f.sendJinHillahDeathCount(this);
         f.updatePartyMemberDeathCount(this, true);
      }

      this.setJinHillahDeathCountOut(true);
   }

   public void resetJinHillahDeathCount() {
      for (Field_JinHillah.JinHillahDeathCount dc : new ArrayList<>(this.jinHillahDeathCount)) {
         if (dc.getStatus() == Field_JinHillah.JinHillahDeathCountType.Red) {
            dc.setStatus(Field_JinHillah.JinHillahDeathCountType.Green);
         }
      }

      if (this.getMap() instanceof Field_JinHillah) {
         Field_JinHillah f = (Field_JinHillah) this.getMap();
         f.sendJinHillahDeathCount(this);
         f.updatePartyMemberDeathCount(this, true);
         this.updatePartyMemberHP();
      }

      this.send(CWvsContext.enableActions(this));
   }

   public int getSpiritJabelinConsumeID() {
      return this.spiritJabelinConsumeID;
   }

   public void setSpiritJabelinConsumeID(int spiritJabelinConsumeID) {
      this.spiritJabelinConsumeID = spiritJabelinConsumeID;
   }

   public boolean isUseBuffProtector() {
      return this.useBuffProtector;
   }

   public void setUseBuffProtector(boolean useBuffProtector) {
      this.useBuffProtector = useBuffProtector;
   }

   public final void sendAffectedArea(Point position, SecondaryStatEffect eff) {
      this.sendAffectedArea(position, eff, eff.getDuration());
   }

   public final void sendAffectedArea(Point position, SecondaryStatEffect eff, int duration) {
      Rectangle rect = eff.calculateBoundingBox(this.getPosition(), this.isFacingLeft());
      if (this.isFacingLeft()) {
         rect.x = rect.x - eff.getX() / 2;
      } else {
         rect.x = rect.x + eff.getX() / 2;
      }

      Point pos = this.getMap().calcDropPos(new Point(rect.x, rect.y - 23), this.getPosition());
      rect.y = pos.y - 23;
      this.getMap().spawnMist(new AffectedArea(rect, this, eff, pos, System.currentTimeMillis() + duration));
   }

   private void summonAffectedToMob() {
      if (this.getSummonsSize() > 0) {
         try {
            for (Summoned summon : this.getSummonsReadLock()) {
               if (summon != null) {
                  Rect area = summon.getArea();
                  if (area != null) {
                     for (MapleMonster mob : this.getMap()
                           .getMobsInRect(summon.getPosition(), area.getLeft(), area.getTop(), area.getRight(),
                                 area.getBottom())) {
                        if (mob != null && mob.isAlive()) {
                           summon.affectToMob(mob);
                        }
                     }

                     for (MapleCharacter player : this.getMap()
                           .getPlayerInRect(summon.getPosition(), area.getLeft(), area.getTop(), area.getRight(),
                                 area.getBottom())) {
                        if (player != null
                              && player.isAlive()
                              && (this.getParty() == null && player.getId() == this.getId()
                                    || this.getParty() != null && player.getParty() != null
                                          && player.getParty().getId() == this.getParty().getId())) {
                           summon.affectToUser(player);
                        }
                     }
                  }
               }
            }
         } finally {
            this.unlockSummonsReadLock();
         }
      }
   }

   private void mistAffectedToPlayer() {
      if (this.getMap().getAllMistsThreadsafe().size() > 0) {
         for (AffectedArea mist : this.getMap().getAllMistsThreadsafe()) {
            if (!mist.isMobMist() && mist.getOwnerId() == this.getId()) {
               SecondaryStatEffect eff = SkillFactory.getSkill(mist.getSourceSkillID()).getEffect(mist.getSkillLevel());
               if (eff != null) {
                  switch (eff.getSourceId()) {
                     case 12121005:
                        Point pos = new Point(mist.getTruePosition());
                        Map<SecondaryStatFlag, Integer> statups = new HashMap<>();
                        statups.put(SecondaryStatFlag.indieDamR, Integer.valueOf(eff.getIndieDamR()));
                        statups.put(SecondaryStatFlag.indieBooster, eff.getIndieBooster());

                        for (MapleCharacter playerx : this.getMap().getPlayerInRect(pos, eff.getLt().x, eff.getLt().y,
                              eff.getRb().x, eff.getRb().y)) {
                           if (playerx.getId() != this.getId()
                                 && playerx.isAlive()
                                 && this.getParty() != null
                                 && playerx.getParty() != null
                                 && playerx.getParty().getId() == this.getParty().getId()) {
                              playerx.temporaryStatSet(12121005, eff.getLevel(), 3000, statups);
                           }
                        }
                        break;
                     case 21121068:
                        pos = mist.getPosition();
                        pos.x = pos.x + eff.getRb().x;

                        for (MapleCharacter player : this.getMap().getPlayerInRect(pos, eff.getLt().x, eff.getLt().y,
                              eff.getRb().x, eff.getRb().y)) {
                           if (player != null
                                 && player.isAlive()
                                 && (this.getParty() == null
                                       ? player.getId() == this.getId()
                                       : player.getParty() != null
                                             && player.getParty().getId() == this.getParty().getId())) {
                              int recoverHP = (int) (eff.getW() * (player.getStat().getCurrentMaxHp(player) * 0.01));
                              int recoverMP = (int) (eff.getW() * (player.getStat().getMaxMp() * 0.01));
                              player.addMPHP(recoverHP, recoverMP);
                              player.dispelDebuffs();
                           }
                        }
                        break;
                     case 36121007:
                        pos = new Point(mist.getTruePosition());
                        pos.x = pos.x + eff.getRb().x;

                        for (MapleCharacter playerxxx : this.getMap().getPlayerInRect(pos, eff.getLt().x, eff.getLt().y,
                              eff.getRb().x, eff.getRb().y)) {
                           if (playerxxx != null
                                 && playerxxx.isAlive()
                                 && (this.getParty() == null
                                       ? playerxxx.getId() == this.getId()
                                       : playerxxx.getParty() != null
                                             && playerxxx.getParty().getId() == this.getParty().getId())) {
                              playerxxx.reduceSkillColltimeByTimeCapsule(mist.getStartTime());
                           }
                        }
                        break;
                     case 162121043:
                        pos = new Point(mist.getTruePosition());

                        for (MapleCharacter playerxx : this.getMap().getPlayerInRect(pos, eff.getLt().x, eff.getLt().y,
                              eff.getRb().x, eff.getRb().y)) {
                           if (playerxx != null
                                 && playerxx.isAlive()
                                 && (this.getParty() == null
                                       ? playerxx.getId() == this.getId()
                                       : playerxx.getParty() != null
                                             && playerxx.getParty().getId() == this.getParty().getId())) {
                              statups = new HashMap<>();
                              statups.put(SecondaryStatFlag.indieStance, eff.getIndieStance());
                              statups.put(SecondaryStatFlag.indieBDR, Integer.valueOf(eff.getIndieBdR()));
                              statups.put(SecondaryStatFlag.indieCD, eff.getX());
                              playerxx.temporaryStatSet(162121043, eff.getLevel(), 3000, statups, false);
                              if (playerxx.getId() == this.getId()
                                    && (this.getLastBreathtakinglyLargeTreeTime() == 0L
                                          || System.currentTimeMillis()
                                                - this.getLastBreathtakinglyLargeTreeTime() >= eff.getV2() * 1000)) {
                                 this.dispelDebuffs();
                                 this.setLastBreathtakinglyLargeTreeTime(System.currentTimeMillis());
                              }
                           }
                        }

                        for (MapleMonster mob : this.getMap().getMobsInRect(pos, eff.getLt().x, eff.getLt().y,
                              eff.getRb().x, eff.getRb().y)) {
                           if (mob != null && mob.isAlive()) {
                              mob.applyStatus(
                                    mist.getOwner(),
                                    new MobTemporaryStatEffect(MobTemporaryStatFlag.PDR, -eff.getS(), 162121043, null,
                                          false),
                                    false,
                                    5000L,
                                    false,
                                    eff);
                           }
                        }
                        break;
                     case 400001017:
                        pos = new Point(mist.getTruePosition());

                        for (MapleCharacter playerxxxx : this.getMap().getPlayerInRect(pos, eff.getLt().x,
                              eff.getLt().y, eff.getRb().x, eff.getRb().y)) {
                           if (playerxxxx != null
                                 && playerxxxx.isAlive()
                                 && (this.getParty() == null
                                       ? playerxxxx.getId() == this.getId()
                                       : playerxxxx.getParty() != null
                                             && playerxxxx.getParty().getId() == this.getParty().getId())) {
                              playerxxxx.temporaryStatSet(400001017, 3000, SecondaryStatFlag.indieStatRBasic,
                                    eff.getIndieStatRBasic());
                           }
                        }

                        for (MapleMonster mobx : this.getMap().getMobsInRect(pos, eff.getLt().x, eff.getLt().y,
                              eff.getRb().x, eff.getRb().y)) {
                           if (mobx != null && mobx.isAlive()) {
                              mobx.applyStatus(
                                    mist.getOwner(),
                                    new MobTemporaryStatEffect(MobTemporaryStatFlag.MULTI_PMDR2, eff.getW(), 400001017,
                                          null, false),
                                    false,
                                    5000L,
                                    false,
                                    eff);
                           }
                        }
                  }
               }
            }
         }
      }
   }

   public void reduceSkillColltimeByTimeCapsule(long timeCapsuleStart) {
      long now = System.currentTimeMillis();
      if (this.lastTimeCapsuleTime < timeCapsuleStart) {
         this.lastTimeCapsuleTime = now;
      } else {
         int elapsed = (int) (now - this.lastTimeCapsuleTime);

         for (MapleCoolDownValueHolder cooldown : this.getCooldowns()) {
            if (GameConstants.isResettableCooltimeSkill(cooldown.skillId)) {
               this.changeCooldown(cooldown.skillId, -elapsed);
            }
         }
      }
   }

   private void handleAfterSecondaryStatCanceled(SecondaryStatFlag ssf) {
      SecondaryStat secondaryStat = this.getSecondaryStat();
      if (ssf == SecondaryStatFlag.Dominion) {
         SecondaryStatEffect effect = this.getBuffedEffect(SecondaryStatFlag.ShadowMomentum);
         if (effect != null) {
            this.temporaryStatSet(SecondaryStatFlag.ShadowMomentum, effect.getSourceId(), effect.getDuration(),
                  effect.getX());
         }
      }

      if (ssf == SecondaryStatFlag.TimeCurse && this.getMap() instanceof Field_Papulatus) {
         Field_Papulatus f = (Field_Papulatus) this.getMap();
         f.applyTimeCurseByUser(this, secondaryStat.TimeCurseLevel);
      }

      if (secondaryStat.getReason(ssf) != 400031017 && secondaryStat.getReason(ssf) != 500061050
            || !this.isStateIrkallasWrath()) {
         if (secondaryStat.getReason(ssf) == 400011025) {
            this.send(
                  CField.getRegisterExtraSkill(
                        400011025, this.getPosition().x, this.getPosition().y, this.isFacingLeft(),
                        List.of(new ExtraSkillInfo(400011025, 0)), 0));
         }

         if (secondaryStat.getReason(ssf) == 22171080 && ssf == SecondaryStatFlag.RideVehicleExpire) {
            this.temporaryStatSet(SecondaryStatFlag.NotDamaged, 22171080, 1000, 1);
         }
      }
   }

   private void handleSecondaryStat() {
      SecondaryStat secondaryStat = this.getSecondaryStat();
      if (secondaryStat != null) {
         Flag992 flag = secondaryStat.getFlag();
         if (flag.hasBuff()) {
            boolean existIndie = false;
            Flag992 toRemoveFlag = new Flag992();
            List<SecondaryStatFlag> toRemove = new ArrayList<>();
            List<Integer> toRemoveSkillID = new ArrayList<>();

            for (int pos = 0; pos < 31; pos++) {
               for (int j = 0; j < 32; j++) {
                  int vl = 1 << j;
                  if ((flag.getFlags()[pos] & vl) != 0L) {
                     for (SecondaryStatFlag ssf : SecondaryStatFlag.values()) {
                        if (ssf.getBit() == 31 - j + 32 * (30 - pos)) {
                           if (!ssf.isIndie()) {
                              long till = this.getSecondaryStat().getTill(ssf);
                              if (till != -99999L && till <= System.currentTimeMillis()) {
                                 flag.removeFlag(ssf);
                                 toRemove.add(ssf);
                                 toRemoveFlag.setFlag(ssf);
                                 if (!this.diseases.containsKey(ssf)) {
                                    Integer reason = secondaryStat.getVarriableInt(ssf.name() + "Reason");
                                    if (!toRemoveSkillID.contains(reason)) {
                                       toRemoveSkillID.add(reason);
                                    }

                                    if (ssf == SecondaryStatFlag.Beholder) {
                                       this.removeSummonsByReset(reason);
                                    }
                                 }

                                 this.handleAfterSecondaryStatCanceled(ssf);
                                 secondaryStat.setVarriableLong(ssf.name() + "Till", -99999L);
                                 secondaryStat.setVarriableInt(ssf.name() + "Value", -99999);
                                 secondaryStat.setVarriableInt(ssf.name() + "Reason", -99999);
                                 secondaryStat.setVarriableInt(ssf.name() + "FromID", -99999);
                              }

                              if (ssf == SecondaryStatFlag.RWOverHeat) {
                                 Integer bulletCount = (Integer) this.getJobField("rwCylinderC");
                                 if (till != -99999L && till - System.currentTimeMillis() <= 2000L
                                       && bulletCount == 6) {
                                    this.setJobField("rwCylinderC", 0);
                                    this.temporaryStatSet(SecondaryStatFlag.RWCylinder, 37000009, Integer.MAX_VALUE, 1);
                                 }
                              }
                           } else {
                              List<IndieTemporaryStatEntry> entries = this.getIndieTemporaryStats(ssf);
                              if (entries != null && entries.size() > 0) {
                                 for (IndieTemporaryStatEntry entry : new ArrayList<>(entries)) {
                                    if (entry.getStartTime() + entry.getDuration() <= System.currentTimeMillis()) {
                                       existIndie = true;
                                       if (!toRemoveFlag.check(ssf)) {
                                          toRemoveFlag.setFlag(ssf);
                                          toRemove.add(ssf);
                                          toRemoveSkillID.add(entry.getSkillID());
                                       }

                                       entries.remove(entry);
                                       if (ssf == SecondaryStatFlag.indieSummon) {
                                          this.removeSummonsByReset(entry.getSkillID());
                                       }
                                    }
                                 }

                                 if (toRemoveFlag.hasBuff() && entries.isEmpty()) {
                                    flag.removeFlag(ssf);
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }

            if (toRemoveFlag.hasBuff()) {
               if (!existIndie) {
                  for (int pos = 30; pos >= 1; pos--) {
                     for (int jx = 31; jx >= 0; jx--) {
                        int vl = 1 << jx;
                        if ((toRemoveFlag.getFlags()[pos] & vl) != 0L) {
                           for (SecondaryStatFlag ssfx : SecondaryStatFlag.values()) {
                              if (ssfx.getBit() == 31 - jx + 32 * (30 - pos) && ssfx.isIndie()) {
                                 existIndie = true;
                                 break;
                              }
                           }
                        }
                     }

                     if (existIndie) {
                        break;
                     }
                  }
               }

               PacketEncoder packet = new PacketEncoder();
               packet.writeShort(SendPacketOpcode.CANCEL_BUFF.getValue());
               packet.write(existIndie);
               packet.write(existIndie);
               packet.write(0);
               toRemoveFlag.encode(packet);
               if (!existIndie) {
                  packet.writeInt(0);
               } else {
                  secondaryStat.encodeIndieTemporaryStats(packet, toRemoveFlag, false);
                  packet.write(4);
                  packet.write(1);
               }

               this.send(packet.getPacket());

               for (int skillID : toRemoveSkillID) {
                  this.deregisterSecondaryStats(skillID, true);
               }

               this.deregisterSecondaryStats(toRemove, true);
               this.getMap().broadcastMessage(this, CWvsContext.BuffPacket.remoteTemporaryStatReset(this, toRemoveFlag),
                     false);
            }
         }
      }
   }

   private void updateUnion() {
      if (this.currentUnion != null) {
         if (this.field_union == null) {
            if (this.lastUpdateUnionRaid == 0L || System.currentTimeMillis() - this.lastUpdateUnionRaid >= 30000L) {
               this.updateUnionRaid();
               this.lastUpdateUnionRaid = System.currentTimeMillis();
            }
         } else {
            this.field_union.updateRaid();
         }
      }
   }

   public int getAutoChargeSkillID() {
      return this.autoChargeSkillID;
   }

   public void setAutoChargeSkillID(int autoChargeSkillID) {
      this.autoChargeSkillID = autoChargeSkillID;
   }

   public int getAutoChargeMaxStack() {
      return this.autoChargeMaxStack;
   }

   public void setAutoChargeMaxStack(int autoChargeMaxStack) {
      this.autoChargeMaxStack = autoChargeMaxStack;
   }

   public int getAutoChargeCycle() {
      return this.autoChargeCycle;
   }

   public void setAutoChargeCycle(int autoChargeCycle) {
      this.autoChargeCycle = autoChargeCycle;
   }

   public long getLastAutoChargeTime() {
      return this.lastAutoChargeTime;
   }

   public void setLastAutoChargeTime(long lastAutoChargeTime) {
      this.lastAutoChargeTime = lastAutoChargeTime;
   }

   public int getAutoChargeStack() {
      return this.autoChargeStack;
   }

   public void setAutoChargeStack(int autoChargeStack) {
      this.autoChargeStack = autoChargeStack;
   }

   public long getLastHowlingGaleTime() {
      return this.lastHowlingGaleTime;
   }

   public void setLastHowlingGaleTime(long lastHowlingGaleTime) {
      this.lastHowlingGaleTime = lastHowlingGaleTime;
   }

   public long getLastHowlingGaleUseTime() {
      return this.lastHowlingGaleUseTime;
   }

   public void setLastHowlingGaleUseTime(long lastHowlingGaleUseTime) {
      this.lastHowlingGaleUseTime = lastHowlingGaleUseTime;
   }

   public boolean isTransferFieldOverlap() {
      return this.transferFieldOverlap;
   }

   public void setTransferFieldOverlap(boolean transferFieldOverlap) {
      this.transferFieldOverlap = transferFieldOverlap;
   }

   public int getStigma() {
      return this.stigma;
   }

   public void setStigma(int stigma) {
      this.stigma = stigma;
   }

   public void incStigma(int stigma) {
      this.stigma = Math.min(7, this.getStigma() + stigma);
      this.setStigmaMax(7);
      if (this.giveDebuff(SecondaryStatFlag.Stigma, this.getStigma(), 0, 2147483647L, 237, 0)) {
         PacketEncoder packet = new PacketEncoder();
         packet.writeShort(SendPacketOpcode.USER_STIGMA_EFFECT.getValue());
         packet.writeInt(this.getId());
         packet.write(1);
         this.getMap().broadcastMessage(packet.getPacket());
         this.send(CField.getSpecialMapSound("SoundEff/BossDemian/incStigma"));
         Field_Demian map = (Field_Demian) this.getMap();
         map.onStigmaStackChanged(this, this.getStigma());
      } else {
         this.stigma = Math.min(0, this.getStigma() - 1);
      }
   }

   public void resetStigma() {
      PacketEncoder packet = new PacketEncoder();
      packet.writeShort(SendPacketOpcode.USER_STIGMA_EFFECT.getValue());
      packet.writeInt(this.getId());
      packet.write(0);
      this.getMap().broadcastMessage(packet.getPacket());
      this.send(CField.getSpecialMapSound("SoundEff/BossDemian/decStigma"));
      this.setStigma(0);
      this.dispelDebuff(SecondaryStatFlag.Stigma);
   }

   public int getStigmaMax() {
      return this.stigmaMax;
   }

   public void setStigmaMax(int stigmaMax) {
      this.stigmaMax = stigmaMax;
   }

   public List<Integer> getMobZoneState() {
      return this.mobZoneState;
   }

   public void setMobZoneState(List<Integer> mobZoneState) {
      this.mobZoneState = mobZoneState;
   }

   public void addMobZoneState(int state) {
      this.mobZoneState.add(state);
   }

   public void clearMobZoneState() {
      this.mobZoneState.clear();
   }

   public int getRegisterTransferField() {
      return this.registerTransferField;
   }

   public void setRegisterTransferField(int registerTransferField) {
      if (registerTransferField == 15 || registerTransferField == 240000000) {
         registerTransferField = ServerConstants.TownMap;
      }

      this.registerTransferField = registerTransferField;
   }

   public long getRegisterTransferFieldTime() {
      return this.registerTransferFieldTime;
   }

   public void setRegisterTransferFieldTime(long registerTransferFieldTime) {
      this.registerTransferFieldTime = registerTransferFieldTime;
   }

   public String getRegisterTransferFieldPortal() {
      return this.registerTransferFieldPortal;
   }

   public void setRegisterTransferFieldPortal(String registerTransferFieldPortal) {
      this.registerTransferFieldPortal = registerTransferFieldPortal;
   }

   public void updateFrozenLink() {
      if (this.startFrozenLink && this.getMapId() == 993014200
            && this.checkInterval(this.lastUpdateFrozenLinkTime, 3000)) {
         int currentMobSize = this.getMap().getFrozenMonsterSize(this.getFrozenLinkSerialNumber());
         int max = (int) (this.frozenLinkX.length * this.frozenLinkY.length * 2.5);

         for (int next = 0; next < max - currentMobSize; next++) {
            int x = this.frozenLinkX[Randomizer.rand(0, this.frozenLinkX.length - 1)];
            int y = this.frozenLinkY[Randomizer.rand(0, this.frozenLinkY.length - 1)];
            MapleMonster mob = MapleLifeFactory.getMonster(this.getFrozenLinkMobID());
            this.getMap().spawnMonsterOnFrozenLink(mob, new Point(x, y), this.getFrozenLinkSerialNumber());
         }

         this.lastUpdateFrozenLinkTime = System.currentTimeMillis();
      }
   }

   public void doRegisterTransferField() {
      if (this.getRegisterTransferFieldTime() != 0L
            && System.currentTimeMillis() >= this.getRegisterTransferFieldTime()) {
         if (this.getRegisterTransferField() > 0) {
            if (this.getRegisterTransferField() == this.getMapId()) {
               this.setRegisterTransferField(0);
               this.setRegisterTransferFieldTime(0L);
               this.setRegisterTransferFieldPortal("");
               return;
            }

            if (!GameConstants.isIllium(this.getJob()) && this.getBuffedValue(SecondaryStatFlag.NewFlying) != null) {
               SecondaryStat stat = this.getSecondaryStat();
               this.setTempKeyValue("NewFlyingReason", stat.NewFlyingReason);
               this.setTempKeyValue("NewFlyingTime", stat.NewFlyingTill);
               this.setTempKeyValue("NewFlyingValue", stat.NewFlyingValue);
               this.temporaryStatReset(SecondaryStatFlag.NewFlying);
            }

            if (!this.isAlive()) {
               if (GameConstants.isBlaster(this.getJob())) {
                  this.setJobField("rwCylinderC", 0);
                  this.invokeJobMethod("setRWCylinder", 37000010, -1, -1, -1);
               }

               this.addHP(500000L, true);
               this.setPlayerDead(false);
            }

            if (this.getRegisterTransferFieldPortal().isEmpty()) {
               this.warp(this.getRegisterTransferField());
            } else {
               Field field = this.getWarpMap(this.getRegisterTransferField());
               Portal portal = field.getPortal(this.getRegisterTransferFieldPortal());
               this.changeMap(field, portal);
            }

            if (this.getRegisterTransferField() == 350160200
                  || this.getRegisterTransferField() == 350160240
                  || this.getRegisterTransferField() == 350160100
                  || this.getRegisterTransferField() == 350160140) {
               this.send(CField.UIPacket.setVansheeMode(0));
               this.send(CField.UIPacket.endInGameDirectionMode(1));
            }

            this.setTransferWhiteFadeOut(false);
            if (this.getMap().getFieldSetInstance() != null || this.getEventInstance() != null) {
               try {
                  this.checkExtraAbility();
               } catch (Exception var3) {
                  System.out.println("맵이동 엑어빌 체크 오류");
                  var3.printStackTrace();
               }
            }
         } else if (this.getRegisterTransferField() == -2) {
            Portal portal = this.getMap().getPortal(this.getRegisterTransferFieldPortal());
            if (portal != null) {
               this.send(CField.getTeleport(1, 0, portal.getId(), null));
            }

            this.setRegisterTransferField(0);
            this.setRegisterTransferFieldTime(0L);
            this.setRegisterTransferFieldPortal("");
         }
      }
   }

   public List<WeeklyQuest> getWeeklyQuest() {
      return this.weeklyQuests;
   }

   public void addWeeklyQuest(WeeklyQuest quest) {
      this.weeklyQuests.add(quest);
      this.setSaveFlag(this.getSaveFlag() | CharacterSaveFlag.WEEKLY_QUEST.getFlag());
   }

   public void removeWeeklyQuest(int questID) {
      new ArrayList<>(this.weeklyQuests).forEach(q -> {
         if (q.getQuestID() == questID) {
            this.weeklyQuests.remove(q);
         }
      });
      this.setSaveFlag(this.getSaveFlag() | CharacterSaveFlag.WEEKLY_QUEST.getFlag());
   }

   public int getAbsorbForce() {
      return this.absorbForce;
   }

   public void setAbsorbForce(int absorbForce) {
      this.absorbForce = absorbForce;
   }

   public void addAbsorbForce(int absorbForce) {
      this.absorbForce += absorbForce;
   }

   public WildHunterInfo getWildHunterInfo() {
      return this.wildHunterInfo;
   }

   public void setWildHunterInfo(WildHunterInfo wildHunterInfo) {
      this.wildHunterInfo = wildHunterInfo;
   }

   public long getLastTankConsumeMPTime() {
      return this.lastTankConsumeMPTime;
   }

   public void setLastTankConsumeMPTime(long lastTankConsumeMPTime) {
      this.lastTankConsumeMPTime = lastTankConsumeMPTime;
   }

   public long getLastTimeCapsuleTime() {
      return this.lastTimeCapsuleTime;
   }

   public void setLastTimeCapsuleTime(long lastTimeCapsuleTime) {
      this.lastTimeCapsuleTime = lastTimeCapsuleTime;
   }

   public void onRWCombination(int skillID, int delta) {
      int slv = 0;
      SecondaryStatEffect effect = null;
      if ((slv = this.getTotalSkillLevel(37120012)) > 0) {
         effect = SkillFactory.getSkill(37120012).getEffect(slv);
      } else if ((slv = this.getTotalSkillLevel(37110009)) > 0) {
         effect = SkillFactory.getSkill(37110009).getEffect(slv);
      }

      if (effect != null) {
         int v = 0;
         Integer value = this.getBuffedValue(SecondaryStatFlag.RWCombination);
         if (value != null) {
            v = value;
         }

         int n = Math.min(effect.getX(), v + delta);
         int duration = effect.getDuration(skillID == 37121003 ? 12000 : effect.getDuration(), this);
         Map<SecondaryStatFlag, Integer> statups = new HashMap<>();
         statups.put(SecondaryStatFlag.RWCombination, n);
         if (effect.getSourceId() == 37120012) {
            statups.put(SecondaryStatFlag.indieCR, effect.getQ() * n);
         }

         statups.put(SecondaryStatFlag.indieBooster, n / effect.getW() * -1);
         this.temporaryStatSet(effect.getSourceId(), slv, duration, statups);
      }
   }

   public void onSetRWBarrier(int originalDamage) {
      if (originalDamage > 0) {
         SecondaryStatEffect effect = null;
         int slv = 0;
         if ((slv = this.getTotalSkillLevel(37120009)) > 0) {
            effect = SkillFactory.getSkill(37120009).getEffect(slv);
         } else if ((slv = this.getTotalSkillLevel(37110008)) > 0) {
            effect = SkillFactory.getSkill(37110008).getEffect(slv);
         } else if ((slv = this.getTotalSkillLevel(37000006)) > 0) {
            effect = SkillFactory.getSkill(37000006).getEffect(slv);
         }

         if (effect != null) {
            int addShield = (int) (originalDamage * effect.getX() * 0.01);
            if (addShield <= 0) {
               return;
            }

            Integer value = this.getBuffedValue(SecondaryStatFlag.RWBarrier);
            int v = 0;
            if (value != null) {
               v = value;
            }

            this.temporaryStatSet(
                  37000006, Integer.MAX_VALUE, SecondaryStatFlag.RWBarrier,
                  (int) Math.min(this.getStat().getCurrentMaxHp(this), (long) (addShield + v)));
         }
      }
   }

   public int getCooltimeBySkillID(int skillID, int cool) {
      if (skillID == 31121003 && this.getBuffedValue(SecondaryStatFlag.InfinityForce) != null) {
         SecondaryStatEffect eff = SkillFactory.getSkill(31121003).getEffect(this.getTotalSkillLevel(31121003));
         if (eff != null) {
            cool = eff.getS() * 1000;
         }
      }

      if (skillID == 2121054 && this.getJob() != 212) {
         cool = 75000;
      }

      if (skillID == 1221011 && this.getTotalSkillLevel(1220051) > 0) {
         SecondaryStatEffect effect = SkillFactory.getSkill(1220051).getEffect(this.getTotalSkillLevel(1220051));
         if (effect != null) {
            cool -= (int) (effect.getCoolTimeR() * 0.01 * cool);
         }
      }

      if (skillID == 2121003 && this.getTotalSkillLevel(2120051) > 0) {
         SecondaryStatEffect effect = SkillFactory.getSkill(2120051).getEffect(this.getTotalSkillLevel(2120051));
         if (effect != null) {
            cool -= (int) (effect.getCoolTimeR() * 0.01 * cool);
         }
      }

      if (skillID == 3221007 && this.getTotalSkillLevel(3220051) > 0) {
         SecondaryStatEffect effect = SkillFactory.getSkill(3220051).getEffect(this.getTotalSkillLevel(3220051));
         if (effect != null) {
            cool -= (int) (effect.getCoolTimeR() * 0.01 * cool);
         }
      }

      if (skillID == 22140022 && this.getTotalSkillLevel(22170087) > 0) {
         SecondaryStatEffect effect = SkillFactory.getSkill(22170087).getEffect(this.getTotalSkillLevel(22170087));
         if (effect != null) {
            cool -= (int) (effect.getCoolTimeR() * 0.01 * cool);
         }
      }

      if (skillID == 22171063 && this.getTotalSkillLevel(22170090) > 0) {
         SecondaryStatEffect effect = SkillFactory.getSkill(22170090).getEffect(this.getTotalSkillLevel(22170090));
         if (effect != null) {
            cool -= (int) (effect.getCoolTimeR() * 0.01 * cool);
         }
      }

      if (skillID == 14121003 && this.getTotalSkillLevel(14120046) > 0) {
         SecondaryStatEffect effect = SkillFactory.getSkill(14120046).getEffect(this.getTotalSkillLevel(14120046));
         if (effect != null) {
            cool -= (int) (effect.getCoolTimeR() * 0.01 * cool);
         }
      }

      if (skillID == 37121003 && this.getTotalSkillLevel(37120051) > 0) {
         SecondaryStatEffect effect = SkillFactory.getSkill(37120051).getEffect(this.getTotalSkillLevel(37120051));
         if (effect != null) {
            cool -= (int) (effect.getCoolTimeR() * 0.01 * cool);
         }
      }

      if (skillID == 37121005 && this.getTotalSkillLevel(37120050) > 0) {
         SecondaryStatEffect effect = SkillFactory.getSkill(37120050).getEffect(this.getTotalSkillLevel(37120050));
         if (effect != null) {
            cool -= (int) (effect.getCoolTimeR() * 0.01 * cool);
         }
      }

      if (skillID == 24121005 && this.getTotalSkillLevel(24120044) > 0) {
         SecondaryStatEffect effect = SkillFactory.getSkill(24120044).getEffect(this.getTotalSkillLevel(24120044));
         if (effect != null) {
            cool -= (int) (effect.getCoolTimeR() * 0.01 * cool);
         }
      }

      if (skillID == 32121004 && this.getTotalSkillLevel(32120057) > 0) {
         SecondaryStatEffect effect = SkillFactory.getSkill(32120057).getEffect(this.getTotalSkillLevel(32120057));
         if (effect != null) {
            cool -= (int) (effect.getCoolTimeR() * 0.01 * cool);
         }
      }

      if (skillID == 32121006 && this.getTotalSkillLevel(32120063) > 0) {
         SecondaryStatEffect effect = SkillFactory.getSkill(32120063).getEffect(this.getTotalSkillLevel(32120063));
         if (effect != null) {
            cool -= (int) (effect.getCoolTimeR() * 0.01 * cool);
         }
      }

      if (skillID == 33001007 && this.getTotalSkillLevel(33120048) > 0) {
         SecondaryStatEffect effect = SkillFactory.getSkill(33120048).getEffect(this.getTotalSkillLevel(33120048));
         if (effect != null) {
            cool -= (int) (effect.getCoolTimeR() * 0.01 * cool);
         }
      }

      if (skillID == 35111002 && this.getTotalSkillLevel(35120045) > 0) {
         SecondaryStatEffect effect = SkillFactory.getSkill(35120045).getEffect(this.getTotalSkillLevel(35120045));
         if (effect != null) {
            cool -= (int) (effect.getCoolTimeR() * 0.01 * cool);
         }
      }

      if (skillID == 64121001 && this.getTotalSkillLevel(64120051) > 0) {
         SecondaryStatEffect effect = SkillFactory.getSkill(64120051).getEffect(this.getTotalSkillLevel(64120051));
         if (effect != null) {
            cool -= (int) (effect.getCoolTimeR() * 0.01 * cool);
         }
      }

      if (skillID == 65121002 && this.getTotalSkillLevel(65120048) > 0) {
         SecondaryStatEffect effect = SkillFactory.getSkill(65120048).getEffect(this.getTotalSkillLevel(65120048));
         if (effect != null) {
            cool -= (int) (effect.getCoolTimeR() * 0.01 * cool);
         }
      }

      if (skillID == 151121003 && this.getTotalSkillLevel(151120036) > 0) {
         SecondaryStatEffect effect = SkillFactory.getSkill(151120036).getEffect(this.getTotalSkillLevel(151120036));
         if (effect != null) {
            cool -= (int) (effect.getCoolTimeR() * 0.01 * cool);
         }
      }

      if ((skillID == 22110022 || skillID == 22110023 || skillID == 22111012)
            && this.getTotalSkillLevel(22170084) > 0) {
         SecondaryStatEffect effect = SkillFactory.getSkill(22170084).getEffect(this.getTotalSkillLevel(22170084));
         if (effect != null && cool > 0) {
            cool -= (int) (effect.getCoolTimeR() * 0.01 * cool);
         }
      }

      if ((skillID == 22140022 || skillID == 22141012) && this.getTotalSkillLevel(22170087) > 0) {
         SecondaryStatEffect effect = SkillFactory.getSkill(22170087).getEffect(this.getTotalSkillLevel(22170087));
         if (effect != null && cool > 0) {
            cool -= (int) (effect.getCoolTimeR() * 0.01 * cool);
         }
      }

      if (skillID == 22171063 && this.getTotalSkillLevel(22170090) > 0) {
         SecondaryStatEffect effect = SkillFactory.getSkill(22170090).getEffect(this.getTotalSkillLevel(22170090));
         if (effect != null && cool > 0) {
            cool -= (int) (effect.getCoolTimeR() * 0.01 * cool);
         }
      }

      if (skillID == 162111005 && this.getTotalSkillLevel(162120035) > 0) {
         SecondaryStatEffect effect = this.getSkillLevelData(162120035);
         if (effect != null && cool > 0) {
            cool -= (int) (effect.getCoolTimeR() * 0.01 * cool);
         }
      }

      if (GameConstants.isHexSkill(skillID) && this.getBuffedValue(SecondaryStatFlag.Oblivion) != null) {
         int u = this.getSkillLevelDataOne(154121043, SecondaryStatEffect::getU);
         double per = u / 100.0;
         cool = (int) (cool * per);
      }

      if (skillID == 80001805) {
         return 120000;
      } else {
         if (skillID == 151111003 || skillID == 151101013 || skillID == 151101006) {
            cool = 500;
         } else if (skillID == 151121002) {
            cool = 1500;
         }

         return cool;
      }
   }

   public void onJaguarLinkPassive() {
      int slv = 0;
      this.jaguarBuffR = 0;
      if ((slv = this.getTotalSkillLevel(33110014)) > 0) {
         SecondaryStatEffect effect = SkillFactory.getSkill(33110014).getEffect(slv);
         if (effect != null) {
            int count = 0;
            int flag = 0;

            for (int i = 1; i <= 9; i++) {
               String value = this.getOneInfoQuest(23008, String.valueOf(i));
               if (value != null && !value.isEmpty()) {
                  count++;
                  if (i == 6) {
                     flag++;
                  }

                  if ((i == 7 || i == 8) && this.jaguarBuffR < 10) {
                     flag += 2;
                     this.jaguarBuffR += 10;
                  }

                  if (i == 9) {
                     flag += 4;
                  }
               }
            }

            this.temporaryStatSet(33110014, Integer.MAX_VALUE, SecondaryStatFlag.JaguarCount, flag << 8 | count);
         }
      }
   }

   public Summoned getSummonJaguar() {
      Summoned var3;
      try {
         Iterator var1 = this.getSummonsReadLock().iterator();

         Summoned sum;
         do {
            if (!var1.hasNext()) {
               return null;
            }

            sum = (Summoned) var1.next();
         } while (!GameConstants.isWildHunterSummonJaguar(sum.getSkill()));

         var3 = sum;
      } finally {
         this.unlockSummonsReadLock();
      }

      return var3;
   }

   public boolean checkInterval(long lastTime, int term) {
      return lastTime == 0L || System.currentTimeMillis() - lastTime >= term;
   }

   public String getNickItemMsg() {
      return this.nickItemMsg;
   }

   public void setNickItemMsg(String nickItemMsg) {
      this.nickItemMsg = nickItemMsg;
   }

   public void addAffectedLimit(int skillID, long time) {
      if (!this.affectedLimits.containsKey(skillID)) {
         this.affectedLimits.put(skillID, time);
      }
   }

   public boolean checkAffectedLimit(int skillID) {
      if (!this.affectedLimits.containsKey(skillID)) {
         return true;
      } else {
         long time = this.affectedLimits.get(skillID);
         if (System.currentTimeMillis() >= time) {
            this.affectedLimits.remove(skillID);
            return true;
         } else {
            return false;
         }
      }
   }

   public Map<Integer, Long> getAffectedLimits() {
      return this.affectedLimits;
   }

   public boolean onEtherealForm() {
      SecondaryStatEffect effect = this.getBuffedEffect(SecondaryStatFlag.EtherealForm);
      if (effect == null) {
         return false;
      } else {
         if (!GameConstants.isNoManaJob(this.getJob())) {
            int x = effect.getX();
            this.healMP(-x);
         } else {
            int y = effect.getY();
            this.healHP(-y);
         }

         return true;
      }
   }

   private boolean isActiveEquilibrium() {
      return this.getBuffedValueDefault(SecondaryStatFlag.Larkness, -1) == 2;
   }

   public void sendCreateAreaDotInfo(int skillID, SecondaryStatEffect effect, Point point, Rect rect) {
      int key = nextCreateAreaDotInfoKey.addAndGet(1);
      PacketEncoder packet = new PacketEncoder();
      packet.writeShort(SendPacketOpcode.CREATE_AREA_DOT_INFO.getValue());
      packet.writeInt(key);
      packet.writeInt(skillID);
      packet.writeInt(0);
      rect.encode(packet);
      this.send(packet.getPacket());
   }

   public void setActiveNickItem(int itemID) {
      PacketEncoder packet = new PacketEncoder();
      packet.writeShort(SendPacketOpcode.SET_ACTIVE_NICK_ITEM.getValue());
      packet.writeInt(this.getId());
      packet.writeInt(itemID);
      packet.write(this.nickItemMsg != null);
      if (this.nickItemMsg != null) {
         packet.writeMapleAsciiString(this.nickItemMsg);
      }

      this.getMap().broadcastMessage(this, packet.getPacket(), false);
      if (itemID != 0) {
         this.updateOneInfo(19019, "id", String.valueOf(itemID));
         this.updateOneInfo(19019, "date", "2079/11/11 00:00:000");
         this.updateOneInfo(19019, "expired", "0");
      } else {
         this.updateOneInfo(19019, "id", "0");
         this.updateOneInfo(19019, "date", "");
         this.updateOneInfo(19019, "expired", "");
         packet = new PacketEncoder();
         packet.writeShort(SendPacketOpcode.NICK_SKILL_EXPIRED.getValue());
         packet.writeInt(0);
      }

      this.getStat().recalcLocalStats(this);
   }

   public void onExplodingThrowingBomb(PacketDecoder packet) {
      int count = packet.readInt();
      List<Integer> list = new ArrayList<>();

      for (int i = 0; i < count; i++) {
         list.add(packet.readInt());
      }

      if (this.getJob() == 212) {
         this.pendingExplodingThrowingBomb = list;
         PacketEncoder p = new PacketEncoder();
         p.writeShort(SendPacketOpcode.POISON_NOVA_EXPLODE.getValue());
         p.writeInt(this.getId());
         p.writeInt(list.size());
         list.forEach(p::writeInt);
         this.map.broadcastMessage(this, p.getPacket(), false);
      } else {
         this.sendExplodingThrowingBomb(list);
      }
   }

   public List<Integer> getPendingThrowingBomb() {
      return this.pendingExplodingThrowingBomb;
   }

   public void clearPendingThrowingBomb() {
      this.pendingExplodingThrowingBomb.clear();
   }

   public int getBulletItemID() {
      return this.bulletItemID;
   }

   public void setBulletItemID(int bulletItemID) {
      this.bulletItemID = bulletItemID;
   }

   public int getBulletPartyValue() {
      return this.bulletPartyValue;
   }

   public void setBulletPartyValue(int bulletPartyValue) {
      this.bulletPartyValue = bulletPartyValue;
   }

   public int getShadowServantChangePosCount() {
      return this.shadowServantChangePosCount;
   }

   public void setShadowServantChangePosCount(int shadowServantChangePosCount) {
      this.shadowServantChangePosCount = shadowServantChangePosCount;
   }

   public void sendExplodingThrowingBomb(List<Integer> bombs) {
      PacketEncoder packet = new PacketEncoder();
      packet.writeShort(SendPacketOpcode.EXPLODING_THROWING_BOMB_RESULT.getValue());
      packet.writeInt(this.getId());
      packet.writeInt(bombs.size());
      bombs.forEach(packet::writeInt);
      this.getMap().broadcastMessage(packet.getPacket());
   }

   public void applyBlessMark(SecondaryStatEffect effect, int inc, boolean full, int fullTime) {
      if (effect != null) {
         int blessMarkReason = effect.getSourceId();
         int max = effect.getX();
         int x = effect.getW();
         int y = effect.getZ();
         int z = effect.getY();
         int w = effect.getU();
         SecondaryStat ss = this.getSecondaryStat();
         if (ss != null) {
            Integer value = this.getBuffedValue(SecondaryStatFlag.BlessMark);
            int blessMarkValue = 0;
            if (value != null) {
               blessMarkValue = value;
            }

            if (!full) {
               blessMarkValue = Math.min(blessMarkValue + inc, max);
            } else {
               blessMarkValue = max;
            }

            int skillID = 152000009;
            SecondaryStatEffect blessMark = SkillFactory.getSkill(skillID).getEffect(blessMarkValue);
            if (blessMark != null) {
               int buffTime = blessMark.getDuration();
               if (full && fullTime > 0) {
                  buffTime = fullTime;
               }

               ss.BlessMarkIcon = blessMarkReason;
               ss.BlessMarkMax = max;
               int incVal = blessMark.getX() * x + blessMark.getY() * y + blessMark.getZ() * z + blessMark.getW() * w;
               Map<SecondaryStatFlag, Integer> flags = new HashMap<>();
               flags.put(SecondaryStatFlag.indiePAD, incVal);
               flags.put(SecondaryStatFlag.indieMAD, incVal);
               flags.put(SecondaryStatFlag.BlessMark, blessMarkValue);
               if (full) {
                  flags.put(SecondaryStatFlag.FullBlessMark, 1);
               }

               this.temporaryStatSet(skillID, blessMarkValue, buffTime, flags);
            }
         }
      }
   }

   public int getDemonDamAbsorbShieldX() {
      return this.demonDamAbsorbShieldX;
   }

   public void setDemonDamAbsorbShieldX(int demonDamAbsorbShieldX) {
      this.demonDamAbsorbShieldX = demonDamAbsorbShieldX;
   }

   public long getLastOrthros1() {
      return this.lastOrthros1;
   }

   public void setLastOrthros1(long lastOrthros1) {
      this.lastOrthros1 = lastOrthros1;
   }

   public long getLastOrthros2() {
      return this.lastOrthros2;
   }

   public void setLastOrthros2(long lastOrthros2) {
      this.lastOrthros2 = lastOrthros2;
   }

   public long getLastWildGrenadeTime() {
      return this.lastWildGrenadeTime;
   }

   public void setLastWildGrenadeTime(long lastWildGrenadeTime) {
      this.lastWildGrenadeTime = lastWildGrenadeTime;
   }

   public int getEnergyBurst() {
      return this.energyBurst;
   }

   public void setEnergyBurst(int energyBurst) {
      this.energyBurst = energyBurst;
   }

   public long getLastMagicCircuitTime() {
      return this.lastMagicCircuitTime;
   }

   public void setLastMagicCircuitTime(long lastMagicCircuitTime) {
      this.lastMagicCircuitTime = lastMagicCircuitTime;
   }

   public long getLastRuneStoneUseTime() {
      return this.lastRuneStoneUseTime;
   }

   public void setLastRuneStoneUseTime(long lastRuneStoneUseTime) {
      this.lastRuneStoneUseTime = lastRuneStoneUseTime;
   }

   public long getLastRandomAreaAttackTime() {
      return this.lastRandomAreaAttackTime;
   }

   public void setLastRandomAreaAttackTime(long lastRandomAreaAttackTime) {
      this.lastRandomAreaAttackTime = lastRandomAreaAttackTime;
   }

   public int getPhantomShroudCount() {
      return this.phantomShroudCount;
   }

   public void setPhantomShroudCount(int phantomShroudCount) {
      this.phantomShroudCount = phantomShroudCount;
   }

   public long getLastCloneAttackTime() {
      return this.lastCloneAttackTime;
   }

   public void setLastCloneAttackTime(long lastCloneAttackTime) {
      this.lastCloneAttackTime = lastCloneAttackTime;
   }

   public long getLastButterflyDream() {
      return this.lastButterflyDream;
   }

   public void setLastButterflyDream(long lastButterflyDream) {
      this.lastButterflyDream = lastButterflyDream;
   }

   public boolean isTransferWhiteFadeOut() {
      return this.transferWhiteFadeOut;
   }

   public void setTransferWhiteFadeOut(boolean transferWhiteFadeOut) {
      this.transferWhiteFadeOut = transferWhiteFadeOut;
   }

   public int getTteokgukPoint() {
      return this.tteokgukPoint;
   }

   public void setTteokgukPoint(int tteokgukPoint) {
      this.tteokgukPoint = tteokgukPoint;
   }

   public int getLastAttendacneDate() {
      return this.lastAttendacneDate;
   }

   public void setLastAttendacneDate(int lastAttendacneDate) {
      this.lastAttendacneDate = lastAttendacneDate;
   }

   public int getEtherPoint() {
      return this.etherPoint;
   }

   public void setEtherPoint(int etherPoint) {
      this.etherPoint = etherPoint;
   }

   public List<SecondAtom.Atom> getSecondAtoms() {
      return this.secondAtom;
   }

   public SecondAtom.Atom getSecondAtom(int key) {
      for (SecondAtom.Atom atom : new ArrayList<>(this.getSecondAtoms())) {
         if (atom.getKey() == key) {
            return atom;
         }
      }

      return null;
   }

   public void addSecondAtom(SecondAtom.Atom atom) {
      this.secondAtom.add(atom);
   }

   public MapleCabinet getCabinet() {
      return this.cabinetItem;
   }

   public void setCabinet(MapleCabinet cabinet) {
      this.cabinetItem = cabinet;
   }

   public int getFaceBaseColor() {
      return this.faceBaseColor;
   }

   public void setFaceBaseColor(int faceBaseColor) {
      this.faceBaseColor = faceBaseColor;
   }

   public int getFaceAddColor() {
      return this.faceAddColor;
   }

   public void setFaceAddColor(int faceAddColor) {
      this.faceAddColor = faceAddColor;
   }

   public int getFaceBaseProb() {
      return this.faceBaseProb;
   }

   public void setFaceBaseProb(int faceBaseProb) {
      this.faceBaseProb = faceBaseProb;
   }

   public int getSecondFaceBaseColor() {
      return this.secondFaceBaseColor;
   }

   public void setSecondFaceBaseColor(int secondFaceBaseColor) {
      this.secondFaceBaseColor = secondFaceBaseColor;
   }

   public int getSecondFaceAddColor() {
      return this.secondFaceAddColor;
   }

   public void setSecondFaceAddColor(int secondFaceAddColor) {
      this.secondFaceAddColor = secondFaceAddColor;
   }

   public int getSecondFaceBaseProb() {
      return this.secondFaceBaseProb;
   }

   public void setSecondFaceBaseProb(int secondFaceBaseProb) {
      this.secondFaceBaseProb = secondFaceBaseProb;
   }

   public boolean isExpiredPendant() {
      return this.expiredPendant;
   }

   public void setExpiredPendant(boolean expiredPendant) {
      this.expiredPendant = expiredPendant;
   }

   public boolean isPlayerDead() {
      return this.playerDead;
   }

   public void setPlayerDead(boolean playerDead) {
      this.playerDead = playerDead;
   }

   public int getWillMoonGauge() {
      return this.willMoonGauge;
   }

   public void setWillMoonGauge(int willMoonGauge) {
      this.willMoonGauge = willMoonGauge;
   }

   public long getNextDebuffIncHPTime() {
      return this.nextDebuffIncHPTime;
   }

   public void setNextDebuffIncHPTime(long nextDebuffIncHPTime) {
      this.nextDebuffIncHPTime = nextDebuffIncHPTime;
   }

   public int getWillCanRemoveWeb() {
      return this.willCanRemoveWeb;
   }

   public void setWillCanRemoveWeb(int willCanRemoveWeb) {
      this.willCanRemoveWeb = willCanRemoveWeb;
   }

   public long getNextEndRemoveWebTime() {
      return this.nextEndRemoveWebTime;
   }

   public void setNextEndRemoveWebTime(long nextEndRemoveWebTime) {
      this.nextEndRemoveWebTime = nextEndRemoveWebTime;
   }

   public long getLastWillAttackTime() {
      return this.lastWillAttackTime;
   }

   public void setLastWillAttackTime(long lastWillAttackTime) {
      this.lastWillAttackTime = lastWillAttackTime;
   }

   public long getLastDanceTime() {
      return this.lastDanceTime;
   }

   public void setLastDanceTime(long lastDanceTime) {
      this.lastDanceTime = lastDanceTime;
   }

   public int getBlackMageAttributes() {
      return this.blackMageAttributes;
   }

   public void setBlackMageAttributes(int blackMageAttributes) {
      this.blackMageAttributes = blackMageAttributes;
   }

   public long getLastHeartBeatTime() {
      return this.lastHeartBeatTime;
   }

   public void setLastHeartBeatTime(long lastHeartBeatTime) {
      this.lastHeartBeatTime = lastHeartBeatTime;
   }

   public boolean isJinHillahDeathCountOut() {
      return this.jinHillahDeathCountOut;
   }

   public void setJinHillahDeathCountOut(boolean jinHillahDeathCountOut) {
      this.jinHillahDeathCountOut = jinHillahDeathCountOut;
   }

   public void initJinHillahDeathCount() {
      this.jinHillahDeathCount = new ArrayList<>();

      for (int i = 0; i < 5; i++) {
         this.jinHillahDeathCount.add(new Field_JinHillah.JinHillahDeathCount());
      }
   }

   public List<Field_JinHillah.JinHillahDeathCount> getJinHillahDeathCount() {
      return this.jinHillahDeathCount;
   }

   public long getTotalDamage4PhaseBoss() {
      return this.totalDamage4PhaseBoss;
   }

   public void setTotalDamage4PhaseBoss(long totalDamage4PhaseBoss) {
      this.totalDamage4PhaseBoss = totalDamage4PhaseBoss;
   }

   public int getGuidedBulletTarget() {
      return this.guidedBulletTarget;
   }

   public void setGuidedBulletTarget(int guildedBulletTarget) {
      this.guidedBulletTarget = guildedBulletTarget;
   }

   public int getGuidedBulletUser() {
      return this.guidedBulletUser;
   }

   public void setGuidedBulletUser(int guidedBulletUser) {
      this.guidedBulletUser = guidedBulletUser;
   }

   public void checkExpiredCabinetItem() {
      MapleItemInformationProvider ii = MapleItemInformationProvider.getInstance();

      for (MapleCabinetItem item : new ArrayList<>(this.getCabinet().getItems())) {
         if (item.getExpiredTime() < System.currentTimeMillis()) {
            this.getCabinet().removeCabinetItem(item.getIndex());
            this.dropMessage(5, "[" + ii.getName(item.getItem().getItemId()) + "]이(가) 유효기간이 만료되어 메이플 보관함에서 삭제됩니다.");
            StringBuilder sb = new StringBuilder("캐비넷 아이템 기간 만료");
            LoggingManager.putLog(
                  new CabinetLog(this, item.getItem().getItemId(), item.getItem().getQuantity(),
                        CabinetLogType.ExpiredCabinetItem.getType(), sb));
         }
      }
   }

   public void removeSecondAtom(int key) {
      for (SecondAtom.Atom atom : new ArrayList<>(this.secondAtom)) {
         if (atom != null && atom.getKey() == key && this.secondAtom != null && this.secondAtom.contains(atom)) {
            this.secondAtom.remove(atom);
            if (atom.getType() == SecondAtom.SecondAtomType.WhereTheRiverFlows2) {
               this.temporaryStatResetBySkillID(162111002);
            }
         }
      }
   }

   public List<SecondAtom.Atom> getSecondAtomByType(SecondAtom.SecondAtomType type) {
      List<SecondAtom.Atom> atom = new ArrayList<>();

      for (SecondAtom.Atom a : new ArrayList<>(this.secondAtom)) {
         if (a.getType() == type) {
            atom.add(a);
         }
      }

      return atom;
   }

   public int getSecondAtomCount(SecondAtom.SecondAtomType type) {
      return this.getSecondAtomByType(type).size();
   }

   public final void serialBan(boolean byAdminClient) {
      try (Connection con = DBConnection.getConnection()) {
         PreparedStatement ps = con.prepareStatement("SELECT macs FROM accounts WHERE id = ?");
         ps.setLong(1, this.accountid);
         ResultSet rs = ps.executeQuery();
         String mac = "";
         String serialNumber = "";
         if (rs.next()) {
            String[] macData = rs.getString("macs").split(", ");
            mac = macData[0];
            serialNumber = macData[1];
            mac.trim();
            serialNumber.trim();
         }

         rs.close();
         ps.close();
         ps = con.prepareStatement("SELECT * FROM serialban WHERE `serialNumber` = ?");
         ps.setString(1, serialNumber);
         rs = ps.executeQuery();
         boolean already = false;
         if (rs.next()) {
            already = true;
         }

         rs.close();
         ps.close();
         if (serialNumber.equals("")) {
            System.out.println("[Warning] Not find Serial Number (Account ID : " + this.accountid + ")");
         } else if (!already) {
            ps = con.prepareStatement("INSERT INTO serialban VALUES (DEFAULT, ?)");
            ps.setString(1, serialNumber);
            ps.executeUpdate();
         }

         ps.close();
         ps = con.prepareStatement("SELECT * FROM macbans WHERE `mac` = ?");
         ps.setString(1, mac);
         rs = ps.executeQuery();
         already = false;
         if (rs.next()) {
            already = true;
         }

         rs.close();
         ps.close();
         if (mac.equals("")) {
            System.out.println("[Warning] Not find Mac Address (Account ID : " + this.accountid + ")");
         } else if (!already) {
            ps = con.prepareStatement("INSERT INTO macbans VALUES (DEFAULT, ?)");
            ps.setString(1, mac);
            ps.executeUpdate();
         }

         ps.close();
         if (byAdminClient) {
            String date = String.valueOf(GameConstants.getCurrentDate_NoTime());
            ps = con.prepareStatement("UPDATE accounts SET banned = ?, banreason = ? WHERE `id` = ?");
            ps.setInt(1, 0);
            ps.setString(2, "Banned by Admin Client on " + date);
            ps.setLong(3, this.accountid);
            ps.execute();
            ps.close();
         }
      } catch (SQLException var11) {
         var11.printStackTrace();
      }
   }

   public static final void serialBan(String name, boolean byAdminClient) {
      try (Connection con = DBConnection.getConnection()) {
         PreparedStatement ps = con.prepareStatement("SELECT macs FROM accounts WHERE `name` = ?");
         ps.setString(1, name);
         ResultSet rs = ps.executeQuery();
         String mac = "";
         String serialNumber = "";
         if (rs.next()) {
            try {
               String[] macData = rs.getString("macs").split(", ");
               mac = macData[0];
               serialNumber = macData[1];
               mac.trim();
               serialNumber.trim();
            } catch (NullPointerException var10) {
               var10.printStackTrace();
               System.out.println("MAC 주소 정보가 존재하지 않음");
               return;
            }
         }

         rs.close();
         ps.close();
         ps = con.prepareStatement("SELECT * FROM serialban WHERE `serialNumber` = ?");
         ps.setString(1, serialNumber);
         rs = ps.executeQuery();
         boolean already = false;
         if (rs.next()) {
            already = true;
         }

         rs.close();
         ps.close();
         if (serialNumber.equals("")) {
            System.out.println("[Warning] Not find serial Number (Account Name : " + name + ")");
         } else if (!already) {
            ps = con.prepareStatement("INSERT INTO serialban VALUES (DEFAULT, ?)");
            ps.setString(1, serialNumber);
            ps.executeUpdate();
         }

         ps.close();
         ps = con.prepareStatement("SELECT * FROM macbans WHERE `mac` = ?");
         ps.setString(1, mac);
         rs = ps.executeQuery();
         already = false;
         if (rs.next()) {
            already = true;
         }

         rs.close();
         ps.close();
         if (mac.equals("")) {
            System.out.println("[Warning] Not find Mac Address (Account Name : " + name + ")");
         } else if (!already) {
            ps = con.prepareStatement("INSERT INTO macbans VALUES (DEFAULT, ?)");
            ps.setString(1, mac);
            ps.executeUpdate();
         }

         ps.close();
         if (byAdminClient) {
            String date = String.valueOf(GameConstants.getCurrentDate_NoTime());
            ps = con.prepareStatement("UPDATE accounts SET banned = ?, banreason = ? WHERE `name` = ?");
            ps.setInt(1, 0);
            ps.setString(2, "Banned by Admin Client on " + date);
            ps.setString(3, name);
            ps.execute();
            ps.close();
         }
      } catch (SQLException var12) {
         var12.printStackTrace();
      }
   }

   public static final void unSerialBan(String name, boolean byAdminClient) {
      try (Connection con = DBConnection.getConnection()) {
         PreparedStatement ps = con.prepareStatement("SELECT macs FROM accounts WHERE name = ?");
         ps.setString(1, name);
         ResultSet rs = ps.executeQuery();
         String mac = "";
         String serialNumber = "";
         if (rs.next()) {
            String[] macData = rs.getString("macs").split(", ");
            mac = macData[0];
            serialNumber = macData[1];
         }

         rs.close();
         ps.close();
         if (serialNumber != null && !serialNumber.isEmpty() && !serialNumber.equals("00-00-00-00")) {
            ps = con.prepareStatement("DELETE FROM serialban WHERE serialNumber = ?");
            ps.setString(1, serialNumber);
            ps.executeUpdate();
            ps.close();
         } else {
            System.out.println("[Warnning] SerialBan Error (" + name + ")");
         }

         if (serialNumber != null && !serialNumber.isEmpty() && mac != null && !mac.isEmpty()
               && !mac.equals("00-00-00-00-00-00")) {
            ps = con.prepareStatement("DELETE FROM macbans WHERE mac = ?");
            ps.setString(1, mac);
            ps.executeUpdate();
            ps.close();
         } else {
            System.out.println("[Warnning] SerialBan Error (" + name + ")");
         }

         if (byAdminClient) {
            String date = String.valueOf(GameConstants.getCurrentDate_NoTime());
            ps = con.prepareStatement(
                  "UPDATE accounts SET tempban = DEFAULT, banned = ?, banreason = ? WHERE `name` = ?");
            ps.setInt(1, 0);
            ps.setString(2, "Ban Canceled by Admin Client on " + date);
            ps.setString(3, name);
            ps.execute();
            ps.close();
         }
      } catch (SQLException var10) {
         var10.printStackTrace();
      }
   }

   public void checkValidVCoreSkills() {
      for (Entry<Skill, SkillEntry> skills : new HashMap<>(this.getSkills()).entrySet()) {
         Skill skill = skills.getKey();
         if (skill != null) {
            if (skills.getKey().getId() >= 400000000) {
               boolean find = false;

               label53: for (VMatrixSlot slot : this.getVMatrixSlots()) {
                  Iterator var7 = this.getVCoreSkillsNoLock().iterator();

                  while (true) {
                     if (var7.hasNext()) {
                        VCore vcore = (VCore) var7.next();
                        if (vcore.getCoreId() != slot.getEquippedCore()
                              || vcore.getSkill1() != skill.getId() && vcore.getSkill2() != skill.getId()
                                    && vcore.getSkill3() != skill.getId()) {
                           continue;
                        }

                        find = true;
                     }

                     if (find) {
                        break label53;
                     }
                     break;
                  }
               }

               if (!find) {
                  this.changeSkillLevel_Skip(skill, 0, (byte) 0, false);
               }
            }

            if (skills.getValue().skillevel < 0) {
               this.changeSkillLevel_Skip(skill, 0, (byte) 0, false);
            }
         }
      }
   }

   public void addEtherPoint(int point) {
      if (point > 0 && this.getBuffedValue(SecondaryStatFlag.Restore) != null) {
         SecondaryStatEffect effect = this.getSkillLevelData(400011109);
         if (effect != null) {
            point = (int) (point + point * 0.01 * effect.getX());
         }
      }

      SecondaryStatEffect effect = this.getSkillLevelData(151120012);
      if (effect == null) {
         effect = this.getSkillLevelData(151100017);
      }

      if (effect != null) {
         int max = 300;
         if (effect.getSourceId() == 151120012) {
            max = 400;
         }

         int beforeEther = this.etherPoint;
         this.etherPoint = Math.min(max, this.etherPoint + point);
         if (this.getBuffedValue(SecondaryStatFlag.Creation) != null && beforeEther / 100 != this.etherPoint / 100) {
            this.tryCreateEtherCreation(this.getTruePosition(), false);
         }

         this.temporaryStatSet(151100017, Integer.MAX_VALUE, SecondaryStatFlag.Ether, this.etherPoint);
      }
   }

   public void tryCreateEtherCreation(Point pos, boolean disable) {
      int max = Math.min(3, this.getEtherPoint() / 100);

      for (SecondAtom.Atom atom : new ArrayList<>(this.getSecondAtoms())) {
         if (atom.getType().getType() >= SecondAtom.SecondAtomType.Creation1.getType()
               && atom.getType().getType() <= SecondAtom.SecondAtomType.Creation6.getType()) {
            this.getMap().removeSecondAtom(atom.getKey());
            this.removeSecondAtom(atom.getKey());
         }
      }

      if (!disable) {
         int type = SecondAtom.SecondAtomType.Creation1.getType();

         for (int i = 0; i < max; i++) {
            List<SecondAtom.Atom> atoms = new ArrayList<>();
            SecondAtom.Atom a = new SecondAtom.Atom(
                  this.getMap(), this.getId(), this.getJob(), SecondAtom.SN.getAndAdd(1),
                  SecondAtom.SecondAtomType.getSecondAtomType(type++), 0, null, pos);
            atoms.add(a);
            this.addSecondAtom(a);
            a = new SecondAtom.Atom(
                  this.getMap(), this.getId(), this.getJob(), SecondAtom.SN.getAndAdd(1),
                  SecondAtom.SecondAtomType.getSecondAtomType(type++), 1, null, pos);
            atoms.add(a);
            this.addSecondAtom(a);
            SecondAtom secondAtom = new SecondAtom(this.getId(), this.getJob(), atoms);
            this.getMap().createSecondAtom(secondAtom);
         }
      }
   }

   public void removeJaguarStorm() {
      List<Summoned> list;
      try {
         list = this.getSummonsReadLock();
      } finally {
         this.unlockSummonsReadLock();
      }

      list.stream().collect(Collectors.toList()).forEach(s -> {
         if (s.getSkill() >= 33001007 && s.getSkill() <= 33001015) {
            int index = this.getWildHunterInfo().getRidingType();
            int sum = GameConstants.getJaguarSkillByIndex(index);
            if (s.getSkill() != sum) {
               this.getMap().broadcastMessage(CField.SummonPacket.removeSummon(s, true));
               this.getMap().removeMapObject(s);
               this.removeVisibleMapObject(s);
               this.removeSummon(s);
            }
         }
      });
   }

   public void onJaguarStorm(SecondaryStatEffect effect, Point pos, int skillLevel, byte flip) {
      int index = this.getWildHunterInfo().getRidingType();
      int summonSize = effect.getY();
      List<Integer> indexs = new ArrayList<>();

      do {
         int r = Randomizer.rand(1, 9);
         if (!indexs.contains(r) && index != r) {
            indexs.add(r);
         }
      } while (indexs.size() < summonSize);

      for (Integer i : indexs) {
         int randX = Randomizer.rand(pos.x + effect.getLt().x, pos.x + effect.getRb().x);
         int randY = Randomizer.rand(pos.y + effect.getLt().y, pos.y + effect.getRb().y);
         Point p = this.getMap().calcDropPos(new Point(randX, randY), pos);
         Summoned summon = new Summoned(
               this, GameConstants.getJaguarSkillByIndex(i), skillLevel, p, SummonMoveAbility.WALK_STATIONARY, flip,
               effect.getDuration());
         summon.setSubJaguar(true);
         this.getMap().spawnSummon(summon, effect.getDuration(), false, false);
         this.addSummon(summon);
      }
   }

   public void onChargeWildGrenade(int curX) {
      PacketEncoder packet = new PacketEncoder();
      packet.writeShort(SendPacketOpcode.WILD_GRENADE_CHARGE_RESULT.getValue());
      SecondaryStatEffect effect = this.getSkillLevelData(400031032);
      if (effect != null) {
         if (this.checkInterval(this.getLastWildGrenadeTime(), effect.getW())) {
            this.setLastWildGrenadeTime(System.currentTimeMillis());
            int inc = 1;
            Integer value = this.getBuffedValue(SecondaryStatFlag.WildGrenade);
            int v = 0;
            if (value != null) {
               v = value;
            }

            if (v == curX) {
               int newGrenade = inc + curX;
               if (newGrenade <= effect.getZ()) {
                  this.temporaryStatSet(400031032, Integer.MAX_VALUE, SecondaryStatFlag.WildGrenade, newGrenade);
                  packet.write(1);
                  this.send(packet.getPacket());
                  return;
               }
            }
         }

         packet.write(0);
         this.send(packet.getPacket());
      }
   }

   private void updateEliteBossCurse() {
      boolean appliedRune = this.getBuffedValue(SecondaryStatFlag.RuneBlocked) != null;
      int cursedLevel = this.getMap().getEliteBossCurseLevel();
      if (this.eliteCurseMap == this.getMapId()) {
         if (this.eliteCurseLevel != cursedLevel) {
            this.eliteCurseLevel = cursedLevel;
            if (cursedLevel != 0 && !appliedRune) {
               this.send(CField.eliteBossCurse(cursedLevel));
            } else {
               this.send(CField.eliteBossCurse(-2));
            }
         }
      } else {
         this.eliteCurseMap = this.getMapId();
         this.eliteCurseLevel = cursedLevel;
         if (cursedLevel != 0 && !appliedRune) {
            this.send(CField.eliteBossCurse(cursedLevel));
         } else {
            this.send(CField.eliteBossCurse(-2));
         }
      }
   }

   public boolean isUnequipShield() {
      return this.unequipShield;
   }

   public void setUnequipShield(boolean unequipShield) {
      this.unequipShield = unequipShield;
   }

   public AntiMacro getAntiMacro() {
      return this.antiMacro;
   }

   public void setAntiMacro(AntiMacro antiMacro) {
      this.antiMacro = antiMacro;
   }

   public List<Integer> parsePartyFlag(int partyFlag) {
      Party party = this.getParty();
      List<Integer> ret = new ArrayList<>();
      if (party != null) {
         for (PartyMemberEntry mpc : party.getPartyMember().getPartyMemberList()) {
            if (mpc.isOnline() && mpc.getChannel() == this.getClient().getChannel()
                  && mpc.getFieldID() == this.getMapId()) {
               if (partyFlag > 0) {
                  ret.add(mpc.getId());
               }

               partyFlag = (byte) (partyFlag >> 1);
            }
         }
      } else if (partyFlag == 128) {
         ret.add(this.getId());
      }

      return ret;
   }

   public void applySpiritOfFreedom() {
      Item item = this.getInventory(MapleInventoryType.EQUIPPED).getItem((short) -21);
      int inc = 0;
      if (item != null) {
         if (DBConfig.isGanglim) {
            if (item.getItemId() >= 1142093 && item.getItemId() <= 1142099) {
               switch (item.getItemId()) {
                  case 1142093:
                     inc = 3;
                     break;
                  case 1142094:
                     inc = 5;
                     break;
                  case 1142095:
                     inc = 6;
                     break;
                  case 1142096:
                     inc = 8;
                     break;
                  case 1142097:
                     inc = 9;
                     break;
                  case 1142098:
                     inc = 9;
                     break;
                  case 1142099:
                     inc = 10;
               }
            }
         } else if (item.getItemId() >= 1142095 && item.getItemId() <= 1142099
               || item.getItemId() == 1142329
               || item.getItemId() >= 1142442 && item.getItemId() <= 1142444
               || item.getItemId() == 1142569
               || item.getItemId() >= 1142242 && item.getItemId() <= 1142247
               || item.getItemId() == 1142107
               || item.getItemId() == 1142108
               || item.getItemId() == 1142109
               || item.getItemId() == 1142110) {
            switch (item.getItemId()) {
               case 1142097:
                  inc = 3;
                  break;
               case 1142098:
                  inc = 4;
                  break;
               case 1142099:
                  inc = 5;
                  break;
               case 1142107:
                  inc = 12;
                  break;
               case 1142108:
                  inc = 13;
                  break;
               case 1142109:
                  inc = 14;
                  break;
               case 1142110:
                  inc = 15;
                  break;
               case 1142242:
               case 1142243:
               case 1142244:
               case 1142245:
               case 1142246:
               case 1142247:
                  inc = 20;
                  break;
               case 1142329:
                  inc = 6;
                  break;
               case 1142442:
                  inc = 7;
                  break;
               case 1142443:
                  inc = 8;
                  break;
               case 1142444:
                  inc = 9;
                  break;
               case 1142569:
                  inc = 10;
            }
         }
      }

      if (this.getStat().reviveInvincibleTime > 0) {
         inc += this.getStat().reviveInvincibleTime;
      }

      int skillID = 80000329;
      int skillLevel = this.getTotalSkillLevel(80000329);
      if (skillLevel > 0) {
         SecondaryStatEffect eff = SkillFactory.getSkill(skillID).getEffect(skillLevel);
         this.temporaryStatSet(SecondaryStatFlag.NotDamaged, skillID, eff.getX() * 1000 + inc * 1000, skillLevel, 1,
               false);
      } else if (inc > 0) {
         this.temporaryStatSet(SecondaryStatFlag.NotDamaged, 80000329, inc * 1000, 1, 1, false);
      }
   }

   public SecondaryStatEffect getSkillLevelData(int skillID) {
      Skill skill = SkillFactory.getSkill(skillID);
      return skill == null ? null : skill.getEffect(this.getTotalSkillLevel(skillID));
   }

   public int getSkillLevelDataOne(int skillID, MapleCharacter.Function func) {
      SecondaryStatEffect eff = this.getSkillLevelData(skillID);
      if (eff == null) {
         return 0;
      } else {
         Object object = func.get(eff);
         if (object instanceof Short) {
            return (Short) object;
         } else {
            return object instanceof Integer ? (Integer) object : (Integer) func.get(eff);
         }
      }
   }

   public List<MapleCharacter> getPartyMembers() {
      if (this.getParty() == null) {
         return null;
      } else {
         List<MapleCharacter> chars = new LinkedList<>();

         for (PartyMemberEntry chr : this.getParty().getPartyMember().getPartyMemberList()) {
            for (GameServer channel : GameServer.getAllInstances()) {
               MapleCharacter ch = channel.getPlayerStorage().getCharacterById(chr.getId());
               if (ch != null) {
                  chars.add(ch);
               }
            }
         }

         return chars;
      }
   }

   public List<MapleCharacter> getPartyMembersSameMap() {
      if (this.getParty() == null) {
         return null;
      } else {
         List<MapleCharacter> chars = new LinkedList<>();

         for (PartyMemberEntry partychr : this.getParty().getPartyMember().getPartyMemberList()) {
            for (MapleCharacter chr : this.getMap().getCharacters()) {
               if (chr.getId() == partychr.getId()) {
                  chars.add(chr);
               }
            }
         }

         return chars;
      }
   }

   public int getPartyMemberSize() {
      return this.getParty() == null ? 1 : this.getParty().getPartyMemberList().size();
   }

   public int getDayOfTheWeek() {
      SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
      Calendar CAL = new GregorianCalendar(Locale.KOREA);
      String fDate = sdf.format(CAL.getTime());
      String[] dates = fDate.split("-");
      int year = Integer.parseInt(dates[0]);
      int month = Integer.parseInt(dates[1]);
      int day = Integer.parseInt(dates[2]);
      int zellerMonth = 0;
      int zellerYear = 0;
      if (month < 3) {
         zellerMonth = month + 12;
         zellerYear = year - 1;
      } else {
         zellerMonth = month;
         zellerYear = year;
      }

      int computation = day + 26 * (zellerMonth + 1) / 10 + zellerYear + zellerYear / 4 + 6 * (zellerYear / 100)
            + zellerYear / 400;
      return computation % 7;
   }

   public boolean tryAntiMacro(AntiMacroType type, MapleCharacter from) {
      if (this.getClient().isOverseasUser()) {
         if (from != null) {
            from.dropMessage(1, "최근에 거짓말탐지기를 통과하여 사용할 수 없습니다.");
         }

         return false;
      } else if (this.getClient().isGm()) {
         return false;
      } else {
         AntiMacro macro = this.getAntiMacro();
         if (macro == null) {
            macro = new AntiMacro();
            this.antiMacro = macro;
         }

         int result = 0;
         macro.renew();
         macro.setLastActiveMacroTime(System.currentTimeMillis());
         macro.setMacroType(type);
         macro.getTrying().set(1);
         if (from != null) {
            macro.setFromID(from.getId());
            this.dropMessage(5, from.getName() + "님이 거짓말 탐지기를 요청하였습니다.");
         }

         this.setStartActiveMacroTime(System.currentTimeMillis());
         return this.sendAntiMacro(from);
      }
   }

   public boolean sendAntiMacro(MapleCharacter from) {
      AntiMacro macro = this.getAntiMacro();
      if (macro != null) {
         PacketEncoder packet = new PacketEncoder();
         packet.writeShort(SendPacketOpcode.ANTI_MACRO_RESULT.getValue());
         packet.writeInt(-2118368605);
         packet.writeInt(14);
         packet.writeInt(-223056830);
         packet.writeInt(-184195385);
         packet.writeInt(-300260500);
         packet.writeShort(24834);
         packet.write(macro.getTrying().get());
         BufferedImage image = macro.getCaptcha().getImage();
         if (image == null) {
            return false;
         } else {
            byte[] images = HexTool.getByteArrayFromImage(image);
            packet.writeInt(images.length);
            packet.encodeBuffer(images);
            packet.writeInt(-285631942);
            packet.writeInt(4);
            packet.writeInt(-1668046500);
            this.send(packet.getPacket());
            return true;
         }
      } else {
         if (from != null) {
            from.dropMessage(1, "알 수 없는 오류가 발생하여 사용할 수 없습니다.");
         }

         return false;
      }
   }

   public void onFailedAntiMacro(AntiMacro macro, AntiMacroFailedType type) {
      this.antiMacro = macro;
      macro.getTrying().addAndGet(1);
      if (macro.getTrying().get() < 5 && type == AntiMacroFailedType.InputFailed) {
         macro.renew();
         this.sendAntiMacro(null);
      } else {
         this.updateOneInfo(19770, "count", String.valueOf(this.getOneInfoQuestInteger(19770, "count") + 1));
         String reason = "";
         switch (type) {
            case Disconnection:
               this.updateOneInfo(19770, "reason", "[" + this.getName() + "] 캐릭터가 거짓말 탐지기 진행중에 채널을 변경하셨거나 게임을 종료하셨네요.");
               reason = "채널 변경 혹은 게임 종료";
               break;
            case InputFailed:
               this.updateOneInfo(19770, "reason", "[" + this.getName() + "] 캐릭터가 거짓말 탐지기에 오답을 입력하셨네요.");
               reason = "오답 입력";
               break;
            case Timeout:
               this.updateOneInfo(19770, "reason", "[" + this.getName() + "] 캐릭터가 거짓말 탐지기 입력에 너무 오랜 시간이 걸리셨네요.");
               reason = "시간 초과";
         }

         int r = this.getMap().getReturnMapId();
         if (r == 999999999) {
            r = this.getMap().getForcedReturnId();
         }

         if (r == 999999999) {
            r = this.getMapId();
         }

         this.updateOneInfo(19770, "returnID", String.valueOf(r));
         this.updateOneInfo(19770, "elapsed", "0");
         this.updateOneInfo(19770, "active", "1");
         StringBuilder sb = new StringBuilder();
         sb.append("매크로 결과 : 실패");
         sb.append(" (계정ID : ");
         sb.append(this.getClient().getAccountName());
         sb.append(", 캐릭터 이름 : ");
         sb.append(this.getName());
         sb.append(", 실패 사유 : ");
         sb.append(this.getOneInfo(19770, "reason"));
         sb.append(")");
         LoggingManager.putLog(new MacroLog(this, 2, type.getType(), sb));
         this.setStartActiveMacroTime(0L);
         Center.Broadcast.broadcastGMMessage(
               CWvsContext.serverNotice(5,
                     this.getClient().getChannel() + "채널에서 " + this.getName() + "이(가) 매크로로 판명되었습니다. 사유 : " + reason));
         this.antiMacro.setCaptcha(null);
         this.antiMacro.setFromID(0);
         this.antiMacro.getTrying().set(0);
      }
   }

   public void onSuccessAntiMacro(AntiMacro macro) {
      PacketEncoder packet = new PacketEncoder();
      packet.writeShort(SendPacketOpcode.ANTI_MACRO_RESULT.getValue());
      packet.writeInt(-348030994);
      packet.writeInt(14);
      packet.writeInt(-1720429670);
      packet.writeInt(611892008);
      packet.writeInt(1399462496);
      packet.writeShort(24746);
      this.send(packet.getPacket());
      if (macro.getFromID() != 0) {
         MapleCharacter player = null;

         for (GameServer gs : GameServer.getAllInstances()) {
            for (MapleCharacter p : gs.getPlayerStorage().getAllCharacters()) {
               if (p.getId() == macro.getFromID()) {
                  player = p;
                  break;
               }
            }
         }

         if (player != null) {
            player.dropMessage(
                  5,
                  this.getName()
                        + "님이 거짓말 탐지기 테스트를 "
                        + (System.currentTimeMillis() - this.getStartActiveMacroTime()) / 1000L
                        + "초동안 "
                        + macro.getTrying().get()
                        + "회 시도하여 통과하였습니다.");
         }
      }

      StringBuilder sb = new StringBuilder();
      sb.append("매크로 결과 : 통과");
      sb.append(" (계정ID : ");
      sb.append(this.getClient().getAccountName());
      sb.append(", 캐릭터 이름 : ");
      sb.append(this.getName());
      sb.append(")");
      LoggingManager.putLog(new MacroLog(this, 1, 0, sb));
      this.antiMacro.setCaptcha(null);
      this.antiMacro.setFromID(0);
      this.antiMacro.getTrying().set(0);
      this.setStartActiveMacroTime(0L);
   }

   public void checkQuestData() {
      SimpleDateFormat sdf_ = new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss");
      Calendar calendar = new GregorianCalendar(Locale.KOREA);
      String date = sdf_.format(calendar.getTime());
      String[] dates = date.split("-");
      int year = Integer.parseInt(dates[0]);
      int month = Integer.parseInt(dates[1]);
      int day = Integer.parseInt(dates[2]);
      if (year == 2021 && month == 9 && day < 30 && this.getOneInfoQuestInteger(1234569, "boss_check") == 0) {
         PreparedStatement ps = null;
         ResultSet rs = null;

         try (Connection con = DBConnection.getConnection()) {
            ps = con
                  .prepareStatement("SELECT * FROM `boss_log` WHERE `date` >= \"2021-09-23 00:00:00\" and `name` = ?");
            ps.setString(1, this.getName());
            rs = ps.executeQuery();
            boolean check1 = false;
            boolean check2 = false;
            boolean check3 = false;
            boolean check4 = false;
            boolean check5 = false;
            boolean check6 = false;
            boolean check7 = false;
            boolean check8 = false;
            boolean check9 = false;
            boolean check10 = false;
            boolean check11 = false;
            boolean check12 = false;
            boolean check13 = false;
            boolean check14 = false;
            boolean check15 = false;
            boolean check16 = false;

            while (rs.next()) {
               String bossName = rs.getString("bossname");
               if (!bossName.contains("연습")) {
                  if (bossName.contains("스우")) {
                     check1 = true;
                  }

                  if (bossName.contains("데미안")) {
                     check2 = true;
                  }

                  if (bossName.contains("루시드")) {
                     check3 = true;
                  }

                  if (bossName.contains("진힐라")) {
                     check4 = true;
                  }

                  if (bossName.contains("파풀라투스")) {
                     check5 = true;
                  }

                  if (bossName.contains("자쿰")) {
                     check6 = true;
                  }

                  if (bossName.contains("듄켈")) {
                     check10 = true;
                  }

                  if (bossName.contains("더스크")) {
                     check11 = true;
                  }

                  if (bossName.contains("윌")) {
                     check16 = true;
                  }
               }
            }

            if (!check1) {
               this.updateOneInfo(1234569, "swoo_clear", "");
               this.updateOneInfo(1234569, "normal_swoo_clear", "");
               this.updateOneInfo(1234569, "hard_swoo_clear", "");
            }

            if (!check2) {
               this.updateOneInfo(1234569, "demian_clear", "");
               this.updateOneInfo(1234569, "normal_demian_clear", "");
               this.updateOneInfo(1234569, "hard_demian_clear", "");
            }

            if (!check3) {
               this.updateOneInfo(1234569, "lucid_clear", "");
               this.updateOneInfo(1234569, "normal_lucid_clear", "");
               this.updateOneInfo(1234569, "hard_lucid_clear", "");
            }

            if (!check4) {
               this.updateOneInfo(1234569, "jinhillah_clear", "");
            }

            if (!check5) {
               this.updateOneInfo(1234569, "chaos_papulatus_clear", "");
               if (!DBConfig.isGanglim) {
                  this.updateOneInfo(1234569, "chaos_papulatus_clear_single", "");
                  this.updateOneInfo(1234569, "chaos_papulatus_clear_multi", "");
               }
            }

            if (check6) {
               this.updateOneInfo(1234569, "chaos_zakum_clear", "");
               this.updateOneInfo(QuestExConstants.ChaosZakum.getQuestID(), "eNum", "0");
            }

            if (!check7) {
               this.updateOneInfo(1234569, "chaos_pierre_clear", "");
               this.updateOneInfo(QuestExConstants.ChaosPierre.getQuestID(), "eNum", "0");
            }

            if (!check8) {
               this.updateOneInfo(1234569, "chaos_b_queen_clear", "");
               this.updateOneInfo(QuestExConstants.ChaosCrimsonQueen.getQuestID(), "eNum", "0");
            }

            if (!check9) {
               this.updateOneInfo(1234569, "hard_magnus_clear", "");
               this.updateOneInfo(QuestExConstants.HardMagnus.getQuestID(), "eNum", "0");
            }

            if (!check10) {
               this.updateOneInfo(1234569, "dunkel_clear", "");
               this.updateOneInfo(1234589, "dunkel_clear", "");
               this.updateOneInfo(1234569, "hard_dunkel_clear", "");
               this.updateOneInfo(1234569, "normal_dunkel_clear", "");
            }

            if (!check11) {
               this.updateOneInfo(1234589, "dusk_clear", "");
               this.updateOneInfo(1234569, "chaos_dusk_clear", "");
               this.updateOneInfo(1234569, "normal_dusk_clear", "");
            }

            if (!check12) {
               this.updateOneInfo(QuestExConstants.ChaosPinkBeen.getQuestID(), "eNum", "0");
            }

            if (!check13) {
               this.updateOneInfo(QuestExConstants.Cygnus.getQuestID(), "eNum", "0");
            }

            if (!check14) {
               this.updateOneInfo(1234569, "chaos_banban_clear", "");
               this.updateOneInfo(QuestExConstants.ChaosVonBon.getQuestID(), "eNum", "0");
            }

            if (!check15) {
               this.updateOneInfo(1234569, "chaos_velum_clear", "");
               this.updateOneInfo(QuestExConstants.ChaosVellum.getQuestID(), "eNum", "0");
            }

            if (!check16) {
               this.updateOneInfo(1234569, "will_clear", "");
               this.updateOneInfo(1234569, "hard_will_clear", "");
               this.updateOneInfo(1234569, "normal_will_clear", "");
            }
         } catch (SQLException var42) {
            var42.printStackTrace();
         } finally {
            try {
               if (ps != null) {
                  ps.close();
                  PreparedStatement var77 = null;
               }

               if (rs != null) {
                  rs.close();
                  ResultSet var80 = null;
               }
            } catch (SQLException var38) {
            }
         }

         this.updateOneInfo(1234569, "boss_check", "1");
      }

      int v = this.getOneInfoQuestInteger(501046, "start");
      if (v <= 0) {
         this.updateOneInfo(501046, "start", "1");
         this.updateOneInfo(501045, "reward0", "0");
         this.updateOneInfo(501045, "reward1", "0");
         this.updateOneInfo(501045, "reward2", "0");
         this.updateOneInfo(501045, "point", "0");
         this.updateOneInfo(501045, "sp", "0");
         this.updateOneInfo(501045, "lv", "1");
      }

      if (GameConstants.isZero(this.getJob())) {
         if (this.getQuestStatus(40914) == 0) {
            this.completeQuest(40914);
         }

         if (this.getQuestStatus(40900) == 0) {
            this.completeQuest(40900);
         }

         if (this.getQuestStatus(40901) == 0) {
            this.completeQuest(40901);
         }

         if (this.getQuestStatus(40905) == 0) {
            this.completeQuest(40905);
         }

         if (this.getQuestStatus(40980) == 0) {
            this.completeQuest(40980);
         }

         if (this.getQuestStatus(41907) == 0) {
            MapleQuest.getInstance(41907).forceStart(this, 2003, "0");
         }
      }

      int killPoint = this.getKillPoint() / 100;
      this.updateOneInfo(QuestExConstants.KillPoint.getQuestID(), "point", String.valueOf(killPoint));
      if (!DBConfig.isGanglim) {
         if (this.getOneInfoQuestInteger(787765, "smc") <= 0) {
            for (int i = 49000; i <= 49018; i++) {
               this.questinfo.remove(i);
               this.send(CWvsContext.InfoPacket.updateInfoQuest(i, ""));
            }

            this.setSaveFlag(this.getSaveFlag() | CharacterSaveFlag.QUEST_INFO.getFlag());
            this.updateOneInfo(787765, "smc", "1");
         }

         if (this.getOneInfoQuestInteger(133333, "check_data") <= 0) {
            for (int i = 1; i <= 5; i++) {
               int plus = this.getOneInfoQuestInteger(133333, "plusOption" + i);
               year = this.getOneInfoQuestInteger(133333, "minusOption" + i);
               if (plus > 0 && year > 0 && plus == ImprintedStoneOption.PMDR.getOption()) {
                  this.updateOneInfo(133333, "minusOption" + i, String.valueOf(ImprintedStoneOption.PMDR.getOption()));
               }
            }

            this.updateOneInfo(133333, "check_data", "1");
         }
      }

      if (this.getOneInfoQuestInteger(501092, "lv") <= 0) {
         this.updateOneInfo(501092, "lv", "10");
      }

      if (DBConfig.isGanglim) {
         if (this.getOneInfoQuestInteger(454599, "first_check") <= 0) {
            try {
               date = this.getOneInfo(100000, "2");
               if (date != null && !date.isEmpty()) {
                  for (int ix = 0; ix <= 12; ix++) {
                     this.updateOneInfo(454545, String.valueOf(ix),
                           String.valueOf(this.getOneInfoQuestInteger(100000, String.valueOf(ix))));
                  }

                  for (int ix = 0; ix < 2; ix++) {
                     this.updateOneInfo(454546 + ix, "equip",
                           String.valueOf(this.getOneInfoQuestInteger(100001 + ix, "equip")));
                  }

                  this.dropMessage(5, "각인석 데이터 이전 완료");
               }

               this.updateOneInfo(454599, "first_check", "1");
            } catch (NumberFormatException var40) {
            }
         }

         if (DBConfig.isGanglim) {
            CustomItem.changeData(this);
         }

         int vv = this.getItemQuantity(4310308, false);
         this.updateOneInfo(QuestExConstants.NeoCoreEvent.getQuestID(), "point", String.valueOf(vv));
         int var51 = this.getItemQuantity(4310229, false);
         this.updateOneInfo(QuestExConstants.UnionCoin.getQuestID(), "point", String.valueOf(var51));
      }

      int realCash = this.getRealCash();
      this.updateOneInfo(17015, "point", String.valueOf(realCash));
      if (!DBConfig.isGanglim) {
         int hongboPoint = this.getHongboPoint();
         this.updateOneInfo(16180, "point", String.valueOf(hongboPoint));
      } else {
         int rp = this.getOneInfoQuestInteger(100711, "sum");
         this.updateOneInfo(100777, "point", String.valueOf(rp / 100));
         year = this.getOneInfoQuestInteger(100712, "sum");
         this.updateOneInfo(100778, "point", String.valueOf(year));
      }

      int praisePoint = this.getPraisePoint().getPoint();
      this.updateOneInfo(3887, "point", String.valueOf(praisePoint));
      if (this.getOneInfoQuestInteger(QuestExConstants.IntensePowerCrystal.getQuestID(), "count_check") == 0) {
         this.updateOneInfo(QuestExConstants.IntensePowerCrystal.getQuestID(), "count", "180");
         this.updateOneInfo(QuestExConstants.IntensePowerCrystal.getQuestID(), "count_check", "1");
      }

      for (int ix = 0; ix < 9; ix++) {
         if (this.getTotalSkillLevel(80002927 + ix) > 0) {
            this.changeSkillLevel(80002927 + ix, 0, 3);
            this.getStat().recalcLocalStats(this);
         }
      }

      if (this.getOneInfoQuestInteger(QuestExConstants.NeoEventAdventureLog.getQuestID(), "start") > 0) {
         year = this.getOneInfoQuestInteger(QuestExConstants.NeoEventAdventureLog.getQuestID(), "mission");
         if (!this.isQuestStarted(100717)) {
            this.completeQuest(100717);
            if (year == 0) {
               this.startQuest(
                     QuestExConstants.NeoEventNormalMob.getQuestID(),
                     StringUtil.getLeftPaddedStr(
                           String.valueOf(
                                 this.getOneInfoQuestInteger(QuestExConstants.NeoEventNormalMob.getQuestID(), "m0")),
                           '0', 3));
            } else if (year == 1) {
               this.startQuest(
                     QuestExConstants.NeoEventEliteMob.getQuestID(),
                     StringUtil.getLeftPaddedStr(
                           String.valueOf(
                                 this.getOneInfoQuestInteger(QuestExConstants.NeoEventEliteMob.getQuestID(), "m1")),
                           '0', 3));
            } else if (year == 2) {
               this.startQuest(
                     QuestExConstants.NeoEventRuneAct.getQuestID(),
                     StringUtil.getLeftPaddedStr(
                           String.valueOf(
                                 this.getOneInfoQuestInteger(QuestExConstants.NeoEventRuneAct.getQuestID(), "m1")),
                           '0', 3));
            } else if (year == 3) {
               this.startQuest(
                     QuestExConstants.NeoEventRandomPortal.getQuestID(),
                     StringUtil.getLeftPaddedStr(
                           String.valueOf(
                                 this.getOneInfoQuestInteger(QuestExConstants.NeoEventRandomPortal.getQuestID(), "m1")),
                           '0', 3));
            }
         }

         if (year >= 1 && this.getQuestStatus(QuestExConstants.NeoEventNormalMob.getQuestID()) != 2) {
            this.completeQuest(QuestExConstants.NeoEventNormalMob.getQuestID());
         }

         if (year >= 2 && this.getQuestStatus(QuestExConstants.NeoEventEliteMob.getQuestID()) != 2) {
            this.completeQuest(QuestExConstants.NeoEventEliteMob.getQuestID());
         }

         if (year >= 3 && this.getQuestStatus(QuestExConstants.NeoEventEliteMob.getQuestID()) != 2) {
            this.completeQuest(QuestExConstants.NeoEventRuneAct.getQuestID());
         }
      } else {
         if (this.getQuestStatus(100717) > 0) {
            this.updateQuest(new MapleQuestStatus(MapleQuest.getInstance(100717), 0));
         }

         if (this.getQuestStatus(QuestExConstants.NeoEventNormalMob.getQuestID()) > 0) {
            this.updateQuest(
                  new MapleQuestStatus(MapleQuest.getInstance(QuestExConstants.NeoEventNormalMob.getQuestID()), 0));
         }

         if (this.getQuestStatus(QuestExConstants.NeoEventEliteMob.getQuestID()) > 0) {
            this.updateQuest(
                  new MapleQuestStatus(MapleQuest.getInstance(QuestExConstants.NeoEventEliteMob.getQuestID()), 0));
         }

         if (this.getQuestStatus(QuestExConstants.NeoEventRuneAct.getQuestID()) > 0) {
            this.updateQuest(
                  new MapleQuestStatus(MapleQuest.getInstance(QuestExConstants.NeoEventRuneAct.getQuestID()), 0));
         }

         if (this.getQuestStatus(QuestExConstants.NeoEventRandomPortal.getQuestID()) > 0) {
            this.updateQuest(
                  new MapleQuestStatus(MapleQuest.getInstance(QuestExConstants.NeoEventRandomPortal.getQuestID()), 0));
         }
      }

      if (this.getTotalSkillLevel(80003025) > 0) {
         this.changeSkillLevel(80003025, -1, -1);
      }

      if (!DBConfig.isGanglim) {
         if (this.getOneInfoQuestInteger(100711, "clear_check") <= 0) {
            year = this.getOneInfoQuestInteger(100711, "today");
            month = this.getOneInfoQuestInteger(100711, "point");
            day = this.getOneInfoQuestInteger(100711, "sum");
            this.updateOneInfo(100711, "today", "0");
            this.updateOneInfo(100711, "point", "0");
            this.updateOneInfo(100711, "sum", "0");
            this.updateOneInfo(100711, "clear_check", "1");
         }

         int var45 = this.getOneInfoQuestInteger(QuestExConstants.NeoCoreEvent.getQuestID(), "lv");
         if (var45 > 0) {
            year = 80000653 + var45;

            for (int ixx = 80000654; ixx <= 80000661; ixx++) {
               if (ixx != year && this.getTotalSkillLevel(ixx) > 0) {
                  this.changeSkillLevel(ixx, -1, -1);
               }
            }

            if (this.getTotalSkillLevel(year) <= 0) {
               this.changeSkillLevel(year, 1, 1);
            }
         }
      }

      if (this.getOneInfoQuestInteger(1234566, "reboot_ring") <= 0
            && this.getQuestStatus(2000004) == 2
            && this.getInventory(MapleInventoryType.EQUIP).getNumFreeSlot() > 0) {
         Equip item = (Equip) MapleItemInformationProvider.getInstance().getEquipById(1113227);
         item.setState((byte) 20);
         item.setPotential1(40650);
         item.setPotential2(40650);
         item.setPotential4(40656);
         item.setPotential5(40656);
         item.setExpiration(new Date().getTime() + 1728000000L);
         MapleInventoryManipulator.addFromDrop(this.getClient(), item, false);
         this.updateOneInfo(1234566, "reboot_ring", "1");
      }

      if (this.getQuestStatus(16370) <= 0) {
         this.completeQuest(16370);
      }

      if (ServerConstants.useAchievement) {
         Achievement achievement = this.getAchievement();
         if (achievement != null && !achievement.checkCompleteAchievement(1)) {
            achievement.updateAchievementSingle(this,
                  new AchievementEntry(1, -1, AchievementMissionStatus.Complete, System.currentTimeMillis(), ""));
         }
      }

      if (this.getOneInfoQuestInteger(1234566, "get_support_item") <= 0
            && this.getLevel() >= 10
            && this.getInventory(MapleInventoryType.USE).getNumFreeSlot() > 0) {
         this.gainItem(2439600, 1, false, 0L, "");
         this.updateOneInfo(1234566, "get_support_item", "1");
      }

      if (this.getOneInfoQuestInteger(1234567, "get_newbie_item") <= 0) {
         SimpleDateFormat sdf_x = new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss");
         Calendar CAL = new GregorianCalendar(Locale.KOREA);
         String fDate = sdf_x.format(CAL.getTime());
         String[] datesx = fDate.split("-");
         int yearx = Integer.parseInt(datesx[0]);
         int monthx = Integer.parseInt(datesx[1]);
         int dayx = Integer.parseInt(datesx[2]);
         if (yearx == 2021 && monthx == 8 && dayx <= 31 && DBConfig.isGanglim) {
            int itemID = 2437121;
            int quantity = 1;
            MapleItemInformationProvider ii = MapleItemInformationProvider.getInstance();
            Item item = new Item(itemID, (short) 0, (short) quantity, 0, MapleInventoryIdentifier.getInstance());
            MapleCabinet cabinet = this.getCabinet();
            if (cabinet != null) {
               SimpleDateFormat sdf = new SimpleDateFormat("yyyy년 MM월 dd일 HH시 mm분");
               String var75 = sdf.format(CAL.getTime());
               cabinet.addCabinetItem(
                     new MapleCabinetItem(cabinet.getNextIndex(), System.currentTimeMillis() + 259200000L, "[핫타임 보상]",
                           var75 + "에 지급된 핫타임 보상입니다.", item));
               this.send(CField.maplecabinetResult(8));
               this.setSaveFlag(this.getSaveFlag() | CharacterSaveFlag.CABINET.getFlag());
               this.send(CField.chatMsg(1, "오픈 기념 지원 상자가 지급되었습니다. [메이플 보관함]을 통해 수령 가능합니다."));
               this.dropMessage(1, "오픈 기념 지원 상자가 지급되었습니다.\r\n[메이플 보관함]을 통해 수령 가능합니다.");
            }
         }

         this.updateOneInfo(1234567, "get_newbie_item", "1");
      }

      SimpleDateFormat sdf_x = new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss");
      Calendar CAL = new GregorianCalendar(Locale.KOREA);
      String fDate = sdf_x.format(CAL.getTime());
      String[] datesx = fDate.split("-");
      int yearx = Integer.parseInt(datesx[0]);
      int monthx = Integer.parseInt(datesx[1]);
      int dayx = Integer.parseInt(datesx[2]);
      if (yearx == 2021 && monthx == 11 && dayx <= 7 && !DBConfig.isGanglim
            && this.getOneInfoQuestInteger(1234567, "get_november_reward") <= 0) {
         int itemID = 2439630;
         int quantity = 1;
         Item item = null;
         MapleItemInformationProvider ii = MapleItemInformationProvider.getInstance();
         item = new Item(itemID, (short) 0, (short) quantity, 0, MapleInventoryIdentifier.getInstance());
         MapleCabinet cabinet = this.getCabinet();
         if (cabinet != null) {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy년 MM월 dd일 HH시 mm분");
            fDate = sdf.format(CAL.getTime());
            cabinet.addCabinetItem(
                  new MapleCabinetItem(cabinet.getNextIndex(), System.currentTimeMillis() + 259200000L, "[이벤트 지급]",
                        fDate + "에 지급된 이벤트 보상입니다.", item));
            this.send(CField.maplecabinetResult(8));
            this.setSaveFlag(this.getSaveFlag() | CharacterSaveFlag.CABINET.getFlag());
            this.send(CField.chatMsg(1, "강림 11월 마음을 담은 상자가 지급되었습니다. [메이플 보관함]을 통해 수령 가능합니다."));
            this.dropMessage(1, "강림 11월 마음을 담은 상자가 지급되었습니다.\r\n[메이플 보관함]을 통해 수령 가능합니다.");
         }

         this.updateOneInfo(1234567, "get_november_reward", "1");
      }

      for (int ixxx = 16874; ixxx <= 16876; ixxx++) {
         if (this.getQuestStatus(ixxx) < 2) {
            this.completeQuest(ixxx);
         }
      }

      if (this.getOneInfoQuestInteger(1234569, "get_treasure_set") == 1) {
         if (this.getTotalSkillLevel(80001825) < 30) {
            this.changeSkillLevel(80001825, 30, 30);
         }

         if (this.getTotalSkillLevel(80001829) < 5) {
            this.changeSkillLevel(80001829, 5, 5);
         }
      }

      if (GameConstants.isArk(this.getJob()) && this.getTotalSkillLevel(155101006) <= 0) {
         this.changeSkillLevel(155101006, 1, 1);
      }

      if (this.getLevel() >= 275 && this.getOneInfoQuestInteger(1234566, "check_honor_chair") <= 0
            && !DBConfig.isGanglim) {
         MapleItemInformationProvider ii = MapleItemInformationProvider.getInstance();
         Item item = new Item(3014028, (short) 0, (short) 1, 0, MapleInventoryIdentifier.getInstance());
         MapleCabinet cabinet = this.getCabinet();
         if (cabinet != null) {
            new SimpleDateFormat("yyyy년 MM월 dd일 HH시 mm분");
            cabinet.addCabinetItem(
                  new MapleCabinetItem(cabinet.getNextIndex(), System.currentTimeMillis() + 259200000L, "[275레벨 보상]",
                        fDate + "에 지급된 보상입니다.", item));
            this.send(CField.maplecabinetResult(8));
            this.setSaveFlag(this.getSaveFlag() | CharacterSaveFlag.CABINET.getFlag());
            if (DBConfig.isGanglim) {
               this.send(CField.chatMsg(1, "찬란한 명예의 상징이 지급되었습니다. [메이플 보관함]을 통해 수령 가능합니다."));
               this.dropMessage(1, "찬란한 명예의 상징이 지급되었습니다.\r\n[메이플 보관함]을 통해 수령 가능합니다.");
            } else {
               this.dropMessage(5, "[알림] 275레벨 보상 찬란한 명예의 상징이 지급되었습니다. [메이플 보관함]을 확인해주세요.");
               this.dropMessage(1, "275레벨 보상 찬란한 명예의 상징이 지급되었습니다.\r\n[메이플 보관함]을 확인해주세요.");
            }
         }

         this.updateOneInfo(1234566, "check_honor_chair", "1");
      }
   }

   public long getStartActiveMacroTime() {
      return this.startActiveMacroTime;
   }

   public void setStartActiveMacroTime(long startActiveMacroTime) {
      this.startActiveMacroTime = startActiveMacroTime;
   }

   public boolean isProcessChangeChannel() {
      return this.processChangeChannel;
   }

   public void setProcessChangeChannel(boolean processChangeChannel) {
      this.processChangeChannel = processChangeChannel;
   }

   public int getLockEclipseLook() {
      return this.lockEclipseLook;
   }

   public void setLockEclipseLook(int lockEclipseLook) {
      this.lockEclipseLook = lockEclipseLook;
   }

   public int getLockEquilibriumLook() {
      return this.lockEquilibriumLook;
   }

   public void setLockEquilibriumLook(int lockEquilibriumLook) {
      this.lockEquilibriumLook = lockEquilibriumLook;
   }

   public int getLockBeastFormWingEffect() {
      return this.lockBeastFormWingEffect;
   }

   public void setLockBeastFormWingEffect(int lockBeastFormWingEffect) {
      this.lockBeastFormWingEffect = lockBeastFormWingEffect;
   }

   public int getLockKinesisPsychicEnergyShieldEffect() {
      return this.lockKinesisPsychicEnergyShieldEffect;
   }

   public void setLockKinesisPsychicEnergyShieldEffect(int lockKinesisPsychicEnergyShieldEffect) {
      this.lockKinesisPsychicEnergyShieldEffect = lockKinesisPsychicEnergyShieldEffect;
   }

   public int getLockHomingMissileEffect() {
      return this.lockHomingMissileEffect;
   }

   public void setLockHomingMissileEffect(int lockHomingMissileEffect) {
      this.lockHomingMissileEffect = lockHomingMissileEffect;
   }

   public int getJaguarBuffR() {
      return this.jaguarBuffR;
   }

   public void setJaguarBuffR(int jaguarBuffR) {
      this.jaguarBuffR = jaguarBuffR;
   }

   public int getComboX() {
      return this.comboX;
   }

   public void setComboX(int comboX) {
      this.comboX = comboX;
   }

   public void pickupLiver() {
      SecondaryStatEffect effect = this.getBuffedEffect(SecondaryStatFlag.HiddenHyperLinkMaximization);
      if (effect != null) {
         long remainCooltime = this.getRemainCooltime(25121133);
         if (remainCooltime <= 0L) {
            return;
         }

         int x = effect.getX() * 1000;
         SecondaryStatManager statManager = new SecondaryStatManager(this.getClient(), this.secondaryStat);
         statManager.changeStatValueAndTill(SecondaryStatFlag.indiePAD, 25121133, effect.getIndiePad(), x,
               (int) remainCooltime);
         statManager.changeStatValueAndTill(SecondaryStatFlag.indieDamR, 25121133, effect.getIndieDamR(), x,
               (int) remainCooltime);
         statManager.changeStatValueAndTill(SecondaryStatFlag.indieBooster, 25121133, effect.getIndieBooster(), x,
               (int) remainCooltime);
         statManager.changeStatValueAndTill(SecondaryStatFlag.indieBDR, 25121133, effect.getIndieBdR(), x,
               (int) remainCooltime);
         statManager.changeStatValueAndTill(SecondaryStatFlag.indieIgnoreMobPdpR, 25121133,
               effect.getIndieIgnoreMobPdpR(), x, (int) remainCooltime);
         statManager.changeStatValueAndTill(SecondaryStatFlag.HiddenHyperLinkMaximization, 25121133, 1, x,
               (int) remainCooltime);
         statManager.changeStatValueAndTill(SecondaryStatFlag.indieSummon, 25121133, 1, x, (int) remainCooltime);
         statManager.temporaryStatSet();
      }
   }

   public void removeEventRabbitPortal() {
      if (this.getRandomPortal() != null && this.getRandomPortal().getGameType() == RandomPortalGameType.Rabbit) {
         this.send(CField.randomPortalRemoved(this.getRandomPortal()));
         this.setRandomPortal(null);
         this.setRandomPortalSpawnedTime(0L);
      }
   }

   public void checkRandomPortal() {
      if (this.getRandomPortal() != null) {
         if (this.getRandomPortal().getGameType() != RandomPortalGameType.Rabbit) {
            if (!this.isEnterRandomPortal()
                  && System.currentTimeMillis() - this.getRandomPortalSpawnedTime() >= 60000L) {
               this.send(CField.randomPortalRemoved(this.getRandomPortal()));
               this.setRandomPortal(null);
               this.setRandomPortalSpawnedTime(0L);
            }
         } else if (!this.isEnterRandomPortal()
               && System.currentTimeMillis() - this.getRandomPortalSpawnedTime() >= 600000L) {
            this.send(CField.randomPortalRemoved(this.getRandomPortal()));
            this.setRandomPortal(null);
            this.setRandomPortalSpawnedTime(0L);
         }
      }
   }

   public void checkAntiMacroTime() {
      if (this.getStartActiveMacroTime() != 0L) {
         if (System.currentTimeMillis() - this.getStartActiveMacroTime() >= 60000L) {
            this.onFailedAntiMacro(this.getAntiMacro(), AntiMacroFailedType.Timeout);
            this.setStartActiveMacroTime(0L);
         }
      } else {
         if (this.getOneInfoQuestInteger(19770, "active") == 0) {
            if (this.getMapId() == 993073000) {
               this.returnFromVeritasRoom();
            }

            return;
         }

         if (this.getMapId() != 993073000) {
            this.setRegisterTransferField(993073000);
            this.setRegisterTransferFieldTime(System.currentTimeMillis());
            StringBuilder sb = new StringBuilder();
            sb.append("거짓말 탐지기 통과 실패 : ");
            sb.append(this.getName());
            sb.append(" / 계정 : ");
            sb.append(this.getClient().getAccountName());
            sb.append(" / 실패사유 : ");
            sb.append(this.getOneInfoQuest(19770, "reason"));
            return;
         }

         int elapsed = this.getOneInfoQuestInteger(19770, "elapsed");
         this.updateOneInfo(19770, "elapsed", String.valueOf(++elapsed));
         int count = this.getOneInfoQuestInteger(19770, "count");
         int remain = GameConstants.getVeritasRoomPeriod(count) - elapsed;
         if (remain <= 0) {
            this.returnFromVeritasRoom();
            return;
         }

         this.send(CField.getClock(remain * 1000));
      }
   }

   public void returnFromVeritasRoom() {
      int returnID = ServerConstants.TownMap;
      if (DBConfig.isGanglim && this.getLevel() < 100) {
         returnID = ServerConstants.StartMap;
      }

      this.updateOneInfo(19770, "active", "0");
      this.setRegisterTransferField(returnID);
      this.setRegisterTransferFieldTime(System.currentTimeMillis());
   }

   public void loadSkillEffectOnOff() {
      if (this.getOneInfoQuestInteger(1544, String.valueOf(33111007)) != 0) {
         this.lockBeastFormWingEffect = 1;
      }

      if (this.getOneInfoQuestInteger(1544, String.valueOf(20040217)) != 0) {
         this.lockEclipseLook = 1;
      }

      if (this.getOneInfoQuestInteger(1544, String.valueOf(20040219)) != 0) {
         this.lockEquilibriumLook = 1;
      }

      if (this.getOneInfoQuestInteger(1544, String.valueOf(35101002)) != 0) {
         this.lockEquilibriumLook = 1;
      }

      if (this.getOneInfoQuestInteger(1544, String.valueOf(1101013)) != 0) {
         this.comboX = 1;
      }
   }

   public void removeAllSummons() {
      List<Summoned> toRemove = new ArrayList<>();

      try {
         toRemove.addAll(this.getSummonsReadLock());
      } finally {
         this.unlockSummonsReadLock();
      }

      for (Summoned s : toRemove) {
         if (GameConstants.isDarkKnight(this.getJob()) && s.getSkill() == 1301013) {
            this.toRestoreSummon = true;
         }

         this.map.broadcastMessage(CField.SummonPacket.removeSummon(s, true));
         this.map.removeMapObject(s);
         this.visibleMapObjects.remove(s);
         this.summons.remove(s);
      }

      this.temporaryStatReset(SecondaryStatFlag.indieSummon);
      this.temporaryStatReset(SecondaryStatFlag.Morph);
   }

   public void addMulungPoint() {
      int temp = (this.getMapId() - 925070000) / 100;
      int stage = temp - temp / 100 * 100;
      int point = 0;
      if (stage % 10 == 0) {
         point = 100;
      } else {
         point = 10;
      }

      if (this.getDojangChallengeMode() == 1) {
         point *= 2;
      }

      this.updateOneInfo(42003, "point",
            String.valueOf(Math.min(500000, this.getOneInfoQuestInteger(42003, "point") + point)));
      this.dropMessage(5, point + "포인트를 획득하였습니다.");
   }

   public void applyBMCurse(int curseDamR) {
      this.setDisableEquipChange(true);
      this.temporaryStatSet(80002635, Integer.MAX_VALUE, SecondaryStatFlag.BlackMageCursePmdReduce, curseDamR);
   }

   public void applyBMCurse1(int skillLevel) {
      SecondaryStatEffect effect = SkillFactory.getSkill(80002635).getEffect(skillLevel);
      if (effect != null) {
         int x = 99;
         if (skillLevel == 2) {
            x = 75;
         } else if (skillLevel == 3) {
            x = 50;
         }

         this.setDisableEquipChange(true);
         this.temporaryStatSet(80002635, Integer.MAX_VALUE, SecondaryStatFlag.BlackMageCursePmdReduce, x);
      }
   }

   public void applyBMCurse2(int skillLevel) {
      SecondaryStatEffect effect = SkillFactory.getSkill(80002636).getEffect(skillLevel);
      if (effect != null) {
         int x = effect.getX();
         this.setDisableEquipChange(false);
         this.temporaryStatSet(80002636, Integer.MAX_VALUE, SecondaryStatFlag.BlackMageCursePmdReduce, x);
      }
   }

   public void applyBMCurseJinMulti() {
      this.setMultiMode(true);
      if (this.getBuffedValue(SecondaryStatFlag.BlackMageCursePmdReduce) == null) {
         this.setDisableEquipChange(false);
         this.temporaryStatSet(80002636, Integer.MAX_VALUE, SecondaryStatFlag.BlackMageCursePmdReduce, 50);
      }
   }

   public void applyBMCurse3() {
      this.temporaryStatSet(80002637, Integer.MAX_VALUE, SecondaryStatFlag.BlackMageCurseForbidPortion, 1);
   }

   public void applyBMCurseValue(int curseDamR) {
      this.setDisableEquipChange(true);
      this.temporaryStatSet(80002635, Integer.MAX_VALUE, SecondaryStatFlag.BlackMageCursePmdReduce, curseDamR);
   }

   public long checkRevenant(long delta) {
      if (delta < 0L && GameConstants.isZero(this.getJob()) && this.getZeroInfo().isBeta()
            && this.onApplyImmuneBarrier()) {
         delta = 0L;
      }

      long before = this.stats.getHp();
      long hp = this.stats.getHp() + delta;
      if (this.getBuffedValue(SecondaryStatFlag.Revenant) != null && hp <= 0L) {
         long maxHP = this.stats.getCurrentMaxHp(this);
         int value = this.getRevenantRage();
         if (value == 0) {
            value = (int) (before - delta + 1L);
         } else {
            value = (int) (value - delta);
         }

         if (value > maxHP) {
            value = (int) maxHP;
         }

         this.setRevenantRage(value);
         SecondaryStatManager statManager = new SecondaryStatManager(this.getClient(), this.secondaryStat);
         int skillID = 400011112;
         if (this.getTotalSkillLevel(500061054) > 0) {
            skillID = 500061054;
         }

         statManager.changeStatValue(SecondaryStatFlag.Revenant, skillID, 1);
         statManager.temporaryStatSet();
         hp = 1L;
      }

      return hp;
   }

   public void addConsumeItemLimit(int itemID, long limitTime) {
      this.getConsumeItemLimits().put(itemID, limitTime);
      PacketEncoder packet = new PacketEncoder();
      packet.writeShort(SendPacketOpcode.ITEM_COOLTIME_CHANGE.getValue());
      packet.write(0);
      packet.writeInt(itemID);
      packet.writeLong(0L);
      this.send(packet.getPacket());
      this.setSaveFlag(this.getSaveFlag() | CharacterSaveFlag.CONSUME_ITEM_LIMIT.getFlag());
   }

   public void checkConsumeItemLimit() {
      if (!this.getConsumeItemLimits().isEmpty()) {
         for (Entry<Integer, Long> entry : new HashMap<>(this.getConsumeItemLimits()).entrySet()) {
            if (entry.getValue() <= System.currentTimeMillis()) {
               PacketEncoder packet = new PacketEncoder();
               packet.writeShort(SendPacketOpcode.ITEM_COOLTIME_CHANGE.getValue());
               packet.write(1);
               packet.writeInt(entry.getKey());
               packet.writeLong(0L);
               this.send(packet.getPacket());
               this.getConsumeItemLimits().remove(entry.getKey());
               this.setSaveFlag(this.getSaveFlag() | CharacterSaveFlag.CONSUME_ITEM_LIMIT.getFlag());
            }
         }
      }
   }

   public CrystalGate getCrystalGate(int objectID) {
      for (CrystalGate gate : new ArrayList<>(this.crystalGates)) {
         if (gate.getTotalCount() == objectID) {
            return gate;
         }
      }

      return null;
   }

   public void removeCrystalGate(int objectID) {
      for (CrystalGate gate : new ArrayList<>(this.crystalGates)) {
         if (gate.getTotalCount() == objectID) {
            this.crystalGates.remove(gate);
            break;
         }
      }
   }

   public void addCrystalGate(CrystalGate gate) {
      this.crystalGates.add(gate);
   }

   public List<CrystalGate> getCrystalGates() {
      return new ArrayList<>(this.crystalGates);
   }

   public void onAncientGuardians(int delta) {
      SecondaryStatEffect eff2 = SkillFactory.getSkill(3310006).getEffect(this.getTotalSkillLevel(3310006));
      if (this.getTotalSkillLevel(3310006) > 0) {
         this.setAncientGuidance(Math.min(eff2.getX(), this.getAncientGuidance() + delta));
         if (this.getAncientGuidance() >= eff2.getX()) {
            this.temporaryStatSet(3310006, eff2.getDuration(), SecondaryStatFlag.indiePMDR, eff2.getIndiePMdR());
            int deltaHP = (int) (this.getStat().getCurrentMaxHp(this) * 0.01 * eff2.getY());
            int deltaMP = (int) (this.getStat().getCurrentMaxMp(this) * eff2.getY());
            this.addMPHP(deltaHP, deltaMP);
            this.setAncientGuidance(0);
            SecondaryStatEffect eff = SkillFactory.getSkill(3300000).getEffect(1);
            eff.applyTo(this);
         }
      }
   }

   public void checkGenesisWeapon() {
      MapleQuestStatus quest = this.getQuestIfNullAdd(MapleQuest.getInstance(1269));
      if (quest != null) {
         String cd = quest.getCustomData();
         if (cd != null && !cd.isEmpty() && cd.equals("end")) {
            int[] bmWeapons = GameConstants.bmWeapons;
            if (this.getOneInfoQuestInteger(1234588, "bm_quest_check") == 0) {
               MapleItemInformationProvider ii = MapleItemInformationProvider.getInstance();
               Equip equip = null;

               for (Item item : new ArrayList<>(this.getInventory(MapleInventoryType.EQUIPPED).list())) {
                  for (int i : bmWeapons) {
                     if (item.getItemId() == i) {
                        equip = (Equip) item;
                        break;
                     }
                  }
               }

               if (equip == null) {
                  for (Item item : new ArrayList<>(this.getInventory(MapleInventoryType.EQUIP).list())) {
                     for (int ix : bmWeapons) {
                        if (item.getItemId() == ix) {
                           equip = (Equip) item;
                           break;
                        }
                     }
                  }
               }

               if (equip == null) {
                  this.updateOneInfo(1234588, "bm_quest_check", "1");
                  return;
               }

               int weaponID = equip.getItemId() + 1;
               Equip genesis = (Equip) ii.getEquipById(weaponID);
               if (genesis == null) {
                  return;
               }

               BonusStat.resetBonusStat(genesis, BonusStatPlaceType.LevelledRebirthFlame);
               MapleInventoryManipulator.removeById(this.getClient(), MapleInventoryType.getByType(equip.getType()),
                     equip.getItemId(), 1, false, false);
               MapleInventoryManipulator.addbyItem(this.getClient(), genesis);
               this.dropMessage(5, "제네시스 무기에 잠재된 첫 번째 힘이 깨어났습니다. 무기를 확인해보세요.");
               this.updateOneInfo(1234588, "bm_quest_check", "1");
            }
         }

         MapleItemInformationProvider ii = MapleItemInformationProvider.getInstance();
         Equip equip = null;

         for (Item item : new ArrayList<>(this.getInventory(MapleInventoryType.EQUIPPED).list())) {
            for (int ixx : GameConstants.bmWeapons) {
               if (item.getItemId() == ixx + 1) {
                  equip = (Equip) item;
                  break;
               }
            }
         }

         if (equip == null) {
            this.changeSkillLevel(80002632, -1, 0);
            quest = this.getQuestIfNullAdd(MapleQuest.getInstance(1273));
            if (quest == null) {
               return;
            }

            this.changeSkillLevel(80002633, -1, 0);
         } else if (this.getQuestStatus(2000027) != 2) {
            this.completeQuest(2000027);
         }
      }
   }

   public void sendIntensePowerCrystalUpdate() {
      PacketEncoder packet = new PacketEncoder();
      packet.writeShort(SendPacketOpcode.INTENSE_POWER_CRYSTAL.getValue());
      packet.writeInt(this.intensePowerCrystals.size());

      for (IntensePowerCrystal cop : this.intensePowerCrystals.values()) {
         cop.encode(packet);
      }

      this.send(packet.getPacket());
   }

   public void dropIntensePowerCrystal(MapleMonster dropper) {
      if (this.getBossMode() != 1) {
         if (System.currentTimeMillis() - this.intensePowerCrystalTime >= 2000L) {
            this.intensePowerCrystalTime = System.currentTimeMillis();
            IntensePowerCrystalData data = GameConstants.getIntensePowerCrystalData(dropper.getId());
            if (data != null) {
               Item item = new Item(4001886, (short) 0, (short) 1, 0);
               item.setGMLog(CurrentTime.getAllCurrentTime() + "에 " + this.getName() + "이 " + dropper.getId()
                     + "를 처치하고 얻은 아이템.");
               item.setUniqueId(MapleInventoryIdentifier.getInstance());
               int memberCount = 1;
               if (this.getParty() != null) {
                  memberCount = this.getParty().getPartyMember().getPartyMemberList().size();
               }

               if (DBConfig.isGanglim) {
                  memberCount = 1;
               }

               int mobID = data.getNamingMonster();
               long gainTime = PacketHelper.getTime(System.currentTimeMillis());
               IntensePowerCrystal cop = new IntensePowerCrystal(this.getId(), item.getUniqueId(), memberCount, mobID,
                     data.getMeso(), 0L, gainTime);
               item.setIntensePowerCrystal(cop);
               this.getMap().spawnIndividualItemDrop(dropper, this, item, dropper.getPosition(), true);
            }
         }
      }
   }

   public void updateCanTime(String key, int type) {
   }

   public boolean canEnterBoss(String key) {
      if (!this.getClient().isGm() && !DBConfig.isGanglim && DBConfig.isHosting) {
         if (Start.rebootTime + 1800000L >= System.currentTimeMillis()) {
            if (Start.bossEnterLog.get(key) == null) {
               Start.bossEnterLog.put(key, new ArrayList<>());
            }

            if (!Start.bossEnterLog.get(key).contains(this.getName())) {
               Start.bossEnterLog.get(key).add(this.getName());
               return true;
            }
         }

         String v = this.getOneInfoQuest(1234569, key);
         if (!v.isEmpty()) {
            long canTime = Long.valueOf(v);
            long now = System.currentTimeMillis();
            long delta = canTime - now;
            if (delta > 0L) {
               int minute = (int) (delta / 1000L / 60L);
               return false;
            } else {
               return true;
            }
         } else {
            return true;
         }
      } else {
         return true;
      }
   }

   public void multiplierBuffTime(String flagName, double multiplier) {
      SecondaryStat ss = this.getSecondaryStat();
      if (ss != null) {
         int reason = ss.getReason(SecondaryStatFlag.getByName(flagName));
         int value = ss.getValue(SecondaryStatFlag.getByName(flagName));
         long till = ss.getTill(SecondaryStatFlag.getByName(flagName));
         if (value != -99999) {
            int remain = (int) (till - System.currentTimeMillis());
            int after = (int) (remain * multiplier);
            int delta = after - remain;
            SecondaryStatManager statManager = new SecondaryStatManager(this.getClient(), this.secondaryStat);
            statManager.changeStatValueAndTill(SecondaryStatFlag.getByName(flagName), reason, value, delta, 0);
            statManager.temporaryStatSet();
            if (flagName.equals("TimeCurse")) {
               this.getDiseases(SecondaryStatFlag.TimeCurse).length += delta;
            }
         }
      }
   }

   public void onDamageByMobSkill(MobSkillID skillID, int skillLevel, MobSkillInfo skillInfo, int delay,
         int mobTamplateID, int divider, int forcedFixDamR) {
      if (this.isAlive()) {
         int dd = 0;
         if (skillInfo.getScreen_delay().get(skillLevel) != null) {
            dd = skillInfo.getScreen_delay().get(skillLevel);
         }

         objects.utils.Timer.MapTimer.getInstance()
               .schedule(
                     () -> {
                        int dmg = 0;
                        boolean isFixDamR = false;
                        long maxHP = this.getStat().getCurrentMaxHp(this);
                        if (forcedFixDamR <= 0) {
                           int dmgX = skillInfo.getX();
                           int fixDamR = skillInfo.getMobSkillStatsInt(MobSkillStat.fixDamR);
                           if (dmgX != 0) {
                              dmg = dmgX;
                           } else if (fixDamR != 0) {
                              isFixDamR = true;
                              dmg = (int) (maxHP * 0.01 * fixDamR);
                           }
                        } else {
                           isFixDamR = true;
                           dmg = (int) (maxHP * 0.01 * forcedFixDamR);
                        }

                        if (divider > 0) {
                           dmg /= divider;
                        }

                        if (this.getIndieTemporaryStats(SecondaryStatFlag.indiePartialNotDamaged).size() <= 0
                              && this.getBuffedValue(SecondaryStatFlag.NotDamaged) == null
                              && this.getBuffedValue(SecondaryStatFlag.Asura) == null
                              && this.getBuffedValue(SecondaryStatFlag.TrueSniping) == null) {
                           int findID = -1;
                           int[] skills = new int[] { 4221006, 32121006, 400031039, 400031040 };

                           for (int skill : skills) {
                              AffectedArea area = this.getMap().getMistBySkillId(skill);
                              if (area != null) {
                                 MapleCharacter owner = this.getMap().getCharacterById(area.getOwnerId());
                                 if (owner != null) {
                                    Point pos_ = this.getTruePosition();
                                    if (this.getId() == owner.getId()
                                          || this.getParty() != null && owner.getParty() != null
                                                && this.getParty().getId() == owner.getParty().getId()) {
                                       Rect rect = area.getMistRect();
                                       if (rect != null) {
                                          if (rect.getLeft() <= pos_.x && rect.getTop() <= pos_.y
                                                && rect.getRight() >= pos_.x && rect.getBottom() >= pos_.y) {
                                             findID = skill;
                                          }
                                       } else {
                                          Rectangle rectangle = area.getBox();
                                          if (rectangle != null && rectangle.contains(pos_)) {
                                             findID = skill;
                                          }
                                       }
                                    }
                                 }
                              }
                           }

                           if (isFixDamR || findID == -1) {
                              if (this.getBuffedValue(SecondaryStatFlag.HolyMagicShell) != null) {
                                 Integer value = this.getBuffedValue(SecondaryStatFlag.HolyMagicShell);
                                 SecondaryStatEffect eff = this.getBuffedEffect(SecondaryStatFlag.HolyMagicShell);
                                 if (value <= 0) {
                                    this.temporaryStatReset(SecondaryStatFlag.HolyMagicShell);
                                 } else {
                                    SecondaryStatManager statManager = new SecondaryStatManager(this.getClient(),
                                          this.getSecondaryStat());
                                    statManager.changeStatValue(SecondaryStatFlag.HolyMagicShell, eff.getSourceId(),
                                          value - 1);
                                    statManager.temporaryStatSet();
                                 }
                              } else {
                                 SecondaryStatEffect stormGuard = this.getBuffedEffect(SecondaryStatFlag.StormGuard);
                                 if (stormGuard != null) {
                                    Integer v = this.getBuffedValue(SecondaryStatFlag.StormGuard);
                                    if (v != null) {
                                       int d = (int) (dmg / (this.getStat().getCurrentMaxHp() * 0.01));
                                       int reduce = Math.min(100, Math.min(v, d));
                                       dmg = 0;
                                       if (v <= reduce) {
                                          this.temporaryStatReset(SecondaryStatFlag.StormGuard);
                                       } else {
                                          v = v - reduce;
                                          SecondaryStatManager statManager = new SecondaryStatManager(this.getClient(),
                                                this.getSecondaryStat());
                                          statManager.changeStatValue(SecondaryStatFlag.StormGuard,
                                                stormGuard.getSourceId(), v);
                                          statManager.temporaryStatSet();
                                       }
                                    }
                                 }

                                 if (this.getBuffedValue(SecondaryStatFlag.EtherealForm) == null
                                       || !this.onEtherealForm()) {
                                    if (isFixDamR) {
                                       int reduce = this.getBuffedValueDefault(SecondaryStatFlag.ReduceFixDamR, 0);
                                       if (this.getBuffedValue(SecondaryStatFlag.HolyCharge) != null) {
                                          Object stack = this.getJobField("holyChargeStack");
                                          if (stack != null) {
                                             reduce += (Integer) stack
                                                   * this.getBuffedEffect(SecondaryStatFlag.HolyCharge).getW();
                                          }
                                       }

                                       if (this.getBuffedValue(SecondaryStatFlag.BlessingArmor) != null) {
                                          reduce += this.getBuffedEffect(SecondaryStatFlag.BlessingArmor).getY();
                                       }

                                       SecondaryStatEffect effect = this
                                             .getBuffedEffect(SecondaryStatFlag.ViperDefenseForm);
                                       Skill divine = SkillFactory.getSkill(5120011);
                                       SecondaryStatEffect divineShield = divine
                                             .getEffect(this.getTotalSkillLevel(divine));
                                       boolean damReduce = false;
                                       if (effect != null) {
                                          damReduce = true;
                                       }

                                       if (damReduce) {
                                          reduce += divineShield.getY();
                                       }

                                       reduce += this.getBuffedValueDefault(SecondaryStatFlag.PartyBarrier, 0);
                                       reduce += this
                                             .getBuffedValueDefault(SecondaryStatFlag.AngelicBursterSoulResonance, 0);
                                       reduce += this.getBuffedValueDefault(SecondaryStatFlag.DemonDamAbsorbShield, 0);
                                       if (this.hasBuffBySkillID(400001050)) {
                                          SecondaryStat ss = this.getSecondaryStat();
                                          if (ss != null && ss.EmpressBlessX == 400001053) {
                                             SecondaryStatEffect eff = this
                                                   .getBuffedEffect(SecondaryStatFlag.EmpressBless);
                                             if (eff != null) {
                                                reduce += eff.getZ();
                                             }
                                          }
                                       }

                                       if (findID != -1) {
                                          SecondaryStatEffect e = this.getSkillLevelData(findID);
                                          if (e != null) {
                                             reduce += e.getY();
                                          }
                                       }

                                       SecondaryStatEffect e = this.getBuffedEffect(SecondaryStatFlag.DemonFrenzy);
                                       if (e != null) {
                                          int absorb = e.getS();
                                          reduce += absorb;
                                       }

                                       for (IndieTemporaryStatEntry indie : this
                                             .getIndieTemporaryStats(SecondaryStatFlag.indieDamReduceR)) {
                                          reduce -= indie.getStatValue();
                                       }

                                       if (GameConstants.isBlaster(this.getJob())
                                             && (this.hasBuffBySkillID(37120011) || this.hasBuffBySkillID(37100006))) {
                                          reduce += this.getBuffedValueDefault(SecondaryStatFlag.EpicDropRIncrease, 0);
                                       }

                                       dmg = (int) (dmg * (100 - Math.min(100, reduce)) / 100.0);
                                    }

                                    this.healHP(-dmg, true, true);
                                    if (skillID == MobSkillID.DAMAGE && skillLevel == 38) {
                                       PacketEncoder packet = new PacketEncoder();
                                       packet.writeShort(SendPacketOpcode.CONTAGION_EFFECT.getValue());
                                       packet.writeInt(0);
                                       packet.writeInt(skillID.getVal());
                                       packet.writeInt(skillLevel);
                                       packet.writeLong(dmg);
                                       packet = new PacketEncoder();
                                       packet.writeShort(SendPacketOpcode.USER_ON_EFFECT.getValue());
                                       packet.write(36);
                                       packet.writeInt(-dmg);
                                       packet.writeShort(0);
                                       packet.writeInt(-dmg);
                                       this.send(packet.getPacket());
                                       packet = new PacketEncoder();
                                       packet.writeShort(SendPacketOpcode.USER_ON_EFFECT_REMOTE.getValue());
                                       packet.writeInt(this.getId());
                                       packet.write(36);
                                       packet.writeInt(-dmg);
                                       packet.writeShort(0);
                                       packet.writeInt(-dmg);
                                       this.getMap().broadcastMessage(packet.getPacket());
                                    } else {
                                       PacketEncoder packet = new PacketEncoder();
                                       packet.writeShort(SendPacketOpcode.USER_ON_EFFECT.getValue());
                                       packet.write(45);
                                       packet.writeInt(skillID.getVal());
                                       packet.writeInt(skillLevel);
                                       this.send(packet.getPacket());
                                       packet = new PacketEncoder();
                                       packet.writeShort(SendPacketOpcode.USER_ON_EFFECT_REMOTE.getValue());
                                       packet.writeInt(this.getId());
                                       packet.write(45);
                                       packet.writeInt(skillID.getVal());
                                       packet.writeInt(skillLevel);
                                       this.getMap().broadcastMessage(packet.getPacket());
                                    }
                                 }
                              }
                           }
                        } else {
                           NormalEffect ex = new NormalEffect(this.getId(), EffectHeader.ResistEffect);
                           this.send(ex.encodeForLocal());
                           this.getMap().broadcastMessage(this, ex.encodeForRemote(), false);
                        }
                     },
                     dd);
      }
   }

   public void onTimeTorrent() {
      if (this.getMap() instanceof Field_Papulatus) {
         Field_Papulatus f = (Field_Papulatus) this.getMap();
         if (f != null) {
            f.onTimeTorrent(this);
         }
      }
   }

   public void onPossessSkill(int skillID) {
      int realSkillID = GameConstants.getLinkedSkillID(skillID);
      SecondaryStatEffect effect = SkillFactory.getSkill(skillID).getEffect(this.getTotalSkillLevel(realSkillID));
      if (effect != null) {
         int cooldown = effect.getCooldown(this);
         this.addCooldown(skillID, System.currentTimeMillis(), cooldown);
         this.send(CField.skillCooldown(skillID, cooldown));
      }

      if (this.getBuffedValue(SecondaryStatFlag.PossessionState) != null) {
         this.temporaryStatReset(SecondaryStatFlag.PossessionState);
      }
   }

   public void checkSoulSkillLevel() {
      Map<Skill, SkillEntry> copySkills = new HashMap<>();

      try {
         this.getSkills().entrySet().stream().forEach(entry -> {
            if (entry != null && entry.getKey() != null && entry.getValue() != null) {
               copySkills.put(entry.getKey(), entry.getValue());
            }
         });
      } catch (Exception var7) {
         System.out.println("스킬 정보 Copy중 오류발생");
         var7.printStackTrace();
      }

      try {
         for (Entry<Skill, SkillEntry> entry : copySkills.entrySet()) {
            boolean f = false;
            if (entry.getKey().getEffect(1) != null && entry.getKey().getEffect(1).getSoulMPCon() > 0) {
               Item item = this.getInventory(MapleInventoryType.EQUIPPED).getItem((short) -11);
               if (item == null) {
                  f = true;
               } else {
                  Equip equip = (Equip) item;
                  if (equip.getSoulSkill() != entry.getKey().getId()) {
                     f = true;
                  }
               }

               if (f) {
                  this.changeSkillLevel(entry.getKey(), -1, 0);
               }
            }
         }
      } catch (Exception var8) {
         System.out.println("기존 소울스킬 체크 후 삭제중 오류 발생");
         var8.printStackTrace();
      }

      Equip weapon = (Equip) this.getInventory(MapleInventoryType.EQUIPPED).getItem((short) -11);
      if (weapon != null && weapon.getSoulEnchanter() != 0 && weapon.getSoulSkill() > 0) {
         if (this.getSkillLevel(this.getEquippedSoulSkill()) <= 0) {
            this.changeSkillLevel(this.getEquippedSoulSkill(), 1, 1);
         }

         SocketEntry socket = SkillOption.getSocket(Integer.valueOf(weapon.getSoulEnchanter()));
         if (socket != null) {
            this.getSecondaryStat().SoulMPX = socket.getSoulMax();
         }

         this.temporaryStatSet(this.getEquippedSoulSkill(), Integer.MAX_VALUE, SecondaryStatFlag.SoulMP,
               this.getSoulCount());
         SecondaryStatEffect e = SkillFactory.getSkill(this.getEquippedSoulSkill()).getEffect(1);
         if (e != null && this.getSoulCount() >= e.getSoulMPCon()) {
            this.temporaryStatSet(this.getEquippedSoulSkill(), Integer.MAX_VALUE, SecondaryStatFlag.FullSoulMP,
                  this.getSoulCount());
         }

         int v = this.getOneInfoQuestInteger(26535, "effect");
         byte effect = 0;
         if (v > 0) {
            effect = (byte) v;
         }

         this.getMap().broadcastMessage(CField.setSoulEffect(this, effect));
      } else {
         Integer value = null;
         if (this.getBuffedValue(SecondaryStatFlag.SoulMP) != null) {
            this.temporaryStatReset(SecondaryStatFlag.SoulMP);
         }

         if (this.getBuffedValue(SecondaryStatFlag.FullSoulMP) != null) {
            this.temporaryStatReset(SecondaryStatFlag.FullSoulMP);
         }
      }

      if (this.getClient().isGm()) {
         this.temporaryStatReset(SecondaryStatFlag.SoulMP);
      }
   }

   public void spawnLocalNpc(int templateID, int x, int y, int f, int fh, boolean canMove) {
      MapleNPC npc = MapleLifeFactory.getNPC(templateID);
      if (npc != null && !npc.getName().equals("MISSINGNO")) {
         Point pos = new Point(x, y);
         npc.setPosition(pos);
         npc.setCy(y);
         npc.setRx0(x - 50);
         npc.setRx1(x + 50);
         npc.setF(f);
         npc.setFh(fh);
         npc.setCustom(true);
         npc.setLocalUserID(this.getId());
         npc.setCanMove(canMove);
         this.getMap().addMapObject(npc);
         this.send(CField.NPCPacket.spawnNPC(npc, true));
         this.send(CField.NPCPacket.npcSpecialAction(npc.getObjectId(), "summon", 0, 0));
      }
   }

   public int getStackEventGauge(int type) {
      if (type == 0) {
         return this.getOneInfoQuestInteger(100711, "point");
      } else if (type == 1) {
         return this.getOneInfoQuestInteger(100712, "point");
      } else {
         return type == 2 ? this.getOneInfoQuestInteger(QuestExConstants.NeoCoreEvent.getQuestID(), "point") : 0;
      }
   }

   public int canGainStackEventGauge(int type) {
      if (type == 0) {
         int today = this.getOneInfoQuestInteger(100711, "today");
         if (today >= 1000000) {
            return 0;
         } else {
            int delta = 1000000 - today;
            return delta / 100;
         }
      } else if (type == 1) {
         int today = this.getOneInfoQuestInteger(100712, "today");
         return today >= 100 ? 0 : 100 - today;
      } else if (type == 2) {
         int today = this.getOneInfoQuestInteger(QuestExConstants.NeoCoreEvent.getQuestID(), "week");
         return today >= 400 ? 0 : 400 - today;
      } else {
         return 0;
      }
   }

   public void gainStackEventGauge(int type, int value, boolean forced) {
      if (!DBConfig.isGanglim) {
         if (type == 0) {
            int today = this.getOneInfoQuestInteger(100711, "today");
            int point = this.getOneInfoQuestInteger(100711, "point");
            int sum = this.getOneInfoQuestInteger(100711, "sum");
            int before = today;
            if (today >= 1000000 && !forced) {
               return;
            }

            if (!forced) {
               today = Math.min(1000000, today + value * 100);
            }

            int delta = forced ? value * 100 : today - before;
            if (!forced) {
               this.updateOneInfo(100711, "today", String.valueOf(today));
            }

            this.updateOneInfo(100711, "point", String.valueOf(Math.max(0, point + delta / 100)));
            this.updateOneInfo(100711, "sum", String.valueOf(Math.max(0, sum + delta)));
            if (today >= 1000000 && !forced) {
               this.updateOneInfo(100711, "lock", "1");
               this.temporaryStatReset(SecondaryStatFlag.MagicBell);
            }
         } else if (type == 1) {
            int todayx = this.getOneInfoQuestInteger(100712, "today");
            int pointx = this.getOneInfoQuestInteger(100712, "point");
            int sumx = this.getOneInfoQuestInteger(100712, "sum");
            int beforex = todayx;
            if (todayx >= 100 && !forced) {
               return;
            }

            if (!forced) {
               todayx = Math.min(100, todayx + value);
            }

            int deltax = forced ? value : todayx - beforex;
            if (!forced) {
               this.updateOneInfo(100712, "today", String.valueOf(todayx));
            }

            this.updateOneInfo(100712, "point", String.valueOf(Math.max(0, pointx + deltax)));
            this.updateOneInfo(100712, "sum", String.valueOf(Math.max(0, sumx + deltax)));
            if (todayx >= 100 && !forced) {
               this.updateOneInfo(100712, "lock", "1");
            }
         } else if (type == 2) {
            int week = this.getOneInfoQuestInteger(QuestExConstants.NeoCoreEvent.getQuestID(), "week");
            int pointxx = this.getOneInfoQuestInteger(QuestExConstants.NeoCoreEvent.getQuestID(), "point");
            int sumxx = this.getOneInfoQuestInteger(QuestExConstants.NeoCoreEvent.getQuestID(), "sum");
            int beforexx = week;
            if (week >= 400 && !forced) {
               return;
            }

            if (!forced) {
               week = Math.min(400, week + value);
            }

            int deltaxx = forced ? value : week - beforexx;
            if (!forced) {
               this.updateOneInfo(QuestExConstants.NeoCoreEvent.getQuestID(), "week", String.valueOf(week));
            }

            this.updateOneInfo(QuestExConstants.NeoCoreEvent.getQuestID(), "point",
                  String.valueOf(Math.max(0, pointxx + deltaxx)));
            this.updateOneInfo(QuestExConstants.NeoCoreEvent.getQuestID(), "sum",
                  String.valueOf(Math.max(0, sumxx + deltaxx)));
            if (week >= 400 && !forced) {
               this.updateOneInfo(QuestExConstants.NeoCoreEvent.getQuestID(), "lock", "1");
            }
         }
      }
   }

   public String getRebirthGrade() {
      int grade = this.getOneInfoQuestInteger(100711, "grade");
      return this.grades[grade];
   }

   public int getRebirthCount() {
      return this.getOneInfoQuestInteger(100711, "point");
   }

   public int getSuperRebirthCount() {
      return this.getOneInfoQuestInteger(100712, "point");
   }

   public void setStackEventGauge() {
      this.send(CField.getStackEventGauge(0, 0));
   }

   public void stackEventGaugeFirstSet() {
      this.updateOneInfo(100711, "point", "0");
      this.updateOneInfo(100711, "today", "0");
      this.updateOneInfo(100711, "sum", "0");
      this.updateOneInfo(100712, "point", "0");
      this.updateOneInfo(100712, "today", "0");
      this.updateOneInfo(100712, "sum", "0");
      this.updateOneInfo(QuestExConstants.NeoCoreEvent.getQuestID(), "point", "0");
      this.updateOneInfo(QuestExConstants.NeoCoreEvent.getQuestID(), "week", "0");
      this.updateOneInfo(QuestExConstants.NeoCoreEvent.getQuestID(), "sum", "0");
      this.setStackEventGauge();
   }

   public void onMagicBell() {
   }

   public void checkExtremeDonation() {
      if (!DBConfig.isGanglim) {
         int v = this.getOneInfoQuestInteger(1234567, "check_e_donation");
         if (v != 1) {
            if (this.getExtremeRealCash() != -1) {
               return;
            }

            int originalMoney = 0;
            int totalPoint = 0;
            PreparedStatement ps = null;
            ResultSet rs = null;

            try (Connection con = DBConnection.getConnection()) {
               ps = con.prepareStatement("SELECT * FROM `donation_log` WHERE `account` = ?");
               ps.setString(1, this.getClient().getAccountName());
               rs = ps.executeQuery();

               while (rs.next()) {
                  String p = rs.getString("price").replace(",", "");
                  int price = Integer.parseInt(p);
                  String name = rs.getString("name");
                  String note = rs.getString("note");
                  originalMoney += price;
                  int point = 0;
                  if (name != null && name.contains("이벤트")) {
                     point += Math.min(500000, (int) (price * 0.5));
                  }

                  if (note != null && note.contains("패키지")) {
                     point += Math.min(500000, (int) (price * 0.5));
                  }

                  point += (int) (price * 0.1);
                  point += price;
                  String a = rs.getString("date");
                  String b = "2021. 3. 15";
                  SimpleDateFormat sdf = new SimpleDateFormat("yyyy. MM. dd");
                  int deltaDay = 0;

                  try {
                     long time = sdf.parse(a).getTime();
                     long target = sdf.parse(b).getTime();
                     long delta = target - time;
                     deltaDay = (int) (delta / 86400000L);
                  } catch (Exception var35) {
                  }

                  int finalPoint = 0;
                  if (deltaDay < 91) {
                     if (deltaDay <= 0 && deltaDay >= -11) {
                        finalPoint = point * 2;
                     } else {
                        finalPoint = point;
                     }
                  } else if (deltaDay >= 91 && deltaDay < 181) {
                     finalPoint = (int) (point * 0.8);
                  } else if (deltaDay >= 181 && deltaDay < 301) {
                     finalPoint = (int) (point * 0.65);
                  } else if (deltaDay >= 301) {
                     finalPoint = (int) (point * 0.5);
                  }

                  totalPoint += finalPoint;
               }

               rs.close();
               ps.close();

               for (int reward : this.getStackRewards(0, originalMoney)) {
                  ps = con.prepareStatement("INSERT INTO `extreme_point_log` (accountid, type) VALUES(?, ?)");
                  ps.setInt(1, this.getAccountID());
                  ps.setString(2, String.valueOf(reward));
                  ps.executeUpdate();
                  ps.close();
               }
            } catch (SQLException var37) {
            } finally {
               try {
                  if (ps != null) {
                     ps.close();
                     PreparedStatement var39 = null;
                  }

                  if (rs != null) {
                     rs.close();
                     ResultSet var40 = null;
                  }
               } catch (SQLException var33) {
               }
            }

            System.out.println("accountName: " + this.getClient().getAccountName() + ", 총 익스트림 포인트 복구 포인트: "
                  + totalPoint + ", 총 누적 금액 : " + originalMoney);
            this.dropMessage(
                  5, "익스트림 포인트 복구 대상 금액 " + totalPoint
                        + " 만큼 강림 포인트로 전환 대상입니다. 3월 27일부터 토요일 자정기준 1주일 마다 20%씩 지급받을 수 있습니다. 상점 시스템 > 포인트 상점에서 지급받으시기 바랍니다.");
            this.extremeRealCash = totalPoint;
            this.updateOneInfo(1234567, "check_e_donation", "1");
         }
      }
   }

   public List<Integer> getStackRewards(int beforeTotalPoint, int point) {
      List<Integer> ret = new ArrayList<>();
      int[] rewards = new int[] {
            10,
            30,
            50,
            75,
            100,
            150,
            200,
            250,
            300,
            350,
            400,
            450,
            500,
            550,
            600,
            650,
            700,
            750,
            800,
            850,
            900,
            950,
            1000,
            1050,
            1100,
            1150,
            1200,
            1250,
            1300,
            1350,
            1400,
            1450,
            1500,
            1550,
            1600,
            1650,
            1700,
            1750,
            1800,
            1850,
            1900,
            1950,
            2000,
            2100,
            2200,
            2300,
            2400,
            2500,
            2600,
            2700,
            2800,
            2900,
            3000,
            3100,
            3200,
            3300,
            3400,
            3500,
            3600,
            3700,
            3800,
            3900,
            4000,
            4100,
            4200,
            4300,
            4400,
            4500,
            4600,
            4700,
            4800,
            4900,
            5000
      };
      if (DBConfig.isGanglim) {
         rewards = new int[] {
               10,
               30,
               50,
               75,
               100,
               150,
               200,
               250,
               300,
               350,
               400,
               450,
               500,
               600,
               750,
               900,
               1000,
               1100,
               1250,
               1400,
               1500,
               1600,
               1750,
               1900,
               2000,
               2100,
               2200,
               2300,
               2400,
               2500
         };
      }

      for (int reward : rewards) {
         if (reward * 10000 > beforeTotalPoint) {
            if (reward * 10000 > beforeTotalPoint + point) {
               break;
            }

            ret.add(reward);
         }
      }

      return ret;
   }

   public ScriptEngineNPC getScriptThread() {
      return this.scriptThread;
   }

   public void setScriptThread(ScriptEngineNPC scriptThread) {
      this.scriptThread = scriptThread;
   }

   public void updatePetSkills() {
      MapleItemInformationProvider ii = MapleItemInformationProvider.getInstance();
      new HashMap();
      List<Integer> petItemIds = new ArrayList<>();

      for (int i = 0; i < 3; i++) {
         if (this.getPet(i) != null) {
            petItemIds.add(this.getPet(i).getPetItemId());
         }
      }

      this.getSkills()
            .entrySet()
            .stream()
            .filter(s -> s.getKey().getSetItemPartsCount() > 0 && s.getKey().getSetItemReason() > 0)
            .collect(Collectors.toList())
            .forEach(s -> this.changeSkillLevel(s.getKey(), -1, -1));

      for (int petId : petItemIds) {
         int level = 0;
         StructSetItem setItem = ii.getSetItem(ii.getSetItemID(petId));
         if (setItem != null) {
            for (int setItemId : setItem.itemIDs) {
               if (petItemIds.contains(setItemId)) {
                  level++;
               }
            }

            for (int ix = 1; ix <= level; ix++) {
               StructSetItem.SetItem set = setItem.items.get(ix);
               if (set != null) {
                  StructSetItem.ActiveSkill activeSkill = set.activeSkill;
                  if (activeSkill != null) {
                     StructSetItem.ActiveSkill.ActiveSkillEntry entry = activeSkill.getActiveSkills().get(0);
                     if (entry != null) {
                        this.changeSkillLevel(entry.getId(), entry.getLevel(), entry.getLevel());
                     }
                  }
               }
            }
         }
      }
   }

   public void postRunScript(String script, int npcID) {
      if (ScriptManager.get()._scripts.get(script) != null) {
         MapleNPC npc = MapleLifeFactory.getNPC(npcID);
         ScriptManager.runScript(this.getClient(), script, npc, null);
      }
   }

   public boolean checkUnstableMemorize(int skillID) {
      Object ID = this.getJobField("memoryChoiceSkillID");
      return ID != null && (Integer) ID == skillID;
   }

   public boolean checkSpiritFlow(int skillID) {
      Object ID = this.getJobField("randomSkillID");
      return ID != null && (Long) ID == skillID;
   }

   public void doActiveSkillCooltime(int realSkillID, int skillID, int skillLevel) {
      SecondaryStatEffect real = SkillFactory.getSkill(realSkillID).getEffect(skillLevel);
      if (!this.checkSpiritFlow(skillID)
            && !this.checkSpiritFlow(realSkillID)
            && !this.checkUnstableMemorize(skillID)
            && !this.checkUnstableMemorize(realSkillID)) {
         int cooldown = 0;
         if (real != null) {
            int origReal = real.getSourceId();
            cooldown = real.getCooldown(this);
            if (GameConstants.getCooldown6thActiveSkill(skillID) > 0) {
               realSkillID = GameConstants.getCooldown6thActiveSkill(skillID);
            }

            if (realSkillID == 33101115) {
               realSkillID = 33101215;
            } else {
               switch (skillID) {
                  case 154101004:
                  case 154111004:
                  case 164121015:
                  case 400001044:
                  case 400011100:
                  case 400011135:
                     realSkillID = skillID;
               }
            }

            if (skillID == 154111011) {
               realSkillID = 154111004;
            }

            if (skillID == 2311015) {
               real = SkillFactory.getSkill(realSkillID).getEffect(skillLevel);
            }

            if (skillID == 25111209 || skillID == 400021032 || skillID == 400021003 || skillID == 27111004
                  || skillID == 2111011) {
               return;
            }

            if (GameConstants.isPrepareApplyCooltimeSkill(skillID, realSkillID)
                  && (skillID != 400021122 || !this.skillisCooling(skillID))) {
               if (origReal != real.getSourceId()) {
                  cooldown = real.getCooldown(this);
               }

               this.send(CField.skillCooldown(realSkillID, cooldown));
               this.addCooldown(realSkillID, System.currentTimeMillis(), cooldown);
            }
         }
      }

      if (this.checkUnstableMemorize(skillID) && !this.getMemorize()) {
         this.send(CField.skillCooldown(skillID, real.getCooldown(this)));
         this.addCooldown(skillID, System.currentTimeMillis(), real.getCooldown(this));
      }

      label85: switch (skillID) {
         case 2211015:
            SecondaryStatEffect effxxx = SkillFactory.getSkill(skillID).getEffect(skillLevel);
            if (effxxx != null) {
               this.send(CField.skillCooldown(skillID, effxxx.getQ2() * 1000));
               this.addCooldown(skillID, System.currentTimeMillis(), effxxx.getQ2() * 1000);
            }
            break;
         case 2321016:
            SecondaryStatEffect effxx = SkillFactory.getSkill(skillID).getEffect(skillLevel);
            if (effxx != null) {
               int reduceTime = 1000
                     * Math.min(effxx.getV2(), this.getStat().getTotalInt() / effxx.getS() * effxx.getW2());
               this.send(CField.skillCooldown(skillID, effxx.getCooldown(this) - reduceTime));
               this.addCooldown(skillID, System.currentTimeMillis(), effxx.getCooldown(this) - reduceTime);
            }
            break;
         case 25121133:
            SecondaryStatEffect effx = SkillFactory.getSkill(25121131).getEffect(this.getSkillLevel(25121131));
            if (effx != null) {
               this.send(CField.skillCooldown(25121133, effx.getCooldown(this)));
               this.addCooldown(25121133, System.currentTimeMillis(), effx.getCooldown(this));
            }
            break;
         case 400001021:
            this.setMemorize(true);
            int randomValue = Randomizer.nextInt(100);
            int value = 0;

            for (Pair<Integer, Integer> coolTime : SkillFactory.getSkill(skillID).getCoolTimeReduceList()) {
               value += coolTime.getLeft();
               if (value >= randomValue) {
                  int reduceRate = coolTime.getRight();
                  long changeValue = (long) (-(real.getCooldown(this) * reduceRate * 0.01));
                  this.changeCooldown(skillID, changeValue);
                  break label85;
               }
            }
            break;
         case 400011001:
            if (this.getCooldownLimit(400011001) <= 0L) {
               SecondaryStatEffect eff = SkillFactory.getSkill(400011001).getEffect(this.getSkillLevel(400011001));
               if (eff != null) {
                  this.send(CField.skillCooldown(400011001, eff.getX() * 1000));
                  this.addCooldown(400011001, System.currentTimeMillis(), eff.getX() * 1000);
               }
            }
            break;
         case 400011053:
            SecondaryStatEffect eff = SkillFactory.getSkill(400011053).getEffect(this.getSkillLevel(400011052));
            if (eff != null) {
               this.send(CField.skillCooldown(400011052, eff.getCooldown(this)));
               this.addCooldown(400011052, System.currentTimeMillis(), eff.getCooldown(this));
            }
      }

      if (this.hasBuffBySkillID(80001875)) {
         int runeChannel = this.getOneInfoQuestInteger(QuestExConstants.CustomQuests.getQuestID(), "RuneChannel");
         int runeMap = this.getOneInfoQuestInteger(QuestExConstants.CustomQuests.getQuestID(), "RuneMapID");
         if (runeChannel == this.getClient().getChannel()
               && runeMap == this.getMapId()
               && GameConstants.isResettableCooltimeSkill(skillID)
               && this.getRemainCooltime(skillID) >= 5000L) {
            this.rawSetCooldown(skillID, 5000L);
         }
      }
   }

   public boolean onApplyImmuneBarrier() {
      SecondaryStatEffect effect = this.getSkillLevelData(101120109);
      if (effect != null && effect.makeChanceResult()) {
         int value = (int) (effect.getX() * (this.getStat().getCurrentMaxHp(this) * 0.01));
         this.getSecondaryStat().ImmuneBarrierX = value;
         this.temporaryStatSet(SecondaryStatFlag.ImmuneBarrier, 101120109,
               effect.getDuration(effect.getDuration(), this), value);
         return true;
      } else {
         return false;
      }
   }

   public void resetDarkLightning() {
      this.darkLightning.clear();
      this.send(MobPacket.mobTemporarySetDarkLightning(null, 0));
   }

   public void addDarkLightning(int objectId, int count) {
      this.darkLightning.put(objectId, new DarkLigntningEntry(count, System.currentTimeMillis()));
      this.send(MobPacket.mobTemporarySetDarkLightning(this.darkLightning, 15000));
   }

   public void removeDarkLightning(int objectId) {
      DarkLigntningEntry dark = this.darkLightning.get(objectId);
      if (dark != null) {
         dark.decRemainCount();
         if (dark.getRemainCount() <= 0 || this.getBuffedValue(SecondaryStatFlag.AbyssalLightning) == null) {
            this.darkLightning.remove(objectId);
            this.send(MobPacket.mobTemporarySetDarkLightning(this.darkLightning, 15000));
         }
      }
   }

   public DarkLigntningEntry getDarkLightning(int objectId) {
      return this.darkLightning.get(objectId) != null ? this.darkLightning.get(objectId) : null;
   }

   public void updateDarkLightning() {
      List<Integer> removes = new ArrayList<>();

      for (Integer dark : this.darkLightning.keySet()) {
         if (this.darkLightning.get(dark) != null
               && this.darkLightning.get(dark).getEndTime() <= System.currentTimeMillis()) {
            removes.add(dark);
         }
      }

      for (Integer remove : removes) {
         this.darkLightning.remove(remove);
      }
   }

   public long getYetiBoosterTill() {
      return this.YetiBoosterTill;
   }

   public void setYetiBoosterTill(long time) {
      this.YetiBoosterTill = time;
   }

   public long getPinkBeanYoyoTill() {
      return this.PinkBeanYoyoTill;
   }

   public void setPinkBeanYoyoTill(long time) {
      this.PinkBeanYoyoTill = time;
   }

   public BlackRebirthFlame getBlackRebirthFlame() {
      return this.blackRebirthFlame;
   }

   public void setBlackRebirthFlame(BlackRebirthFlame brf) {
      this.blackRebirthFlame = brf;
   }

   public boolean isStateIrkallasWrath() {
      return this.StateIrkallasWrath;
   }

   public void setStateIrkallasWrath(boolean state) {
      this.StateIrkallasWrath = state;
   }

   public void encodeZeroInheritanceUpgrade(PacketEncoder p, int currentLevel, int reqNextLv, int newLevel, int item,
         int count) {
      p.write(1);
      p.write(1);
      p.writeInt(currentLevel);
      p.writeInt(reqNextLv);
      p.writeInt(1572000 + newLevel);
      p.writeInt(1562000 + newLevel);
      p.writeInt(newLevel);
      p.writeInt(item);
      p.writeInt(count);
      p.write(1);
      p.writeInt(0);
      p.writeInt(0);
      p.writeInt(0);
      p.writeInt(0);
      p.writeInt(0);
      p.writeInt(0);
   }

   public void openInheritanceUpgrade(int newLevel, int item, int count) {
      PacketEncoder packet = new PacketEncoder();
      packet.writeShort(SendPacketOpcode.INHERITANCE_INFO.getValue());
      int currentLevel = this.getOneInfoQuestInteger(40981, "lv");
      int reqNextLv = GameConstants.getZeroInheritanceNeedLevel(newLevel);
      this.encodeZeroInheritanceUpgrade(packet, currentLevel, reqNextLv, newLevel, item, count);
      this.send(packet.getPacket());
   }

   public void updateCountGoldenWagon() {
      SimpleDateFormat lastDate = new SimpleDateFormat("yy/MM/dd");
      if (this.getOneInfoQuest(1234699, "day").equals("")) {
         this.updateOneInfo(1234699, "count", "0");
         this.updateOneInfo(1234699, "complete", "0");
         this.updateOneInfo(1234699, "day", "0");
         this.updateOneInfo(1234699, "dailyGiftCT", "0");
         this.updateOneInfo(1234699, "passCount", "0");
         this.updateOneInfo(1234699, "bMaxDay", "126");
         this.updateOneInfo(1234699, "lastDate", lastDate.format(new Date()));
         this.updateOneInfo(1234699, "cMaxDay", "126");
      }

      this.updateOneInfo(1234699, "count", this.getOneInfoQuestInteger(1234699, "count") + 1 + "");

      try {
         if (lastDate.parse(this.getOneInfoQuest(1234699, "lastDate"))
               .before(lastDate.parse(lastDate.format(new Date())))) {
            this.updateOneInfo(1234699, "count", "0");
            this.updateOneInfo(1234699, "lastDate", lastDate.format(new Date()));
            this.updateOneInfo(1234699, "complete", "0");
            this.updateOneInfo(1234699, "dailyGiftCT", "0");
         }
      } catch (ParseException var3) {
      }
   }

   public void doSpecialRebirth() {
      this.send(CField.makeEffectScreen("Effect/5skill.img/screen"));
      this.send(CField.playSE("Sound/SoundEff.img/5thJob"));
      this.updateOneInfo(100711, "point", String.valueOf(this.getRebirthCount() + 2));
      int index = this.getLevel() - 250;
      int rp = 100 + index * 3;
      if (this.getLevel() >= 260) {
         rp += 10;
      }

      if (this.getLevel() >= 265) {
         rp += 10;
      }

      if (this.getLevel() >= 270) {
         rp += 10;
      }

      if (this.getLevel() >= 275) {
         rp += 10;
      }

      if (this.getLevel() >= 280) {
         rp += 10;
      }

      if (this.getLevel() >= 285) {
         rp += 10;
      }

      if (this.getLevel() >= 290) {
         rp += 10;
      }

      if (this.getLevel() >= 295) {
         rp += 10;
      }

      if (this.getLevel() >= 300) {
         rp += 10;
      }

      rp *= 2;
      this.level = 235;
      int sum = this.getOneInfoQuestInteger(100711, "sum");
      this.updateOneInfo(100711, "sum", String.valueOf(sum + rp * 100));
      this.updateOneInfo(100777, "point", String.valueOf(this.getOneInfoQuestInteger(100711, "sum") / 100));
      int total = this.getOneInfoQuestInteger(100711, "total");
      this.updateOneInfo(100711, "total", String.valueOf(total + rp));
      int today = this.getOneInfoQuestInteger(100711, "today");
      this.updateOneInfo(100711, "today", String.valueOf(today + 200));
      short ap = 999;
      int rc = this.getRebirthCount() + this.getSuperRebirthCount();
      ap = (short) Math.min(32767, ap + rc * 5);
      Map<MapleStat, Long> statups = new EnumMap<>(MapleStat.class);
      int hp = this.getOneInfoQuestInteger(100710, "ap_hp");
      int mp = this.getOneInfoQuestInteger(100710, "ap_mp");
      this.getStat().setMaxHp(this.getStat().getMaxHp() - hp, this);
      this.getStat().setMaxMp(this.getStat().getMaxMp() - mp, this);
      this.updateOneInfo(100710, "ap_hp", "0");
      this.updateOneInfo(100710, "ap_mp", "0");
      this.setRemainingAp(ap);
      this.getStat().setStr((short) 4, this);
      this.getStat().setDex((short) 4, this);
      this.getStat().setInt((short) 4, this);
      this.getStat().setLuk((short) 4, this);
      statups.put(MapleStat.STR, 4L);
      statups.put(MapleStat.DEX, 4L);
      statups.put(MapleStat.INT, 4L);
      statups.put(MapleStat.LUK, 4L);
      statups.put(MapleStat.MAXHP, this.getStat().getMaxHp());
      statups.put(MapleStat.MAXMP, this.getStat().getMaxMp());
      statups.put(MapleStat.LEVEL, 235L);
      statups.put(MapleStat.AVAILABLEAP, (long) ap);
      this.send(CWvsContext.updatePlayerStats(statups, true, this));
      Center.Broadcast.broadcastMessage(
            CField.chatMsg(
                  19,
                  this.getName()
                        + " : "
                        + this.getName()
                        + "님이 초월 환생을 하여 누적 환생 횟수 "
                        + this.getRebirthCount()
                        + "회(각성: "
                        + this.getSuperRebirthCount()
                        + "회)를 달성하였습니다."));
   }

   public void doRebirth() {
      this.send(CField.makeEffectScreen("Effect/5skill.img/screen"));
      this.send(CField.playSE("Sound/SoundEff.img/5thJob"));
      this.updateOneInfo(100711, "point", String.valueOf(this.getRebirthCount() + 1));
      int index = this.getLevel() - 250;
      int rp = 100 + index * 3;
      if (this.getLevel() >= 260) {
         rp += 10;
      }

      if (this.getLevel() >= 265) {
         rp += 10;
      }

      if (this.getLevel() >= 270) {
         rp += 10;
      }

      if (this.getLevel() >= 275) {
         rp += 10;
      }

      if (this.getLevel() >= 280) {
         rp += 10;
      }

      if (this.getLevel() >= 285) {
         rp += 10;
      }

      if (this.getLevel() >= 290) {
         rp += 10;
      }

      if (this.getLevel() >= 295) {
         rp += 10;
      }

      if (this.getLevel() >= 300) {
         rp += 10;
      }

      this.level = 235;
      int sum = this.getOneInfoQuestInteger(100711, "sum");
      this.updateOneInfo(100711, "sum", String.valueOf(sum + rp * 100));
      this.updateOneInfo(100777, "point", String.valueOf(this.getOneInfoQuestInteger(100711, "sum") / 100));
      int total = this.getOneInfoQuestInteger(100711, "total");
      this.updateOneInfo(100711, "total", String.valueOf(total + rp));
      int today = this.getOneInfoQuestInteger(100711, "today");
      this.updateOneInfo(100711, "today", String.valueOf(today + 100));
      short ap = 999;
      int rc = this.getRebirthCount() + this.getSuperRebirthCount();
      ap = (short) Math.min(32767, ap + rc * 5);
      Map<MapleStat, Long> statups = new EnumMap<>(MapleStat.class);
      int hp = this.getOneInfoQuestInteger(100710, "ap_hp");
      int mp = this.getOneInfoQuestInteger(100710, "ap_mp");
      this.getStat().setMaxHp(this.getStat().getMaxHp() - hp, this);
      this.getStat().setMaxMp(this.getStat().getMaxMp() - mp, this);
      this.updateOneInfo(100710, "ap_hp", "0");
      this.updateOneInfo(100710, "ap_mp", "0");
      this.setRemainingAp(ap);
      this.getStat().setStr((short) 4, this);
      this.getStat().setDex((short) 4, this);
      this.getStat().setInt((short) 4, this);
      this.getStat().setLuk((short) 4, this);
      statups.put(MapleStat.STR, 4L);
      statups.put(MapleStat.DEX, 4L);
      statups.put(MapleStat.INT, 4L);
      statups.put(MapleStat.LUK, 4L);
      statups.put(MapleStat.MAXHP, this.getStat().getMaxHp());
      statups.put(MapleStat.MAXMP, this.getStat().getMaxMp());
      statups.put(MapleStat.LEVEL, 235L);
      statups.put(MapleStat.AVAILABLEAP, (long) ap);
      this.send(CWvsContext.updatePlayerStats(statups, true, this));
      Center.Broadcast.broadcastMessage(
            CField.chatMsg(
                  19,
                  this.getName() + " : " + this.getName() + "님이 환생을 하여 누적 환생 횟수 " + this.getRebirthCount() + "회(각성: "
                        + this.getSuperRebirthCount() + "회)를 달성하였습니다."));
   }

   public void doSuperRebirth() {
      this.send(CField.makeEffectScreen("Effect/5skill.img/screen"));
      this.send(CField.playSE("Sound/SoundEff.img/5thJob"));
      this.updateOneInfo(100712, "point", String.valueOf(this.getSuperRebirthCount() + 1));
      int index = this.getLevel() - 275;
      this.level = 235;
      int rp = 300;
      int sum = this.getOneInfoQuestInteger(100711, "sum");
      this.updateOneInfo(100711, "sum", String.valueOf(sum + rp * 100));
      this.updateOneInfo(100777, "point", String.valueOf(this.getOneInfoQuestInteger(100711, "sum") / 100));
      int total = this.getOneInfoQuestInteger(100711, "total");
      this.updateOneInfo(100711, "total", String.valueOf(total + rp));
      rp = Randomizer.rand(5, 10);
      sum = this.getOneInfoQuestInteger(100712, "sum");
      this.updateOneInfo(100712, "sum", String.valueOf(sum + rp));
      this.updateOneInfo(100778, "point", String.valueOf(this.getOneInfoQuestInteger(100712, "sum")));
      total = this.getOneInfoQuestInteger(100712, "total");
      this.updateOneInfo(100712, "total", String.valueOf(total + rp));
      int today = this.getOneInfoQuestInteger(100712, "today");
      this.updateOneInfo(100712, "today", String.valueOf(today + 1));
      short ap = 999;
      int rc = this.getRebirthCount() + this.getSuperRebirthCount();
      ap = (short) Math.min(32767, ap + rc * 5);
      Map<MapleStat, Long> statups = new EnumMap<>(MapleStat.class);
      int hp = this.getOneInfoQuestInteger(100710, "ap_hp");
      int mp = this.getOneInfoQuestInteger(100710, "ap_mp");
      this.getStat().setMaxHp(this.getStat().getMaxHp() - hp, this);
      this.getStat().setMaxMp(this.getStat().getMaxMp() - mp, this);
      this.updateOneInfo(100710, "ap_hp", "0");
      this.updateOneInfo(100710, "ap_mp", "0");
      this.setRemainingAp(ap);
      this.level = 235;
      this.getStat().setStr((short) 4, this);
      this.getStat().setDex((short) 4, this);
      this.getStat().setInt((short) 4, this);
      this.getStat().setLuk((short) 4, this);
      statups.put(MapleStat.STR, 4L);
      statups.put(MapleStat.DEX, 4L);
      statups.put(MapleStat.INT, 4L);
      statups.put(MapleStat.LUK, 4L);
      statups.put(MapleStat.MAXHP, this.getStat().getMaxHp());
      statups.put(MapleStat.MAXMP, this.getStat().getMaxMp());
      statups.put(MapleStat.LEVEL, 235L);
      statups.put(MapleStat.AVAILABLEAP, (long) ap);
      this.send(CWvsContext.updatePlayerStats(statups, true, this));
      Center.Broadcast.broadcastMessage(
            CField.chatMsg(
                  19,
                  this.getName() + " : " + this.getName() + "님이 각성을 하여 누적 환생 횟수 " + this.getRebirthCount() + "회(각성: "
                        + this.getSuperRebirthCount() + "회)를 달성하였습니다."));
      int sp = this.getOneInfoQuestInteger(501045, "sp");
      this.updateOneInfo(501045, "sp", String.valueOf(sp + 1));
      this.send(
            CField.addPopupSay(9062000, 3000, "#b강림 리버스 멤버십 스킬 포인트(SP) 1개#k를 획득하였습니다.\r\n왼쪽 별모양 아이콘을 통해 확인해보세요.", ""));
      this.dropMessage(5, "강림 리버스 멤버십 스킬 포인트(SP) 1개를 획득하였습니다. 왼쪽 별모양 아이콘을 통해 확인해보세요.");
   }

   public void tryApplyAbnormal(MobSkillInfo mobSkillInfo) {
      for (AffectedOtherSkill skill : mobSkillInfo.getAffectedOtherSkills()) {
         MobSkillInfo s = MobSkillFactory.getMobSkill(skill.getAffectedOtherSkillID(),
               skill.getAffectedOtherSkillLev());
         if (s != null) {
            long next = 0L;

            for (Entry<AffectedOtherSkill, Long> entry : this.areaAbnormalApplied.entrySet()) {
               if (entry.getKey().getAffectedOtherSkillID() == s.getSkillId()
                     && entry.getKey().getAffectedOtherSkillLev() == s.getSkillLevel()) {
                  next = entry.getValue();
                  break;
               }
            }

            if (next == 0L || next <= System.currentTimeMillis()) {
               AffectedOtherSkill afs = null;

               for (Entry<AffectedOtherSkill, Long> entryx : this.areaAbnormalApplied.entrySet()) {
                  if (entryx.getKey().getAffectedOtherSkillID() == s.getSkillId()
                        && entryx.getKey().getAffectedOtherSkillLev() == s.getSkillLevel()) {
                     afs = entryx.getKey();
                     break;
                  }
               }

               if (afs == null) {
                  afs = new AffectedOtherSkill(s.getSkillId(), s.getSkillLevel());
               }

               this.areaAbnormalApplied.put(afs,
                     System.currentTimeMillis() + s.getSkillStatIntValue(MobSkillStat.interval));
               SecondaryStatFlag flag = SecondaryStatFlag.getBySkill(afs.getAffectedOtherSkillID());
               if (flag != null) {
                  this.giveDebuff(flag,
                        MobSkillFactory.getMobSkill(afs.getAffectedOtherSkillID(), afs.getAffectedOtherSkillLev()),
                        true);
               }
            }
         }
      }
   }

   public void checkSpecialCoreSkills(String condType, int mobObjectId, SecondaryStatEffect effect) {
      try {
         if (effect != null && (effect.getSourceId() == 25101205 || effect.getSourceId() == 100001266)) {
            return;
         }

         long time = System.currentTimeMillis();
         Pair<Integer, Integer> coredata = this.getEquippedSpecialCore();
         if (coredata == null) {
            return;
         }

         int coreId = coredata.getLeft();
         int coreSkillId = coredata.getRight();
         VSpecialCoreOption spOption = VCoreData.getSpecialCoreOption(coreId);
         if (spOption == null || !spOption.getCondType().equals(condType)) {
            return;
         }

         String var10 = spOption.getCondType();
         switch (var10) {
            case "hitCount":
            case "attackCount":
            case "killCount":
               if (spOption.getValidTime() > 0 && time > this.getSpLastValidTime() + spOption.getValidTime()) {
                  this.setSpCount(0);
               }

               if (!this.skillisCooling(coreSkillId)) {
                  this.gainSpCount(1);
                  if (this.getSpCount() >= spOption.getCount()) {
                     this.applySpecialCoreSkills(spOption);
                     this.gainSpCount(-spOption.getCount());
                  }
               }

               this.setSpLastValidTime(time);
               break;
            case "attackCountMob":
               if (spOption.getValidTime() > 0 && time > this.getSpLastValidTime() + spOption.getValidTime()) {
                  this.setSpCount(0);
                  this.setSpAttackCountMobId(0);
               }

               if (mobObjectId != this.getSpAttackCountMobId()) {
                  this.setSpAttackCountMobId(mobObjectId);
                  this.setSpCount(0);
               } else if (!this.skillisCooling(coreSkillId)) {
                  this.gainSpCount(1);
                  if (this.getSpCount() >= spOption.getCount()) {
                     this.applySpecialCoreSkills(spOption);
                     this.gainSpCount(-spOption.getCount());
                  }
               }

               this.setSpLastValidTime(time);
               break;
            case "rune":
            case "cooltime":
               if (!this.skillisCooling(coreSkillId) && effect != null) {
                  this.applySpecialCoreSkills(spOption);
               }
               break;
            case "combokill":
               if (this.getMonsterCombo() > 0 && this.getMonsterCombo() % spOption.getCount() == 0
                     && !this.skillisCooling(coreSkillId)) {
                  this.applySpecialCoreSkills(spOption);
               }

               this.setSpLastValidTime(time);
               break;
            case "die":
               if (!this.skillisCooling(coreSkillId)) {
                  this.applySpecialCoreSkills(spOption);
               }
               break;
            case "prob":
               if (spOption.getValidTime() > 0 && time > this.getSpLastValidTime() + spOption.getValidTime()) {
                  this.setSpLastValidTime(time);
               }

               if (!this.skillisCooling(coreSkillId)) {
                  int succ = (int) (1.0 / spOption.getProb());
                  if (Randomizer.isSuccess(succ, 1000000)) {
                     this.applySpecialCoreSkills(spOption);
                  }
               }
         }
      } catch (Exception var13) {
         System.out.println("SpecialCoreCheck Err");
         var13.printStackTrace();
      }
   }

   public void resetSpecialCoreStat() {
      this.setSpLastValidTime(0L);
      this.setSpCount(0);
      this.setSpAttackCountMobId(0);
   }

   public void applySpecialCoreSkills(VSpecialCoreOption spOption) {
      long time = System.currentTimeMillis();
      String packet = spOption.getEffectType();
      switch (packet) {
         case "selfbuff":
            SecondaryStatEffect effect = SkillFactory.getSkill(spOption.getSkillId())
                  .getEffect(spOption.getSkillLevel());
            if (effect != null) {
               effect.applyTo(this);
            }
            break;
         case "heal":
            if (this.getBuffedValue(SecondaryStatFlag.DebuffIncHP) != null) {
               return;
            }

            this.addHP(this.getStat().getCurrentMaxHp() * spOption.getHealPercent() / 100L, false);
            break;
         case "reduceCooltime":
            for (MapleCoolDownValueHolder a : this.getCooldowns()) {
               Skill skill = SkillFactory.getSkill(a.skillId);
               if (skill == null || !skill.isNotCooltimeReset()) {
                  int reduc = (int) ((System.currentTimeMillis() - a.startTime) * spOption.getReducePercent() / 100L);
                  this.changeCooldown(a.skillId, -reduc);
               }
            }
      }

      this.addCooldown(spOption.getSkillId(), time, spOption.getCoolTime());
      var packet2 = new PacketEncoder();
      packet2.writeShort(SendPacketOpcode.USER_ON_EFFECT.getValue());
      packet2.write(29);
      packet2.writeMapleAsciiString("Effect/CharacterEff.img/VMatrixSP");
      this.send(packet2.getPacket());
   }

   public void addSerenLaserDebuffTime(int time) {
      if (this.serenLaserDebuffEndTime != 0L && this.serenLaserDebuffEndTime > System.currentTimeMillis()) {
         this.serenLaserDebuffEndTime += time;
      } else {
         this.send(CField.blind(1, 255, 255, 255, 255, 700, 0));
         this.serenLaserDebuffEndTime = System.currentTimeMillis() + time;
      }
   }

   public void update() {
      try {
         this.doRegisterTransferField();
      } catch (Exception var15) {
         System.out
               .println("[오류] 캐릭터 doRegisterTransferField 함수 실행중 오류 발생 (캐릭터 이름: " + this.getName() + " ) : " + var15);
         var15.printStackTrace();
      }

      try {
         this.checkAntiMacroTime();
      } catch (Exception var14) {
         System.out.println("[오류] 캐릭터 checkAntiMacroTime 함수 실행중 오류 발생 (캐릭터 이름: " + this.getName() + " ) : " + var14);
         var14.printStackTrace();
      }

      try {
         this.checkRandomPortal();
      } catch (Exception var13) {
         System.out.println("[오류] 캐릭터 checkRandomPortal 함수 실행중 오류 발생 (캐릭터 이름: " + this.getName() + " ) : " + var13);
         var13.printStackTrace();
      }

      try {
         this.handleSecondaryStat();
      } catch (IndexOutOfBoundsException | NullPointerException var12) {
         System.out.println("[오류] 캐릭터 handleSecondaryStat 함수 실행중 오류 발생 (캐릭터 이름: " + this.getName() + " ) : " + var12);
         var12.printStackTrace();
      }

      try {
         BasicJob basicJob = this.getPlayerJob();
         if (basicJob != null) {
            basicJob.updatePerSecond();
         }
      } catch (Exception var11) {
         System.out
               .println("[오류] 캐릭터 basicJob.updatePerSecond 함수 실행중 오류 발생 (캐릭터 이름: " + this.getName() + " ) : " + var11);
         var11.printStackTrace();
      }

      try {
         this.checkConsumeItemLimit();
      } catch (Exception var10) {
         System.out.println("[오류] 캐릭터 checkRandomPortal 함수 실행중 오류 발생 (캐릭터 이름: " + this.getName() + " ) : " + var10);
         var10.printStackTrace();
      }

      try {
         this.updateFrozenLink();
      } catch (Exception var9) {
         System.out.println("[오류] 캐릭터 updateFrozenLink 함수 실행중 오류 발생 (캐릭터 이름: " + this.getName() + " ) : " + var9);
         var9.printStackTrace();
      }

      try {
         this.summonAffectedToMob();
      } catch (Exception var8) {
         System.out.println("[오류] 캐릭터 summonAffectedToMob 함수 실행중 오류 발생 (캐릭터 이름: " + this.getName() + " ) : " + var8);
         var8.printStackTrace();
      }

      try {
         this.mistAffectedToPlayer();
      } catch (Exception var7) {
         System.out.println("[오류] 캐릭터 mistAffectedToPlayer 함수 실행중 오류 발생 (캐릭터 이름: " + this.getName() + " ) : " + var7);
         var7.printStackTrace();
      }

      try {
         this.updateUnion();
      } catch (Exception var6) {
         System.out.println("[오류] 캐릭터 updateUnion 함수 실행중 오류 발생 (캐릭터 이름: " + this.getName() + " ) : " + var6);
         var6.printStackTrace();
      }

      try {
         this.updateEliteBossCurse();
      } catch (Exception var5) {
         System.out.println("[오류] 캐릭터 updateEliteBossCurse 함수 실행중 오류 발생 (캐릭터 이름: " + this.getName() + " ) : " + var5);
         var5.printStackTrace();
      }

      try {
         if (this.getJob() >= 3210 && this.getJob() <= 3212) {
            this.updateDarkLightning();
         }
      } catch (Exception var4) {
         System.out.println("[오류] 캐릭터 updateDarkLightning 함수 실행중 오류 발생 (캐릭터 이름: " + this.getName() + " ) : " + var4);
         var4.printStackTrace();
      }

      try {
         this.updateMusic();
      } catch (Exception var3) {
         System.out.println("[오류] 캐릭터 updateMusic 함수 실행중 오류 발생 (캐릭터 이름: " + this.getName() + " ) : " + var3);
         var3.printStackTrace();
      }

      try {
         this.updateChannelChange();
      } catch (Exception var2) {
         System.out.println("[오류] 캐릭터 updateChannelChange 함수 실행중 오류 발생 (캐릭터 이름: " + this.getName() + " ) : " + var2);
         var2.printStackTrace();
      }

      this.updateCountGoldenWagon();
      this.updateFatigue();
      this.updateHotTime();
   }

   private void updateChannelChange() {
      if (this.updateChannelTime == 0L) {
         this.updateChannelTime = System.currentTimeMillis();

         try {
            int[] buddyIds = this.getBuddylist().getBuddyIds();
            Center.Buddy.loggedOn(this.getName(), this.getId(), this.getAccountID(), this.getClient().getChannel(),
                  buddyIds);
            if (this.getParty() != null) {
               Party party = this.getParty();
               Center.Party.updateParty(party.getId(), PartyOperation.LogOnOff, new PartyMemberEntry(this));
            }

            AccountIdChannelPair[] onlineBuddies = Center.Find.multiBuddyFind(this.getBuddylist(), buddyIds);

            for (AccountIdChannelPair onlineBuddy : onlineBuddies) {
               this.getBuddylist().get(onlineBuddy.getAccountId()).setChannel(onlineBuddy.getChannel());
            }

            this.getBuddylist().setChanged(true);
            this.send(CWvsContext.BuddylistPacket.updateBuddylist(this.getBuddylist().getBuddies(), null, (byte) 21));
            Messenger messenger = this.getMessenger();
            if (messenger != null) {
               Center.Messenger.silentJoinMessenger(messenger.getId(), new MessengerCharacter(this));
               Center.Messenger.updateMessenger(messenger.getId(), this.getName(), this.getClient().getChannel());
            }

            if (this.getGuildId() > 0) {
               Boolean fromTransfer = (Boolean) this.getTempKeyValue("FromTransfer");
               if (fromTransfer != null && fromTransfer) {
                  Center.Guild.setGuildMemberOnline(this.getMGC(), true, this.getClient().getChannel(), true, false);
                  this.removeKeyValue("FromTransfer");
               } else {
                  Center.Guild.setGuildMemberOnline(this.getMGC(), true, this.getClient().getChannel(), true);
               }

               this.send(CWvsContext.GuildPacket.showGuildInfo(this));
               Guild gs = Center.Guild.getGuild(this.getGuildId());
               if (gs != null) {
                  List<byte[]> packetList = Center.Alliance.getAllianceInfo(gs.getAllianceId(), true);
                  if (packetList != null) {
                     for (byte[] pack : packetList) {
                        if (pack != null) {
                           this.send(pack);
                        }
                     }
                  }

                  this.send(GuildContents.loadGuildLog(gs));
               } else {
                  this.setGuildId(0);
                  this.setGuildRank((byte) 5);
                  this.setAllianceRank((byte) 5);
                  this.saveGuildStatus();
               }
            }
         } catch (Exception var11) {
            FileoutputUtil.outputFileErrorReason("Log_GameServerLogIn_Error.rtf", "updateChannelChange 함수 실행중 오류발생 길드",
                  var11);
         }
      } else if (this.getClient().getPlayer() == null) {
         try {
            this.getMap().removePlayer(this);
         } catch (Exception var9) {
            FileoutputUtil.outputFileErrorReason("Log_GameServerLogIn_Error.rtf",
                  "updateChannelChange 함수 실행중 오류발생 removePlayer", var9);
         }
      } else {
         if (this.updateChannelTryCount > 10) {
            return;
         }

         if (this.updateChannelTryCount < 2) {
            this.updateChannelTryCount++;
            return;
         }

         try {
            this.updateChannelTryCount++;
            boolean friendCheck = false;
            boolean partyCheck = false;
            boolean guildCheck = false;
            if (Center.Find.findChannel(this.getId()) == -1 && this.getClient().getChannel() > 0) {
               Center.Find.register(this.getId(), this.getAccountID(), this.getName(), this.getClient().getChannel());
               this.updateChannelTime = 0L;
               return;
            }

            friendCheck = true;
            Party party = this.getParty();
            if (party != null && party.getMemberById(this.getId()) != null) {
               if (!party.getMemberById(this.getId()).isOnline()) {
                  this.updateChannelTime = 0L;
                  return;
               }

               partyCheck = true;
            } else if (party == null) {
               partyCheck = true;
            }

            Guild guild = this.getGuild();
            if (guild != null && !guild.getMGC(this.getId()).isOnline()) {
               this.updateChannelTime = 0L;
               return;
            }

            if (guild == null) {
               guildCheck = true;
            }

            if (friendCheck && partyCheck && guildCheck) {
               this.updateChannelTryCount += 100;
            }
         } catch (Exception var10) {
            FileoutputUtil.outputFileErrorReason("Log_GameServerLogIn_Error.rtf",
                  "updateChannelChange 함수 실행중 오류발생 removePlayer", var10);
         }
      }
   }

   public void updateMusic() {
      if (this.getMap() != null) {
         if (this.getMap().getMusicSize() > 0) {
            String firstMusic = this.getMap().getFirstMusic();
            if (this.getMusicReceive() != null && !this.getMusicReceive().isEmpty()) {
               if (!this.getMusicReceive().equals(firstMusic)) {
                  this.send(CField.environmentChange(firstMusic, 7));
                  this.setMusicReceive(firstMusic);
               }
            } else {
               this.send(CField.environmentChange(firstMusic, 7));
               this.setMusicReceive(firstMusic);
            }
         } else {
            this.setMusicReceive(null);
         }
      }
   }

   public void updateHotTime() {
      if (!DBConfig.isGanglim) {
         AutoHottimeEntry event = AutoHottimeManager.entryList
               .stream()
               .filter(entry -> entry.isStarted() && entry.getEventType() == AutoHottimeEntry.EventType.Give)
               .findFirst()
               .orElse(null);
         if (event != null
               && this.cabinetItem != null
               && this.client != null
               && this.client.getKeyValue(event.getStartTime() + "=" + event.getItemID()) == null) {
            this.client.setKeyValue(event.getStartTime() + "=" + event.getItemID(), "true");
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy년 MM월 dd일 HH시 mm분");
            Calendar CAL = new GregorianCalendar(Locale.KOREA);
            String fDate = sdf.format(CAL.getTime());
            MapleItemInformationProvider ii = MapleItemInformationProvider.getInstance();
            if (event.getItemID() != -1 && ii.itemExists(event.getItemID())) {
               Item item = new Item(event.getItemID(), (byte) 0, (short) event.getItemCount());
               if (ii.isCash(item.getItemId())) {
                  item.setUniqueId(MapleInventoryIdentifier.getInstance());
               }

               this.cabinetItem
                     .addCabinetItem(
                           new MapleCabinetItem(
                                 this.cabinetItem.getNextIndex(), System.currentTimeMillis() + 604800000L, "[핫타임 보상]",
                                 fDate + "에 지급된 핫타임 보상입니다.", item));
               this.send(CField.maplecabinetResult(8));
               this.setSaveFlag(this.getSaveFlag() | CharacterSaveFlag.CABINET.getFlag());
               this.dropMessage(1, "핫타임 보상이 지급되었습니다. 메이플 보관함을 통해 수령하실 수 있습니다.");
            }
         }
      }
   }

   public void updateFatigue() {
      if (DBConfig.isGanglim) {
         if (GameConstants.FatigueMapList.contains(this.getMapId())) {
            this.setKeyValue(124, "ppp", String.valueOf(this.getKeyValue(124, "ppp") + 1000));
            if (this.getParty() != null && this.getParty().getPartyMember().getPartyMemberList().size() > 2) {
               this.warp(ServerConstants.TownMap);
               this.dropMessage(5, "피로도 사냥터는 3인이상 파티를 맺을 수 없습니다");
               return;
            }

            if (this.getKeyValue(123, "pp") <= 0) {
               this.warp(ServerConstants.TownMap);
               this.dropMessage(5, "피로도가 없어 마을로 돌아갑니다.");
            } else if (this.getKeyValue(124, "ppp") > 60000) {
               long fatiguetime = this.getKeyValueLong(124, "ppptime");
               long currenttime = System.currentTimeMillis();
               if (fatiguetime + 60000L <= currenttime) {
                  this.setKeyValue(123, "pp", String.valueOf(this.getKeyValue(123, "pp") - 2));
                  this.setKeyValue(124, "ppp", "0");
                  this.setKeyValue(124, "ppptime", String.valueOf(currenttime));
                  if (this.getKeyValue(123, "pp") < 0) {
                     this.setKeyValue(123, "pp", String.valueOf(0));
                  }

                  this.dropMessage(5, "피로도가 감소합니다. 남은 피로도 : " + this.getKeyValue(123, "pp"));
               }
            }
         }

         Calendar cal = Calendar.getInstance();
         if (cal.get(11) == 0 && cal.get(12) < 1) {
            this.setKeyValue(125, "date", String.valueOf(GameConstants.getCurrentDate_NoTime()));
            this.setKeyValue(123, "pp", String.valueOf(0));
         }
      }
   }

   public long getCreateDate() {
      return this.createDate;
   }

   public long getTodayLoggedinDate() {
      return this.todayLoggedinDate;
   }

   public long getLastLoggedinDate() {
      return this.lastLoggedinDate;
   }

   public int getMultiKillCount() {
      return this.multiKillCount;
   }

   public void setMultiKillCount(int multiKillCount) {
      this.multiKillCount = multiKillCount;
   }

   public List<Integer> getDreamsEscapeCount() {
      return this.dreamsEscapeCount;
   }

   public void setDreamsEscapeCount(List<Integer> dreamsEscapeCount) {
      this.dreamsEscapeCount = dreamsEscapeCount;
   }

   public Map<Integer, MobCollectionEx> getCollectionInfo() {
      return this.collectionInfo;
   }

   public MapleMessage[] getSentMessages() {
      return this.sentMessage;
   }

   public MapleMessage[] getReceivedMessages() {
      return this.receivedMessage;
   }

   public int getAtomRegenCount() {
      return this.atomRegenCount;
   }

   public void setAtomRegenCount(int count) {
      this.atomRegenCount = count;
   }

   public int getKeyValue(int questID, String key) {
      return this.getOneInfoQuestInteger(questID, key);
   }

   public long getKeyValueLong(int questID, String key) {
      return this.getOneInfoQuestLong(questID, key);
   }

   public void setKeyValue(int questID, String key, String value) {
      this.updateOneInfo(questID, key, value);
   }

   public int getHgrade() {
      try {
         return Integer.parseInt(this.client.getKeyValue("hGrade"));
      } catch (Exception var2) {
         return 0;
      }
   }

   public void setHgrade(int a) {
      this.client.setKeyValue("hGrade", String.valueOf(a));
   }

   public String getHgrades() {
      switch (this.getHgrade()) {
         case 1:
            return "VIP Bronze";
         case 2:
            return "VIP Silver";
         case 3:
            return "VIP Gold";
         case 4:
            return "VIP Platinum";
         case 5:
            return "VIP Diamond";
         case 6:
            return "VVIP Classic";
         case 7:
            return "VVIP Premium";
         case 8:
            return "VVIP Luxury";
         case 9:
            return " VVIP Noble";
         case 10:
            return "VVIP Prestige";
         case 11:
            return "MVP Elite";
         case 12:
            return "MVP Prime";
         case 13:
            return "MVP Signature";
         case 14:
            return "MVP CROWN";
         case 15:
            return "MVP Black";
         default:
            return "일반";
      }
   }

   public long getDPointAll() {
      try {
         return Long.parseLong(this.client.getKeyValue("DPointAll"));
      } catch (Exception var2) {
         return 0L;
      }
   }

   public long getCashPoint() {
      try {
         return Long.parseLong(this.client.getKeyValue("CashPoint"));
      } catch (Exception var2) {
         return 0L;
      }
   }

   public void gainDPointAll(int a) {
      long before = this.getDPointAll();
      long after = before + a;
      if (after < 0L) {
         after = 0L;
      }

      this.client.setKeyValue("DPointAll", String.valueOf(after));
   }

   public void setDonationPoint(int a) {
      this.client.setKeyValue("DPoint", String.valueOf(a));
      this.updateDonationPoint();
   }

   public void setDPointAll(int a) {
      this.client.setKeyValue("DPointAll", String.valueOf(a));
      this.updateDonationPoint();
   }

   public int getPgrade() {
      try {
         return Integer.parseInt(this.client.getKeyValue("pGrade"));
      } catch (Exception var2) {
         return 0;
      }
   }

   public void setPgrade(int a) {
      this.client.setKeyValue("pGrade", String.valueOf(a));
   }

   public String getPgrades() {
      String var1 = this.client.getKeyValue("pGrade");
      switch (var1) {
         case "1":
            return "비기닝";
         case "2":
            return "라이징";
         case "3":
            return "플라잉";
         case "4":
            return "샤이닝";
         case "5":
            return "아이돌";
         case "6":
            return "슈퍼스타";
         default:
            return "일반";
      }
   }

   public void gainnHPoint(int a) {
      this.client.setKeyValue("nHpoint", String.valueOf(this.getHPoint() + a));
   }

   public void setnHPoint(int a) {
      this.client.setKeyValue("nHpoint", String.valueOf(a));
   }

   public void gainDonationPoint(int a) {
      long before = this.getDonationPoint();
      long after = before + a;
      if (after < 0L) {
         after = 0L;
      }

      this.client.setKeyValue("DPoint", String.valueOf(after));
      this.updateDonationPoint();
   }

   public long getHPoint() {
      try {
         return Long.parseLong(this.client.getKeyValue("HPoint"));
      } catch (Exception var2) {
         return 0L;
      }
   }

   public void gainHPoint(int a) {
      if (a > 0) {
         this.gainnHPoint(a);
      }

      long before = this.getHPoint();
      long after = before + a;
      if (after < 0L) {
         after = 0L;
      }

      this.client.setKeyValue("HPoint", String.valueOf(after));
   }

   public void setHPoint(int a) {
      this.client.setKeyValue("HPoint", String.valueOf(a));
   }

   public long getDonationPoint() {
      try {
         return Long.parseLong(this.client.getKeyValue("DPoint"));
      } catch (Exception var2) {
         return 0L;
      }
   }

   public void gainCashPointEvent(int cashvalue, int bonus) {
      long before = this.getCashPoint();
      long after = before + cashvalue + bonus;
      if (after < 0L) {
         after = 0L;
      }

      this.client.setKeyValue("CashPoint", String.valueOf(after));
      this.updateDonationPoint();
      if (cashvalue > 0) {
         this.gainDPointAll(cashvalue);
      }
   }

   public void gainCashPoint(int a) {
      long before = this.getCashPoint();
      long after = before + a;
      if (after < 0L) {
         after = 0L;
      }

      this.client.setKeyValue("CashPoint", String.valueOf(after));
      this.updateDonationPoint();
      if (a > 0) {
         this.gainDPointAll(a);
      }
   }

   public void updateDonationPoint() {
      this.client.getSession().writeAndFlush(CWvsContext.updateMaplePoint((int) this.getDonationPoint()));
   }

   public int getBossTier() {
      return this.getClient().isGm() && !DBConfig.isHosting ? 8 : this.bosstier;
   }

   public void setBossTier(int tier) {
      this.bosstier = tier;
   }

   public void gainBossTier(int tier) {
      this.bosstier += tier;
   }

   public void setBonusCTSStat() {
      if (DBConfig.isGanglim) {
         this.temporaryStatResetBySkillID(80002419);
         int damR = 0;
         int expR = 0;
         int dropR = 0;
         int mesoR = 0;
         int crD = 0;
         int bdR = 0;
         int allStatR = 0;
         int pdpR = 0;
         int watk = 0;
         int magic = 0;
         int allStat = 0;
         long zodiacRank = this.getKeyValue(190823, "grade");
         if (zodiacRank > 0L) {
            dropR = (int) (dropR + 10L * zodiacRank);
            mesoR = (int) (mesoR + 10L * zodiacRank);
            crD = (int) (crD + 5L * zodiacRank);
            bdR = (int) (bdR + 5L * zodiacRank);
         }

         int bossTier = this.getBossTier();
         if (bossTier > 0) {
            bdR += bossTier * 10;
         }

         for (CustomItem.CustomItemType type : CustomItem.CustomItemType.values()) {
            if (type.ordinal() != 0) {
               int id = this.equippedCustomItem(type);
               if (id >= 0) {
                  for (Pair<CustomItem.CustomItemEffect, Integer> effect : GameConstants.customItems.get(id)
                        .getEffects()) {
                     if (effect.getLeft() == CustomItem.CustomItemEffect.BdR) {
                        bdR += effect.getRight();
                     } else if (effect.getLeft() == CustomItem.CustomItemEffect.CrD) {
                        crD += effect.getRight();
                     } else if (effect.getLeft() == CustomItem.CustomItemEffect.DropR) {
                        dropR += effect.getRight();
                     } else if (effect.getLeft() == CustomItem.CustomItemEffect.MesoR) {
                        mesoR += effect.getRight();
                     } else if (effect.getLeft() == CustomItem.CustomItemEffect.AllStatR) {
                        allStatR += effect.getRight();
                     }
                  }
               }
            }
         }

         int damageTear = this.getOneInfoQuestInteger(999, "DamageTear");
         int expTear = this.getOneInfoQuestInteger(999, "ExpTear");
         int dropTear = this.getOneInfoQuestInteger(999, "DropTear");
         int mesoTear = this.getOneInfoQuestInteger(999, "MesoTear");
         int criticalDamTear = this.getOneInfoQuestInteger(999, "CridamTear");
         int bossDamTear = this.getOneInfoQuestInteger(999, "BossdamTear");
         int allStatTear = this.getOneInfoQuestInteger(999, "AllStat");
         int back = this.getKeyValue("BackStat") != null ? Integer.parseInt(this.getKeyValue("BackStat")) : 0;
         int cashAttackValue = this.getKeyValue("cashatk") != null ? Integer.parseInt(this.getKeyValue("cashatk")) : 0;
         int cashAllStatValue = this.getKeyValue("cashallstat") != null
               ? Integer.parseInt(this.getKeyValue("cashallstat"))
               : 0;
         if (this.getDojangChallengeMode() == 1 && this.getMapId() >= 925070000 && this.getMapId() <= 925078000) {
            cashAttackValue /= 2;
            cashAllStatValue /= 2;
         }

         if (this.getMap().getFieldSetInstance() != null
               && GameConstants.isHellInstance(this.getMap().getFieldSetInstance())) {
            cashAttackValue /= 2;
            cashAllStatValue /= 2;
         }

         if (damageTear > 0) {
            Integer incDamR = GameConstants.royalDamageTearMap.get(damageTear);
            damR += incDamR == null ? 0 : incDamR;
         }

         if (expTear > 0) {
            expR += expTear == 8
                  ? 50
                  : (expTear == 7 ? 40
                        : (expTear == 6 ? 30
                              : (expTear == 5 ? 23
                                    : (expTear == 4 ? 18 : (expTear == 3 ? 13 : (expTear == 2 ? 7 : 3))))));
         }

         if (dropTear > 0) {
            dropR += dropTear == 8
                  ? 300
                  : (dropTear == 7 ? 180
                        : (dropTear == 6 ? 120
                              : (dropTear == 5 ? 80
                                    : (dropTear == 4 ? 60 : (dropTear == 3 ? 40 : (dropTear == 2 ? 20 : 10))))));
         }

         if (mesoTear > 0) {
            mesoR += mesoTear == 8
                  ? 120
                  : (mesoTear == 7 ? 100
                        : (mesoTear == 6 ? 90
                              : (mesoTear == 5 ? 80
                                    : (mesoTear == 4 ? 60 : (mesoTear == 3 ? 40 : (mesoTear == 2 ? 20 : 10))))));
         }

         if (criticalDamTear > 0) {
            crD += criticalDamTear == 8
                  ? 100
                  : (criticalDamTear == 7
                        ? 70
                        : (criticalDamTear == 6
                              ? 50
                              : (criticalDamTear == 5 ? 30
                                    : (criticalDamTear == 4 ? 20
                                          : (criticalDamTear == 3 ? 15 : (criticalDamTear == 2 ? 10 : 5))))));
         }

         if (bossDamTear > 0) {
            Integer incBossDamR = GameConstants.royalBossDamageTearMap.get(bossDamTear);
            bdR += incBossDamR == null ? 0 : incBossDamR;
         }

         if (cashAttackValue > 0) {
            watk += cashAttackValue;
            magic += cashAttackValue;
         }

         allStat += cashAllStatValue;
         allStatR += allStatTear;
         allStatR -= back;
         int hGrade = this.getHgrade();
         int hGradeValue = 0;
         switch (hGrade) {
            case 1:
               hGradeValue = 5;
               break;
            case 2:
               hGradeValue = 10;
               break;
            case 3:
               hGradeValue = 15;
               break;
            case 4:
               hGradeValue = 20;
               break;
            case 5:
               hGradeValue = 30;
               break;
            case 6:
               hGradeValue = 40;
               break;
            case 7:
               hGradeValue = 50;
               break;
            case 8:
               hGradeValue = 60;
               break;
            case 9:
               hGradeValue = 70;
               break;
            case 10:
               hGradeValue = 80;
               break;
            case 11:
               hGradeValue = 100;
               break;
            case 12:
               hGradeValue = 120;
               break;
            case 13:
               hGradeValue = 140;
               break;
            case 14:
               hGradeValue = 160;
               break;
            case 15:
               hGradeValue = 200;
         }

         if (hGradeValue != 0) {
            damR += hGradeValue;
            bdR += hGradeValue;
            pdpR += hGradeValue;
            crD += hGradeValue;
            allStatR += hGradeValue;
         }

         int pGrade = this.getPgrade();
         switch (pGrade) {
            case 1:
               damR += 5;
               bdR += 5;
               crD++;
               break;
            case 2:
               damR += 10;
               bdR += 10;
               crD += 3;
               break;
            case 3:
               damR += 20;
               bdR += 20;
               crD += 5;
               break;
            case 4:
               damR += 40;
               bdR += 30;
               crD += 7;
               break;
            case 5:
               damR += 60;
               bdR += 40;
               crD += 10;
               break;
            case 6:
               damR += 80;
               bdR += 50;
               crD += 15;
         }

         if (this.client.getPlayer() != null && this.client.getPlayer().getKeyValue("TrashDamage") != null) {
            damR += Integer.parseInt(this.client.getPlayer().getKeyValue("TrashDamage"));
         }

         Map<SecondaryStatFlag, Integer> flags = new HashMap<>();
         if (pdpR > 0) {
            flags.put(SecondaryStatFlag.indieIgnoreMobPdpR, pdpR);
         }

         if (damR > 0) {
            flags.put(SecondaryStatFlag.indieDamR, damR);
         }

         if (expR > 0) {
            flags.put(SecondaryStatFlag.indieEXP, expR);
         }

         if (dropR > 0) {
            flags.put(SecondaryStatFlag.indieDropPer, dropR);
         }

         if (mesoR > 0) {
            flags.put(SecondaryStatFlag.indieMesoAmountRate, mesoR);
         }

         if (crD > 0) {
            flags.put(SecondaryStatFlag.indieCD, crD);
         }

         if (bdR > 0) {
            flags.put(SecondaryStatFlag.indieBDR, bdR);
         }

         flags.put(SecondaryStatFlag.indieStatRBasic, allStatR);
         if (allStat > 0) {
            flags.put(SecondaryStatFlag.indieAllStat, allStat);
         }

         if (watk > 0 && magic > 0) {
            flags.put(SecondaryStatFlag.indiePAD, watk);
            flags.put(SecondaryStatFlag.indieMAD, magic);
         }

         this.temporaryStatSet(80002419, 1, Integer.MAX_VALUE, flags);
      }
   }

   public int getCustomItem(int id) {
      int size = this.getKeyValue(454545, id + "");
      if (size == -1) {
         size = 0;
         this.setKeyValue(454545, id + "", "0");
      }

      return size;
   }

   public List<Integer> getCustomInventory() {
      List<Integer> inventory = new ArrayList<>();

      for (CustomItem item : GameConstants.customItems) {
         int size = this.getCustomItem(item.getId());
         inventory.add(size);
      }

      return inventory;
   }

   public void addCustomItem(int id) {
      int size = this.getCustomItem(id);
      this.setKeyValue(454545, id + "", ++size + "");
   }

   public int equippedCustomItem(CustomItem.CustomItemType type) {
      return this.getKeyValue(454545 + type.ordinal(), "equip");
   }

   public void equipCustomItem(int id) {
      List<CustomItem> list = GameConstants.customItems;
      CustomItem ci = list.get(id);
      this.setKeyValue(454545 + ci.getType().ordinal(), "equip", id + "");
      if (DBConfig.isGanglim) {
         this.setBonusCTSStat();
         if (this.getHgrade() > 0) {
            int skillId = 80003159 + this.getHgrade();
            if (this.getHgrade() >= 11) {
               skillId = 80003176 + (this.getHgrade() - 11);
            }

            this.temporaryStatSet(SecondaryStatFlag.indieACC, skillId, Integer.MAX_VALUE, 1);
         }

         if (this.getPgrade() > 0) {
            int skillId = 80003169 + this.getPgrade();
            this.temporaryStatSet(SecondaryStatFlag.indieACC, skillId, Integer.MAX_VALUE, 1);
         }

         this.getStat().recalcLocalStats(this);
      }
   }

   public void unequipCustomItem(int id) {
      List<CustomItem> list = GameConstants.customItems;
      CustomItem ci = list.get(id);
      this.setKeyValue(454545 + ci.getType().ordinal(), "equip", "-1");
      if (DBConfig.isGanglim) {
         this.setBonusCTSStat();
         if (this.getHgrade() > 0) {
            int skillId = 80003159 + this.getHgrade();
            if (this.getHgrade() >= 11) {
               skillId = 80003176 + (this.getHgrade() - 11);
            }

            this.temporaryStatSet(SecondaryStatFlag.indieACC, skillId, Integer.MAX_VALUE, 1);
         }

         if (this.getPgrade() > 0) {
            int skillId = 80003169 + this.getPgrade();
            this.temporaryStatSet(SecondaryStatFlag.indieACC, skillId, Integer.MAX_VALUE, 1);
         }

         this.getStat().recalcLocalStats(this);
      }
   }

   public void gainNeoCore(int core) {
      if (this.getKeyValue(QuestExConstants.NeoCoreEvent.getQuestID(), "point") < 0) {
         this.setKeyValue(QuestExConstants.NeoCoreEvent.getQuestID(), "point", "0");
      }

      if (this.getKeyValue(QuestExConstants.NeoCoreEvent.getQuestID(), "today") < 0) {
         this.setKeyValue(QuestExConstants.NeoCoreEvent.getQuestID(), "today", "0");
      }

      if (this.isLockNeoCore()) {
         this.dropMessage(-8, "하루동안 획득 가능한 네오 코어량을 초과하여 네오 코어를 획득하지 않습니다.");
      } else {
         int a = this.getKeyValue(QuestExConstants.NeoCoreEvent.getQuestID(), "today");
         int todaycore = a + core;
         if (todaycore > GameConstants.MaxNeoCore) {
            core = todaycore - GameConstants.MaxNeoCore;
            todaycore = GameConstants.MaxNeoCore;
         }

         this.setKeyValue(QuestExConstants.NeoCoreEvent.getQuestID(), "today", todaycore + "");
         int corecount = this.getKeyValue(QuestExConstants.NeoCoreEvent.getQuestID(), "point") + core;
         this.setKeyValue(QuestExConstants.NeoCoreEvent.getQuestID(), "point", corecount + "");
         int lock = this.isLockNeoCore() ? 1 : 0;
         this.updateInfoQuest(
               QuestExConstants.NeoCoreEvent.getQuestID(),
               "point="
                     + this.getKeyValue(QuestExConstants.NeoCoreEvent.getQuestID(), "point")
                     + ";sum=0;date="
                     + GameConstants.getCurrentDate_NoTime()
                     + ";week=0;total=0;today="
                     + this.getKeyValue(QuestExConstants.NeoCoreEvent.getQuestID(), "today")
                     + ";lock="
                     + lock);
         this.dropMessage(-8, "[알림] " + core + " 개의 네오 코어를 획득하였습니다.");
      }
   }

   public boolean isLockNeoCore() {
      return this.getKeyValue(QuestExConstants.NeoCoreEvent.getQuestID(), "today") >= GameConstants.MaxNeoCore;
   }

   public void InGameDirectionEvent(String str, int... args) {
      this.send(CField.UIPacket.InGameDirectionEvent(str, args));
   }

   public void setInGameDirectionMode(boolean Enable, boolean BlackFrame, boolean ForceMouseOver, boolean ShowUI) {
      this.send(CField.UIPacket.setIngameDirectionMode(BlackFrame, ForceMouseOver, ShowUI));
   }

   public void removeInGameDirectionMode() {
      this.send(CField.UIPacket.endInGameDirectionMode(1));
   }

   public boolean vCoreEquipCheck() {
      for (VCore core : this.getVCoreSkillsNoLock()) {
         if (core.getState() == 2) {
            return false;
         }
      }

      return true;
   }

   public HyperStat getHyperStat() {
      return this.hyperStat;
   }

   public void setHyperStat(HyperStat stat) {
      this.hyperStat = stat;
   }

   public HexaCore getHexaCore() {
      return this.hexaCore;
   }

   public void setHexaCore(HexaCore core) {
      this.hexaCore = core;
   }

   public void checkImprintedStone() {
      for (int i = 1; i <= 5; i++) {
         this.temporaryStatResetBySkillID(888888 + i);
      }

      for (int index = 1; index <= 5; index++) {
         Map<SecondaryStatFlag, Integer> statups = new HashMap<>();
         if (this.getOneInfoQuestInteger(133333, "craftMinus" + index) >= 10
               && this.getOneInfoQuestInteger(133333, "craftPlus" + index) >= 10) {
            int plusOption_ = this.getOneInfoQuestInteger(133333, "plusOption" + index);
            int minusOption_ = this.getOneInfoQuestInteger(133333, "minusOption" + index);
            int plusValue = this.getOneInfoQuestInteger(133333, "plusValue" + index);
            int minusValue = this.getOneInfoQuestInteger(133333, "minusValue" + index);
            ImprintedStoneOption plusOption = ImprintedStoneOption.getByOption(plusOption_);
            ImprintedStoneOption minusOption = ImprintedStoneOption.getByOption(minusOption_);
            if (plusOption != null && minusOption != null) {
               if (plusOption_ == minusOption_) {
                  for (SecondaryStatFlag f : plusOption.getFlag()) {
                     statups.put(f, plusValue - minusValue);
                  }
               } else {
                  for (SecondaryStatFlag f : plusOption.getFlag()) {
                     statups.put(f, plusValue);
                  }

                  for (SecondaryStatFlag f : minusOption.getFlag()) {
                     statups.put(f, -minusValue);
                  }
               }
            }
         }

         if (!statups.isEmpty()) {
            this.temporaryStatSet(888888 + index, 1, Integer.MAX_VALUE, statups);
         }
      }
   }

   public void checkLiberationStats() {
      if (!DBConfig.isGanglim) {
         this.temporaryStatResetBySkillID(797878);
         Map<SecondaryStatFlag, Integer> statups = new HashMap<>();
         int str = this.getOneInfoQuestInteger(1237777, "str");
         int dex = this.getOneInfoQuestInteger(1237777, "dex");
         int int_ = this.getOneInfoQuestInteger(1237777, "int_");
         int luk = this.getOneInfoQuestInteger(1237777, "luk");
         int pad = this.getOneInfoQuestInteger(1237777, "pad");
         int mad = this.getOneInfoQuestInteger(1237777, "mad");
         int bdr = this.getOneInfoQuestInteger(1237777, "bdr");
         int imdr = this.getOneInfoQuestInteger(1237777, "imdr");
         int allStatR = this.getOneInfoQuestInteger(1237777, "all_stat_r");
         int totalTE = this.getTotalTranscendenceEnchant();
         double scale = 1.0;
         if (totalTE >= 72 && totalTE < 80) {
            scale = 1.2;
         } else if (totalTE >= 80) {
            scale = 1.5;
         }

         if (totalTE < 56) {
            scale = 0.0;
         }

         if (scale > 1.0) {
            str = (int) (str * scale);
            dex = (int) (dex * scale);
            int_ = (int) (int_ * scale);
            luk = (int) (luk * scale);
         }

         if (str > 0) {
            statups.put(SecondaryStatFlag.indieSTR, str);
         }

         if (dex > 0) {
            statups.put(SecondaryStatFlag.indieDEX, dex);
         }

         if (int_ > 0) {
            statups.put(SecondaryStatFlag.indieINT, int_);
         }

         if (luk > 0) {
            statups.put(SecondaryStatFlag.indieLUK, luk);
         }

         if (pad > 0) {
            statups.put(SecondaryStatFlag.indiePAD, pad);
         }

         if (mad > 0) {
            statups.put(SecondaryStatFlag.indieMAD, mad);
         }

         if (bdr > 0) {
            statups.put(SecondaryStatFlag.indieBDR, bdr);
         }

         if (imdr > 0) {
            statups.put(SecondaryStatFlag.indieIgnoreMobPdpR, imdr);
         }

         if (allStatR > 0) {
            statups.put(SecondaryStatFlag.indieStatRBasic, allStatR);
         }

         if (!statups.isEmpty()) {
            this.temporaryStatSet(797878, 1, Integer.MAX_VALUE, statups);
         }
      }
   }

   public void checkUpgradeSymbol() {
      if (!DBConfig.isGanglim && this.getOneInfoQuestInteger(1334567, "check_symbol") <= 0) {
         AtomicBoolean check = new AtomicBoolean(false);
         this.getInventory(MapleInventoryType.EQUIPPED).list().forEach(item -> {
            if (item.getItemId() >= 1712001 && item.getItemId() <= 1712006 && item.getOwner() != null
                  && !item.getOwner().isEmpty()) {
               Equip equip = (Equip) item;
               int totalStat = equip.getStr() + equip.getDex() + equip.getInt() + equip.getLuk() - 3200;
               totalStat -= equip.getArcLevel() * 100;
               if (totalStat == 0) {
                  equip.setStr((short) (equip.getStr() + 750));
                  equip.setDex((short) (equip.getDex() + 750));
                  equip.setInt((short) (equip.getInt() + 750));
                  equip.setLuk((short) (equip.getLuk() + 750));
                  equip.setWatk((short) 750);
                  equip.setMatk((short) 750);
                  this.send(CWvsContext.InventoryPacket.updateEquipSlot(equip));
                  check.set(true);
               }
            }
         });
         this.updateOneInfo(1334567, "check_symbol", "1");
         if (check.get()) {
            this.dropMessage(5, "강화된 심볼의 옵션 수치가 상향 조정 적용되었습니다. [올스탯 +1500, 공/마 +750]");
         }
      }
   }

   public int getTotalTranscendenceEnchant() {
      if (DBConfig.isGanglim) {
         return 0;
      } else {
         AtomicInteger total = new AtomicInteger(0);
         this.getInventory(MapleInventoryType.EQUIPPED)
               .list()
               .forEach(
                     item -> {
                        if (GameConstants.isCap(item.getItemId())
                              || GameConstants.isPants(item.getItemId())
                              || GameConstants.isCoat(item.getItemId())
                              || GameConstants.isWeapon(item.getItemId())
                              || GameConstants.isGlove(item.getItemId())
                              || GameConstants.isLongcoat(item.getItemId())
                              || GameConstants.isCape(item.getItemId())
                              || GameConstants.isShoes(item.getItemId())
                              || item.getItemId() / 1000 == 1152) {
                           String owner = item.getOwner();
                           if (owner != null && !owner.isEmpty() && item.getItemId() / 1000 != 1342) {
                              try {
                                 if (owner.contains("성")) {
                                    int upgrade = Integer.parseInt(owner.replaceAll("[^0-9]", ""));
                                    if (GameConstants.isLongcoat(item.getItemId())) {
                                       upgrade *= 2;
                                    }

                                    total.addAndGet(upgrade);
                                 }
                              } catch (NumberFormatException var4) {
                                 var4.printStackTrace();
                              }
                           }
                        }
                     });
         return total.get();
      }
   }

   public boolean getMemorize() {
      return this.memorize;
   }

   public void setMemorize(boolean memorize) {
      this.memorize = memorize;
   }

   public int getRequestGuildByPlayerId() {
      int guildid = -1;

      try (
            Connection con = DBConnection.getConnection();
            PreparedStatement ps = con
                  .prepareStatement("SELECT * FROM `guild_request_member` where id = " + this.getId());
            ResultSet rs = ps.executeQuery();) {
         if (rs.next()) {
            guildid = rs.getInt("guild_id");
         }
      } catch (SQLException var13) {
         var13.printStackTrace();
      }

      return guildid;
   }

   public void deleteRequestGuildByPlayerId() {
      try (
            Connection con = DBConnection.getConnection();
            PreparedStatement ps = con
                  .prepareStatement("DELETE FROM `guild_request_member` where id = " + this.getId());) {
         ps.executeUpdate();
      } catch (SQLException var9) {
         var9.printStackTrace();
      }
   }

   public void checkJinArcaneSymbol() {
      if (!DBConfig.isGanglim) {
         if (this.getOneInfoQuestInteger(1235500, "check_symbol") <= 0) {
            this.getInventory(MapleInventoryType.EQUIPPED).list().forEach(item -> {
               if (GameConstants.isArcaneSymbol(item.getItemId())) {
                  this.checkAndFixArcaneOption(false, MapleInventoryType.EQUIPPED, (Equip) item);
               }
            });
            this.getInventory(MapleInventoryType.EQUIP).list().forEach(item -> {
               if (GameConstants.isArcaneSymbol(item.getItemId())) {
                  this.checkAndFixArcaneOption(false, MapleInventoryType.EQUIP, (Equip) item);
               }
            });
            this.getStorage().getItems().forEach(item -> {
               if (GameConstants.isArcaneSymbol(item.getItemId())) {
                  this.checkAndFixArcaneOption(false, MapleInventoryType.UNDEFINED, (Equip) item);
               }
            });
            this.updateOneInfo(1235500, "check_symbol", "1");
         }
      }
   }

   public void checkAndFixArcaneOption(boolean storage, MapleInventoryType type, Equip equip) {
      if (!DBConfig.isGanglim) {
         if (equip.getOwner() != null && !equip.getOwner().isEmpty()) {
            int arc = equip.getArcLevel();
            int str = equip.getStr();
            int int_ = equip.getInt();
            int dex = equip.getDex();
            int luk = equip.getLuk();
            if (str < 1500) {
               equip.setStr((short) 1500);
            } else if (str != 1500) {
               equip.setStr((short) (arc * 100 + 200 + 1500));
            }

            if (int_ < 1500) {
               equip.setInt((short) 1500);
            } else if (int_ != 1500) {
               equip.setInt((short) (arc * 100 + 200 + 1500));
            }

            if (dex < 1500) {
               equip.setDex((short) 1500);
            } else if (dex != 1500) {
               equip.setDex((short) (arc * 100 + 200 + 1500));
            }

            if (luk < 1500) {
               equip.setLuk((short) 1500);
            } else if (luk != 1500) {
               equip.setLuk((short) (arc * 100 + 200 + 1500));
            }

            if (!storage) {
               this.send(CWvsContext.InventoryPacket.updateEquipSlot(equip));
            }

            this.dropMessage(5, "강화 아케인심볼 수치 정상화가 완료되었습니다.");
         }
      }
   }

   private boolean isBlockSave() {
      return this.blocksave;
   }

   public void setBlockSave(boolean block) {
      this.blocksave = block;
   }

   public long getAlertTime() {
      return this.alertTime;
   }

   public void setAlertTime(long time) {
      this.alertTime = time;
   }

   public String getMusicReceive() {
      return this.musicReceive;
   }

   public void setMusicReceive(String music) {
      this.musicReceive = music;
   }

   public boolean isMultiMode() {
      return this.multiMode;
   }

   public void setMultiMode(boolean mode) {
      this.multiMode = mode;
   }

   public void gainPraisePoint(int point) {
      PraisePoint p = this.getPraisePoint();
      p.setTotalPoint(p.getTotalPoint() + point);
      p.setPoint(p.getPoint() + point);
      this.updateOneInfo(3887, "point", String.valueOf(this.getOneInfoQuestInteger(3887, "point") + point));
      this.setSaveFlag(this.getSaveFlag() | CharacterSaveFlag.PRAISE_POINT.getFlag());
   }

   public boolean getIsSkipIntro() {
      return this.isSkipIntro;
   }

   public void setIsSkipIntro(boolean skipIntro) {
      this.isSkipIntro = skipIntro;
   }

   public int getCurrentCashCodyPreset() {
      return this.getOneInfoQuestInteger(QuestExConstants.CashCodyPreset.getQuestID(), "preset");
   }

   public int getCashCodyPresetSlot(int slot) {
      return this.getOneInfoQuestInteger(QuestExConstants.CashCodyPreset.getQuestID(), "preset" + slot);
   }

   public void setCurrentCashCodyPreset(int preset) {
      int questId = QuestExConstants.CashCodyPreset.getQuestID();
      if (this.getInfoQuest(questId) == null) {
         this.updateInfoQuest(questId, "preset0=-1;preset1=0;preset2=1;preset=0;");
      }

      int currentPreset = this.getOneInfoQuestInteger(questId, "preset");
      int changeSlot = this.getOneInfoQuestInteger(questId, "preset" + preset);
      int preset0Slot = this.getOneInfoQuestInteger(questId, "preset0");
      this.updateOneInfo(questId, "preset", String.valueOf(preset));
      this.updateOneInfo(questId, "preset" + currentPreset, String.valueOf(changeSlot));
      this.updateOneInfo(questId, "preset" + preset, "-1");
      int currentSlot = this.getOneInfoQuestInteger(questId, "preset" + currentPreset);
      short addPos = 1700;
      switch (changeSlot) {
         case 0:
            addPos = 1700;
            break;
         case 1:
            addPos = 1717;
      }

      short preset0diff = 1700;
      switch (preset0Slot) {
         case 0:
            preset0diff = 1700;
            break;
         case 1:
            preset0diff = 1717;
      }

      List<byte[]> operations = new ArrayList<>();
      List<Pair<Short, Short>> beforeMoves = new ArrayList<>();
      List<Pair<Short, Short>> afterMoves = new ArrayList<>();

      for (short i = -101; i > -117; i--) {
         Equip srcEquip = (Equip) this.getInventory(MapleInventoryType.EQUIPPED).getItem(i);
         short dst = (short) (i - addPos);
         Equip dstEquip = (Equip) this.getInventory(MapleInventoryType.EQUIPPED).getItem(dst);
         if ((srcEquip == null || srcEquip.getItemId() / 1000 != 1802)
               && (dstEquip == null || dstEquip.getItemId() / 1000 != 1802)) {
            short preset0Pos = (short) (i - preset0diff);
            Equip preset0Equip;
            if (currentPreset == 0) {
               preset0Pos = i;
               preset0Equip = srcEquip;
            } else {
               preset0Equip = (Equip) this.getInventory(MapleInventoryType.EQUIPPED).getItem(preset0Pos);
            }

            if (currentPreset != 0 && dstEquip == null) {
               if (preset0Equip != null
                     && (currentPreset == 1
                           && (preset0Equip.getItemState() & ItemStateFlag.CODY_PRESET1_UNEQUIP.getValue()) == 0
                           || currentPreset == 2 && (preset0Equip.getItemState()
                                 & ItemStateFlag.CODY_PRESET2_UNEQUIP.getValue()) == 0)) {
                  beforeMoves.add(new Pair<>(i, preset0Pos));
               }
            } else if (preset != 0 && dstEquip != null) {
               if (srcEquip == null && preset0Equip != null) {
                  beforeMoves.add(new Pair<>(preset0Pos, preset0Pos));
               } else if (i == preset0Pos) {
                  beforeMoves.add(new Pair<>(i, preset0Pos));
               }
            }

            if (srcEquip != null) {
               if (dstEquip != null) {
                  if (preset != 0) {
                  }
               } else if (preset == 1 && preset0Equip != null
                     && (preset0Equip.getItemState() & ItemStateFlag.CODY_PRESET1_UNEQUIP.getValue()) == 0
                     || preset == 2 && preset0Equip != null
                           && (preset0Equip.getItemState() & ItemStateFlag.CODY_PRESET2_UNEQUIP.getValue()) == 0) {
                  afterMoves.add(new Pair<>(i, dst));
               }
            } else if (preset != 0 && preset0Equip != null) {
               if (preset == 1 && (preset0Equip.getItemState() & ItemStateFlag.CODY_PRESET1_UNEQUIP.getValue()) == 0
                     || preset == 2
                           && (preset0Equip.getItemState() & ItemStateFlag.CODY_PRESET2_UNEQUIP.getValue()) == 0) {
                  afterMoves.add(new Pair<>(i, preset0Pos));
               }
            } else if (preset == 0 && srcEquip == null && dstEquip != null) {
               if (currentPreset == 1
                     && (preset0Equip.getItemState() & ItemStateFlag.CODY_PRESET1_UNEQUIP.getValue()) == 0) {
                  afterMoves.add(new Pair<>(i, preset0Pos));
               } else if (currentPreset == 2
                     && (preset0Equip.getItemState() & ItemStateFlag.CODY_PRESET2_UNEQUIP.getValue()) == 0) {
                  afterMoves.add(new Pair<>(i, preset0Pos));
               }
            }

            if (srcEquip != null) {
               if (currentPreset == 0 && dstEquip == null
                     && (srcEquip.getItemState() & ItemStateFlag.CODY_PRESET_ITEM.getValue()) == 0) {
                  srcEquip.setItemState(srcEquip.getItemState() | ItemStateFlag.CODY_PRESET_ITEM.getValue());
                  operations.add(InventoryOperation.updatePacket(srcEquip, i, MapleInventoryType.CASH_EQUIP, this,
                        false, false));
               }

               this.getInventory(MapleInventoryType.EQUIPPED).move(i, dst, (short) 1);
            } else if (dstEquip != null) {
               this.getInventory(MapleInventoryType.EQUIPPED).move(dst, i, (short) 1);
            }
         }
      }

      for (Pair<Short, Short> pair : beforeMoves) {
         operations.add(InventoryOperation.swapPacket(MapleInventoryType.CASH_EQUIP, pair.left, pair.right));
      }

      for (short ix = -101; ix > -117; ix--) {
         short dst = (short) (ix - addPos);
         operations.add(InventoryOperation.swapPacket(MapleInventoryType.CASH_EQUIP, ix, dst));
      }

      for (Pair<Short, Short> pair : afterMoves) {
         operations.add(InventoryOperation.swapPacket(MapleInventoryType.CASH_EQUIP, pair.left, pair.right));
      }

      this.send(InventoryOperation.getInventoryOperationPacket(operations, true));
      this.send(CWvsContext.setCashCodyPreset(preset));
      this.equipChanged();
      this.send(CWvsContext.onCharacterModified(this, -1L));
      HyperHandler.updateSkills(this, 0);
      this.updateMatrixSkillsNoLock();
   }

   public int getCodyType() {
      return this.codyType;
   }

   public void setCodyType(int codyType) {
      this.codyType = codyType;
   }

   public int[] getCodyColors() {
      return this.codyColors;
   }

   public void setCodyColors(int[] codyColors) {
      this.codyColors = codyColors;
   }

   public void setDebugPacket(int time) {
      if (time > 0) {
         this.getClient().setDebugPacketSendTime(System.currentTimeMillis() + time * 1000);
         this.getClient().setDebugPacketSend(true);
      } else {
         this.getClient().setDebugPacketSend(false);
         this.getClient().setDebugPacketSendTime(0L);
      }
   }

   public void setShopTime(long time) {
      this.shopTime = time;
   }

   public long getShopTime() {
      return this.shopTime;
   }

   public int getSolErda() {
      return this.getOneInfoQuestInteger(QuestExConstants.SixthJobSkill.getQuestID(), "0");
   }

   public void setSolErda(int count) {
      if (count >= HexaMatrixConstants.solErdaMax) {
         count = HexaMatrixConstants.solErdaMax;
      }

      this.updateOneInfo(QuestExConstants.SixthJobSkill.getQuestID(), "0", String.valueOf(count));
   }

   public void gainSolErda(int gain) {
      int erda = this.getSolErda() + gain;
      if (erda >= HexaMatrixConstants.solErdaMax) {
         erda = HexaMatrixConstants.solErdaMax;
      } else if (erda < 0) {
         erda = 0;
      }

      this.updateOneInfo(QuestExConstants.SixthJobSkill.getQuestID(), "0", String.valueOf(erda));
   }

   public int getSolErdaStrength() {
      return this.getOneInfoQuestInteger(QuestExConstants.SixthJobSkill.getQuestID(), "0exp");
   }

   public void setSolErdaStrength(int strength) {
      if (strength >= HexaMatrixConstants.solErdaStrengthMax) {
         int gain = strength / HexaMatrixConstants.solErdaStrengthMax;
         this.gainSolErda(gain);
         strength %= HexaMatrixConstants.solErdaStrengthMax;
      } else if (strength < 0) {
         strength = 0;
      }

      this.updateOneInfo(QuestExConstants.SixthJobSkill.getQuestID(), "0exp", String.valueOf(strength));
   }

   public void gainSolErdaStrength(int gainStr) {
      int erdaStr = this.getSolErdaStrength() + gainStr;
      if (erdaStr >= HexaMatrixConstants.solErdaStrengthMax) {
         int gain = erdaStr / HexaMatrixConstants.solErdaStrengthMax;
         this.gainSolErda(gain);
         erdaStr %= HexaMatrixConstants.solErdaStrengthMax;
      } else if (erdaStr < 0) {
         erdaStr = 0;
      }

      this.updateOneInfo(QuestExConstants.SixthJobSkill.getQuestID(), "0exp", String.valueOf(erdaStr));
   }

   public Object getTempKeyValue(String key) {
      return this.tempKeyValue.get(key);
   }

   public Object getTempKeyValueDefault(String key, Object def) {
      return this.tempKeyValue.getOrDefault(key, def);
   }

   public void setTempKeyValue(String key, Object value) {
      this.tempKeyValue.put(key, value);
   }

   public void removeTempKeyValue(String key) {
      if (this.tempKeyValue.containsKey(key)) {
         this.tempKeyValue.remove(key);
      }
   }

   public Map<String, Object> getAllTempKeyValue() {
      return this.tempKeyValue;
   }

   public static enum FameStatus {
      OK,
      NOT_TODAY,
      NOT_THIS_MONTH;
   }

   public interface Function {
      Object get(SecondaryStatEffect var1);
   }
}
