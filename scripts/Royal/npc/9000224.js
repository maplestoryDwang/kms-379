importPackage(Packages.server);
importPackage(Packages.objects.item);

var MapleInventoryType = Java.type("objects.item.MapleInventoryType");
별노 = "#fUI/GuildMark.img/Mark/Pattern/00004001/3#"

var finalList = [];
var collectItems = [

    [1003797, 1, 4310308, 100],
    [1003798, 1, 4310308, 100],
    [1003799, 1, 4310308, 100],
    [1003800, 1, 4310308, 100],
    [1003801, 1, 4310308, 100],
    [1042254, 1, 4310308, 100],
    [1042255, 1, 4310308, 100],
    [1042256, 1, 4310308, 100],
    [1062166, 1, 4310308, 100],
    [1042257, 1, 4310308, 100],
    [1062167, 1, 4310308, 100],
    [1042258, 1, 4310308, 100],
    [1062165, 1, 4310308, 100],
    [1062168, 1, 4310308, 100],
    [1062169, 1, 4310308, 100],
    [1212063, 1, 4310308, 100],
    [1222058, 1, 4310308, 100],
    [1232057, 1, 4310308, 100],
    [1242060, 1, 4310308, 100],
    [1262016, 1, 4310308, 100],
    [1272015, 1, 4310308, 100],
    [1282015, 1, 4310308, 100],
    [1302275, 1, 4310308, 100],
    [1312153, 1, 4310308, 100],
    [1322203, 1, 4310308, 100],
    [1332225, 1, 4310308, 100],
    [1342082, 1, 4310308, 100],
    [1362090, 1, 4310308, 100],
    [1372177, 1, 4310308, 100],
    [1382208, 1, 4310308, 100],
    [1402196, 1, 4310308, 100],
    [1412135, 1, 4310308, 100],
    [1422140, 1, 4310308, 100],
    [1432167, 1, 4310308, 100],
    [1442223, 1, 4310308, 100],
    [1452205, 1, 4310308, 100],
    [1462193, 1, 4310308, 100],
    [1472214, 1, 4310308, 100],
    [1482168, 1, 4310308, 100],
    [1492179, 1, 4310308, 100],
    [1522094, 1, 4310308, 100],
    [1532098, 1, 4310308, 100],
    [1582016, 1, 4310308, 100],
    [1292016, 1, 4310308, 100],
    [1213016, 1, 4310308, 100],
    [1592018, 1, 4310308, 100],
    [1214016, 1, 4310308, 100],

    [1113800, 1, 4310308, 200], // 실블링
    [1113801, 1, 4310308, 200], // 고피아
    [1012800, 1, 4310308, 200], // 응축
    [1022800, 1, 4310308, 200], // 아쿠아틱
    [1022801, 1, 4310308, 200], // 블랙빈
    [1022802, 1, 4310308, 200], // 파풀마
    [1032801, 1, 4310308, 200], // 데아시두스
    [1122800, 1, 4310308, 200], // 혼목
    [1122801, 1, 4310308, 200], // 카혼목
    [1122802, 1, 4310308, 200], // 매커
    [1122803, 1, 4310308, 200], // 도미
    [1132800, 1, 4310308, 200], // 분자벨
    [1132801, 1, 4310308, 200], // 골클벨
    [1152800, 1, 4310308, 200], // 블랙메탈숄더
    [1162800, 1, 4310308, 200], // 성배
    [1182800, 1, 4310308, 200],  // 뱃지

    [1042392, 1, 4310308, 300], // 혼루타
    [1042393, 1, 4310308, 300], // 혼루타
    [1042394, 1, 4310308, 300], // 혼루타
    [1042395, 1, 4310308, 300], // 혼루타
    [1042396, 1, 4310308, 300], // 혼루타
    [1062258, 1, 4310308, 300], // 혼루타
    [1062259, 1, 4310308, 300], // 혼루타
    [1062260, 1, 4310308, 300], // 혼루타
    [1062261, 1, 4310308, 300], // 혼루타
    [1062262, 1, 4310308, 300], // 혼루타

    [1004808, 1, 4310308, 300],  // 아케인셰이드 나이트햇
    [1004809, 1, 4310308, 300],  // 아케인셰이드 메이지햇
    [1004810, 1, 4310308, 300],  // 아케인셰이드 아처햇
    [1004811, 1, 4310308, 300],  // 아케인셰이드 시프햇
    [1004812, 1, 4310308, 300],  // 아케인셰이드 파이렛햇
    [1102940, 1, 4310308, 300],  // 아케인셰이드 나이트케이프
    [1102941, 1, 4310308, 300],  // 아케인셰이드 메이지케이프
    [1102942, 1, 4310308, 300],  // 아케인셰이드 아처케이프
    [1102943, 1, 4310308, 300],  // 아케인셰이드 시프케이프
    [1102944, 1, 4310308, 300],  // 아케인셰이드 파이렛케이프
    [1082695, 1, 4310308, 300],  // 아케인셰이드 나이트글러브
    [1082696, 1, 4310308, 300],  // 아케인셰이드 메이지글러브
    [1082697, 1, 4310308, 300],  // 아케인셰이드 아처글러브
    [1082698, 1, 4310308, 300],  // 아케인셰이드 시프글러브
    [1082699, 1, 4310308, 300],  // 아케인셰이드 파이렛글러브
    [1053063, 1, 4310308, 300],  // 아케인셰이드 나이트슈트
    [1053064, 1, 4310308, 300],  // 아케인셰이드 메이지슈트
    [1053065, 1, 4310308, 300],  // 아케인셰이드 아처슈트
    [1053066, 1, 4310308, 300],  // 아케인셰이드 시프슈트
    [1053067, 1, 4310308, 300],  // 아케인셰이드 파이렛슈트
    [1073158, 1, 4310308, 300],  // 아케인셰이드 나이트슈즈
    [1073159, 1, 4310308, 300],  // 아케인셰이드 메이지슈즈
    [1073160, 1, 4310308, 300],  // 아케인셰이드 아처슈즈
    [1073161, 1, 4310308, 300],  // 아케인셰이드 시프슈즈
    [1073162, 1, 4310308, 300],  // 아케인셰이드 파이렛슈즈
    [1152196, 1, 4310308, 300],  // 아케인셰이드 나이트숄더
    [1152197, 1, 4310308, 300],  // 아케인셰이드 메이지숄더
    [1152198, 1, 4310308, 300],  // 아케인셰이드 아처숄더
    [1152199, 1, 4310308, 300],  // 아케인셰이드 시프숄더
    [1152200, 1, 4310308, 300],  // 아케인셰이드 파이렛숄더

    [1212120, 1, 4310308, 500], // 아케인셰이드 샤이닝로드
    [1213018, 1, 4310308, 500], // 아케인셰이드 튜너
    [1222113, 1, 4310308, 500], // 아케인셰이드 소울슈터
    [1232113, 1, 4310308, 500], // 아케인셰이드 데스페라도
    [1242121, 1, 4310308, 500], // 아케인셰이드 에너지체인
    [1242122, 1, 4310308, 500], // 아케인셰이드 에너지체인 (도적)
    [1262039, 1, 4310308, 500], // 아케인셰이드 ESP리미터
    [1272017, 1, 4310308, 500], // 아케인셰이드 체인
    [1282017, 1, 4310308, 500], // 아케인셰이드 매직 건틀렛
    [1292018, 1, 4310308, 500], // 아케인셰이드 초선
    [1302343, 1, 4310308, 500], // 아케인셰이드 세이버
    [1312203, 1, 4310308, 500], // 아케인셰이드 엑스
    [1322255, 1, 4310308, 500], // 아케인셰이드 해머
    [1332279, 1, 4310308, 500], // 아케인셰이드 대거
    [1342104, 1, 4310308, 500], // 아케인셰이드 블레이드
    [1362140, 1, 4310308, 500], // 아케인셰이드 케인
    [1372228, 1, 4310308, 500], // 아케인셰이드 완드
    [1382265, 1, 4310308, 500], // 아케인셰이드 스태프
    [1402259, 1, 4310308, 500], // 아케인셰이드 투핸드소드
    [1412181, 1, 4310308, 500], // 아케인셰이드 투핸드엑스
    [1422189, 1, 4310308, 500], // 아케인셰이드 투핸드해머
    [1432218, 1, 4310308, 500], // 아케인셰이드 스피어
    [1442274, 1, 4310308, 500], // 아케인셰이드 폴암
    [1452257, 1, 4310308, 500], // 아케인셰이드 보우
    [1462243, 1, 4310308, 500], // 아케인셰이드 크로스보우
    [1472265, 1, 4310308, 500], // 아케인셰이드 가즈
    [1482221, 1, 4310308, 500], // 아케인셰이드 클로
    [1492235, 1, 4310308, 500], // 아케인셰이드 피스톨
    [1522143, 1, 4310308, 500], // 아케인셰이드 듀얼보우건
    [1532150, 1, 4310308, 500], // 아케인셰이드 시즈건
    [1582023, 1, 4310308, 500], // 아케인셰이드 엘라하
    [1592020, 1, 4310308, 500], // 아케인셰이드 에인션트 보우
    [1214018, 1, 4310308, 500], // 아케인셰이드 브레스 슈터
    [1404018, 1, 4310308, 500], // 아케인셰이드 차크람

    [1009500, 1, 4310308, 1000], // 혼케인
    [1009501, 1, 4310308, 1000], // 혼케인
    [1009502, 1, 4310308, 1000], // 혼케인
    [1009503, 1, 4310308, 1000], // 혼케인
    [1009504, 1, 4310308, 1000], // 혼케인
    [1159500, 1, 4310308, 1000], // 혼케인
    [1159501, 1, 4310308, 1000], // 혼케인
    [1159502, 1, 4310308, 1000], // 혼케인
    [1159503, 1, 4310308, 1000], // 혼케인
    [1159504, 1, 4310308, 1000], // 혼케인
    [1109500, 1, 4310308, 1000], // 혼케인
    [1109501, 1, 4310308, 1000], // 혼케인
    [1109502, 1, 4310308, 1000], // 혼케인
    [1109503, 1, 4310308, 1000], // 혼케인
    [1109504, 1, 4310308, 1000], // 혼케인
    [1089500, 1, 4310308, 1000], // 혼케인
    [1089501, 1, 4310308, 1000], // 혼케인
    [1089502, 1, 4310308, 1000], // 혼케인
    [1089503, 1, 4310308, 1000], // 혼케인
    [1089504, 1, 4310308, 1000], // 혼케인
    [1079500, 1, 4310308, 1000], // 혼케인
    [1079501, 1, 4310308, 1000], // 혼케인
    [1079502, 1, 4310308, 1000], // 혼케인
    [1079503, 1, 4310308, 1000], // 혼케인
    [1079504, 1, 4310308, 1000], // 혼케인

    [1672077, 1, 4310308, 1000], // 스장상
    [1113070, 1, 4310308, 1000], // 스장상
    [1190528, 1, 4310308, 1000], // 스장상
    [1162084, 1, 4310308, 1000], // 스장상
    [1182155, 1, 4310308, 1000], // 스장상

    [1113305, 1, 4310308, 1500], // 글심
    [1122439, 1, 4310308, 1500], // 유산

    [1212990, 1, 4310308, 3000], // 초무상
    [1222990, 1, 4310308, 3000], // 초무상
    [1232990, 1, 4310308, 3000], // 초무상
    [1242990, 1, 4310308, 3000], // 초무상
    [1262990, 1, 4310308, 3000], // 초무상
    [1302990, 1, 4310308, 3000], // 초무상
    [1312990, 1, 4310308, 3000], // 초무상
    [1322990, 1, 4310308, 3000], // 초무상
    [1332990, 1, 4310308, 3000], // 초무상
    [1342990, 1, 4310308, 3000], // 초무상
    [1362990, 1, 4310308, 3000], // 초무상
    [1372990, 1, 4310308, 3000], // 초무상
    [1382990, 1, 4310308, 3000], // 초무상
    [1402990, 1, 4310308, 3000], // 초무상
    [1412990, 1, 4310308, 3000], // 초무상
    [1422990, 1, 4310308, 3000], // 초무상
    [1432990, 1, 4310308, 3000], // 초무상
    [1442990, 1, 4310308, 3000], // 초무상
    [1452990, 1, 4310308, 3000], // 초무상
    [1462990, 1, 4310308, 3000], // 초무상
    [1472990, 1, 4310308, 3000], // 초무상
    [1482990, 1, 4310308, 3000], // 초무상
    [1492990, 1, 4310308, 3000], // 초무상
    [1522990, 1, 4310308, 3000], // 초무상
    [1532990, 1, 4310308, 3000], // 초무상
    [1582990, 1, 4310308, 3000], // 초무상
    [1272990, 1, 4310308, 3000], // 초무상
    [1282990, 1, 4310308, 3000], // 초무상
    [1213990, 1, 4310308, 3000], // 초무상
    [1292990, 1, 4310308, 3000], // 초무상
    [1592990, 1, 4310308, 3000], // 초무상
    [1214990, 1, 4310308, 3000], // 초무상
    [1404990, 1, 4310308, 3000],  // 초무상

    [1012632, 1, 4310308, 3000],  // 칠흑
    [1022278, 1, 4310308, 3000],  // 칠흑
    [1672082, 1, 4310308, 5000],  // 칠흑
    [1132308, 1, 4310308, 5000],  // 칠흑
    [1122430, 1, 4310308, 5000],  // 칠흑
    [1182285, 1, 4310308, 5000],  // 칠흑
    [1032316, 1, 4310308, 5000],  // 칠흑
    [1113306, 1, 4310308, 5000],  // 칠흑

    [1162080, 1, 4310308, 5000],  // 칠흑 마도서
    [1162081, 1, 4310308, 5000],  // 칠흑
    [1162082, 1, 4310308, 5000],  // 칠흑
    [1162083, 1, 4310308, 5000],  // 칠흑

    [1190555, 1, 4310308, 8000],  // 칠흑 미트라
    [1190556, 1, 4310308, 8000],  // 칠흑 미트라
    [1190557, 1, 4310308, 8000],  // 칠흑 미트라
    [1190558, 1, 4310308, 8000],  // 칠흑 미트라
    [1190559, 1, 4310308, 8000]  // 칠흑 미트라

];

var prefix = "sujip_";
var status = -1;
var selected = -1;

function start() {
    status = -1;
    action(1, 0, 0);
}

function action(mode, type, selection) {
    if (mode != 1) {
        cm.dispose();
        return;
    }
    status++;

    if (status == 0) {
        var pendingList = [];
        var doneList = [];

        for (var i = 0; i < collectItems.length; i++) {
            var itemId = collectItems[i][0];
            var needAmount = collectItems[i][1];
            var key = prefix + itemId + "_" + needAmount;
            var done = cm.getClient().getKeyValue(key) == 1;
            if (done) doneList.push(i);
            else pendingList.push(i);
        }

        var text = "#fs11##e             " + 별노 + " [ 강림월드 ] 수집 컨텐츠 " + 별노 + "#n\r\n#r        주의 : 보유중인 아이템 클릭 시 즉시 수집됩니다.#k\r\n\r\n";
        finalList = pendingList.concat(doneList);

        for (var j = 0; j < finalList.length; j += 2) {
            var idx1 = finalList[j];
            var itemId1 = collectItems[idx1][0];
            var needAmount1 = collectItems[idx1][1];
            var rewardId1 = collectItems[idx1][2];
            var rewardAmount1 = collectItems[idx1][3];
            var key1 = prefix + itemId1 + "_" + needAmount1;
            var done1 = cm.getClient().getKeyValue(key1) == 1;
            var have1 = isEquip(itemId1) ? getEquipCount(itemId1) : cm.itemQuantity(itemId1);

            text += "#L" + j + "#";
            if (done1) {
                text += "#d#i" + itemId1 + "#(완료)#k";
            } else {
                text += "#b#i" + itemId1 + "#";
                text += have1 >= needAmount1
                    ? "#g(" + have1 + "/" + needAmount1 + ")#k"
                    : "#r(" + have1 + "/" + needAmount1 + ")#k";
            }
            text += "→#i" + rewardId1 + "##b" + rewardAmount1 + "개#k#l";

            if (j + 1 < finalList.length) {
                var idx2 = finalList[j + 1];
                var itemId2 = collectItems[idx2][0];
                var needAmount2 = collectItems[idx2][1];
                var rewardId2 = collectItems[idx2][2];
                var rewardAmount2 = collectItems[idx2][3];
                var key2 = prefix + itemId2 + "_" + needAmount2;
                var done2 = cm.getClient().getKeyValue(key2) == 1;
                var have2 = isEquip(itemId2) ? getEquipCount(itemId2) : cm.itemQuantity(itemId2);

                text += " #L" + (j + 1) + "#";
                if (done2) {
                    text += "#d#i" + itemId2 + "#(완료)#k";
                } else {
                    text += "#b#i" + itemId2 + "#";
                    text += have2 >= needAmount2
                        ? "#g(" + have2 + "/" + needAmount2 + ")#k"
                        : "#r(" + have2 + "/" + needAmount2 + ")#k";
                }
                text += "→#i" + rewardId2 + "##b" + rewardAmount2 + "개#k#l";
            }

            text += "\r\n";
        }

        cm.sendSimple(text);

    } else if (status == 1) {
        if (selection < 0 || selection >= finalList.length) {
            cm.sendOk("#fs11#올바르지 않은 선택입니다.");
            cm.dispose();
            return;
        }

        var realIdx = finalList[selection];
        selected = realIdx;
        var itemId = collectItems[realIdx][0];
        var needAmount = collectItems[realIdx][1];
        var rewardId = collectItems[realIdx][2];
        var rewardAmount = collectItems[realIdx][3];
        var key = prefix + itemId + "_" + needAmount;

        if (cm.getClient().getKeyValue(key) == 1) {
            cm.sendOk("#fs11#이미 완료한 항목입니다.");
            cm.dispose();
            return;
        }

        var have = isEquip(itemId) ? getEquipCount(itemId) : cm.itemQuantity(itemId);
        if (have < needAmount) {
            cm.sendOk("#fs11#아이템 수량이 부족합니다. (" + have + "/" + needAmount + ")");
            cm.dispose();
            return;
        }

        if (!canHoldReward(rewardId, rewardAmount)) {
            cm.sendOk("#fs11#보상을 받을 인벤토리 공간이 부족합니다!");
            cm.dispose();
            return;
        }

        if (!payItems(itemId, needAmount)) {
            cm.sendOk("#fs11#아이템 삭제 실패!");
            cm.dispose();
            return;
        }

        gainReward(rewardId, rewardAmount);
        cm.getPlayer().getClient().setKeyValue(key, "1");

        cm.sendOk("#fs11#수집 완료!\r\n보상으로 #i" + rewardId + "##b#z" + rewardId + "# " + rewardAmount + "개#k를 받았습니다.");
        status = -1;
    }
}

function payItems(itemId, amount) {
    var removed = 0;
    var invType = isEquip(itemId) ? MapleInventoryType.EQUIP : MapleInventoryType.USE;
    var inv = cm.getPlayer().getInventory(invType);

    var itemsList = [];
    var iter = inv.list().iterator();
    while (iter.hasNext()) {
        var it = iter.next();
        if (it.getItemId() == itemId) {
            itemsList.push(it);
        }
    }

    itemsList.sort(function(a, b) {
        return a.getPosition() - b.getPosition();
    });

    for (var i = 0; i < itemsList.length && removed < amount; i++) {
        var it = itemsList[i];
        MapleInventoryManipulator.removeFromSlot(
            cm.getClient(),
            invType,
            it.getPosition(),
            1,
            false
        );
        removed++;
    }

    return removed == amount;
}

function gainReward(itemId, amount) {
    cm.gainItem(itemId, amount);
}

function isEquip(itemId) {
    return Math.floor(itemId / 1000000) == 1;
}

function getEquipCount(itemId) {
    var inv = cm.getPlayer().getInventory(MapleInventoryType.EQUIP);
    if (!inv) return 0;
    var items = inv.newList();
    if (!items) return 0;

    var count = 0;
    var iter = items.iterator();
    while (iter.hasNext()) {
        var item = iter.next();
        if (item && item.getItemId() == itemId) count++;
    }
    return count;
}

function canHoldReward(itemId, amount) {
    var inv;
    if (isEquip(itemId)) {
        inv = cm.getPlayer().getInventory(MapleInventoryType.EQUIP);
        return inv.getNumFreeSlot() >= amount;
    } else {
        inv = cm.getPlayer().getInventory(MapleInventoryType.USE);
        return inv.getNumFreeSlot() > 0;
    }
}
