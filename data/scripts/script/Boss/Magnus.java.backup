package script.Boss;

import constants.GameConstants;
import constants.QuestExConstants;
import database.DBConfig;
import objects.fields.Field;
import objects.fields.gameobject.lifes.ChangeableStats;
import objects.fields.gameobject.lifes.MapleLifeFactory;
import objects.fields.gameobject.lifes.MapleMonster;
import objects.item.Item;
import objects.item.MapleInventory;
import objects.item.MapleInventoryType;
import objects.item.MapleItemInformationProvider;
import objects.users.MapleCharacter;
import scripting.EventInstanceManager;
import scripting.EventManager;
import scripting.ScriptMessageFlag;
import scripting.newscripting.ScriptEngineNPC;

import java.awt.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class Magnus extends ScriptEngineNPC {

    public void magnus_easy() {
        initNPC(MapleLifeFactory.getNPC(3001000));
        if (DBConfig.isGanglim) {
            self.say("현재는 매그너스 모의전을 이용하실 수 없습니다.");
        }
        self.say("그 포탈을 통해 매그너스와의 모의전을 체험해 보실 수 있어요. 물론 매그너스의 본래 힘엔 턱없이 못미치겠지만 노바의 현재 기술로는 그게 한계군요.", ScriptMessageFlag.NpcReplacedByNpc);
        if (self.askYesNo("매그너스와의 모의전(이지 모드)을 위해 이동하실건가요?\r\n#b<< 매그너스 모의전은 1일에 1회 클리어 가능합니다. >>\r\n<<115 레벨 이상 유저 간 파티로 입장하실 수 있습니다.>>", ScriptMessageFlag.NpcReplacedByNpc) == 1) {
            self.say("최대한 비슷한 환경을 조성하기 위해 폭군의 성채를 재현해 두었어요. 그 곳에서 왕좌에 진입할 수 있어요.", ScriptMessageFlag.NpcReplacedByNpc);
            target.registerTransferField(401060399); //say이후에 넘어가야할때는 target을 붙인다!
        }
    }

    public void enter_magnusDoor() {
        initNPC(MapleLifeFactory.getNPC(3001020));
        EventManager em = getEventManager("Magnus");
        if (em == null) {
            self.say("현재는 매그너스 레이드를 이용하실 수 없습니다.");
        } else {
            if (target.getParty() == null) {
                self.say("1인 이상의 파티에 속해야만 입장할 수 있습니다.");
            } else {
                if (target.getParty().getLeader().getId() != target.getId() && DBConfig.isGanglim) {
                    self.say("파티장을 통해 진행해 주십시오.");
                } else {
                    if (target.getMapId() == 401060399) { //이지매그 입장맵
                        if (DBConfig.isGanglim) {
                            self.say("현재는 매그너스 모의전을 이용하실 수 없습니다.");
                        }
                        if (self.askYesNo("매그너스 퇴치를 위해 폭군의 왕좌로 이동 하시겠습니까??\r\n#b<< 매그너스 모의전은 1일에 1회 클리어 가능합니다. >>\r\n<<115 레벨 이상 유저 간의 파티로 입장하실 수 있습니다.>>") == 1) {
                            //401060200 ~ 401060209
                            if (target.getParty().isPartySameMap()) {
                                boolean canEnter = false;
                                String overLap = checkEventNumber(getPlayer(), QuestExConstants.Magnus.getQuestID());
                                if (overLap == null) {
                                    if (em.getProperty("status0").equals("0")) {
                                        canEnter = true;
                                    }
                                    if (canEnter) {
                                        em.setProperty("status0", "1");
                                        EventInstanceManager eim = em.readyInstance();
                                        eim.setProperty("map", 401060300);
                                        eim.setProperty("mode", "easy");
                                        getClient().getChannelServer().getMapFactory().getMap(401060300).resetFully(false);
                                        updateLastDate(getPlayer(), QuestExConstants.Magnus.getQuestID()); //이지매그와 노말매그는 시간을 공유함
                                        eim.registerParty(target.getParty(), getPlayer().getMap());
                                    } else {
                                        self.sayOk("이미 해당채널에서 매그너스 레이드가 진행중입니다.");
                                    }
                                } else {
                                    self.say("파티원 중#b#e" + overLap + "가#n#k 오늘 이미 입장 하여 더 이상 도전할 수 없습니다.");
                                }
                            } else {
                                self.say("파티원 모두 같은맵에 있으셔야합니다.");
                            }
                        }
                    } else {
                    	boolean single = false;
                    	if (!DBConfig.isGanglim) {
                    		single = getPlayer().getParty().getMembers().size() == 1;
                    	}
                    	String text = text = "매그너스 퇴치를 위해 폭군의 왕좌로 이동 하시겠습니까??#b\r\n";
                    	if (DBConfig.isGanglim) {
                            text += "#L0#폭군의 왕좌(하드)로 이동 한다.(레벨 175이상)";
                            text += " #r[" + getPlayer().getOneInfoQuestInteger(QuestExConstants.HardMagnus.getQuestID(), "eNum") + "/" + (getPlayer().getBossTier() + 1) + "]#b";
                            getPlayer().getPartyMembers().forEach(chr -> chr.dropMessage(5, "[하드 매그너스] 오늘 해당 보스를 "+chr.getOneInfoQuestInteger(QuestExConstants.HardMagnus.getQuestID(), "eNum")+"번 입장 하셨습니다. 총 "+(chr.getBossTier() + 1)+"번 입장 하실 수있습니다."));
                            text += "\r\n#L1#폭군의 왕좌(노멀)로 이동 한다.(레벨 155이상)";
                            text += " #r[" + getPlayer().getOneInfoQuestInteger(QuestExConstants.Magnus.getQuestID(), "eNum") + "/" + (getPlayer().getBossTier() + 1) + "]#b";
                            getPlayer().getPartyMembers().forEach(chr -> chr.dropMessage(5, "[노말 매그너스] 오늘 해당 보스를 "+chr.getOneInfoQuestInteger(QuestExConstants.Magnus.getQuestID(), "eNum")+"번 입장 하셨습니다. 총 "+(chr.getBossTier() + 1)+"번 입장 하실 수있습니다."));
                            text +="\r\n#L3#폭군의 왕좌(하드) 연습 모드로 이동 한다.(레벨 175이상)#l\r\n#L2#이동하지 않는다.#l";
                    	} else {
                            text += "#L0#폭군의 왕좌(하드)" + (single ? "(싱글)" : "(멀티)") + "로 이동.(레벨 175이상)";
                            text += "\r\n#L1#폭군의 왕좌(노멀)" + (single ? "(싱글)" : "(멀티)") + "로 이동.(레벨 155이상)";
                            //text +="\r\n#L3#폭군의 왕좌(하드) 연습 모드로 이동.(레벨 175이상)#l\r\n#L2#이동하지 않는다.#l";
                            /* int hreset = getPlayer().getOneInfoQuestInteger(QuestExConstants.WeeklyQuestResetCount.getQuestID(), "HardMagnus" + (single ? "Single" : "Multi"));
                            text += "\r\n#L5#폭군의 왕좌(하드)" + (single ? "(싱글)" : "(멀티)") + "입장횟수 1 증가(" + ((single ? 2 : 1) - hreset) + "회 가능)#l";
                            */
                            int nreset = getPlayer().getOneInfoQuestInteger(QuestExConstants.DailyQuestResetCount.getQuestID(), "NormalMagnus" + (single ? "Single" : "Multi"));
                            text += "\r\n#L6#폭군의 왕좌(노멀)" + (single ? "(싱글)" : "(멀티)") + "입장횟수 1 증가(" + ((single ? 2 : 1) - nreset) + "회 가능)#l"; 
                    	}

                        int v0 = self.askMenu(text);
                        if (!DBConfig.isGanglim) {
                        	if (v0 == 6) { //(v0 == 5 || v0 == 6) {
                        		int togetherPoint = getPlayer().getTogetherPoint();
                        		if (togetherPoint < 150) {
                        			self.sayOk("협동포인트가 부족합니다. 현재 협동포인트 : " + togetherPoint);
                        			return;
                        		}
                        		if (v0 == 5) { //하드 매그너스 리셋
                            		int hreset = getPlayer().getOneInfoQuestInteger(QuestExConstants.WeeklyQuestResetCount.getQuestID(), "HardMagnus" + (single ? "Single" : "Multi"));
                                    if (hreset > (single ? 1 : 0)) { //싱글은 2회 구매 가능
                                    	self.sayOk("이번주는 더이상 입장가능횟수 증가가 불가능합니다.");
                                    	return;
                                    }
                                    getPlayer().gainTogetherPoint(-150);
                                    getPlayer().updateOneInfo(QuestExConstants.WeeklyQuestResetCount.getQuestID(), "HardMagnus"  + (single ? "Single" : "Multi"), String.valueOf(hreset + 1));
                                    self.sayOk("입장가능횟수 증가가 완료되었습니다.");
                                    return;
                            	}
                            	if (v0 == 6) { //노말 매그너스 리셋
                            		int nreset = getPlayer().getOneInfoQuestInteger(QuestExConstants.DailyQuestResetCount.getQuestID(), "NormalMagnus" + (single ? "Single" : "Multi"));
                                    if (nreset > (single ? 1 : 0)) { //싱글은 2회 구매 가능
                                    	self.sayOk("이번주는 더이상 입장가능횟수 증가가 불가능합니다.");
                                    	return;
                                    }
                                    getPlayer().gainTogetherPoint(-150);
                                    getPlayer().updateOneInfo(QuestExConstants.DailyQuestResetCount.getQuestID(), "NormalMagnus"  + (single ? "Single" : "Multi"), String.valueOf(nreset + 1));
                                    self.sayOk("입장가능횟수 증가가 완료되었습니다.");
                                    return;
                            	}
                        	}
                        } 
                        
                        if (!DBConfig.isGanglim && target.getParty().getLeader().getId() != target.getId()) {
                        	self.say("파티장을 통해 진행해 주십시오.");
                        	return;
                        }
                        
                        if (target.getParty().isPartySameMap()) {
                            boolean canEnter = false;
                            if (v0 != 3) {
                                int v2 = -1;
                                if (v0 == 0) {
                                    if (getPlayer().getQuestStatus(2000021) == 1) {
                                        if (GameConstants.isZero(getPlayer().getJob())) {
                                            v2 = self.askMenu("#e<제네시스 무기>#n\r\n검은 마법사의 힘이 담긴 #b제네시스 무기#k의 비밀을 풀기 위한 임무를 수행 할 수 있다. 어떻게 할까?\r\n\r\n#e#r<임무 수행 조건>#n#k\r\n#b -혼자서 격파\r\n -최종 데미지 50% 감소\r\n -착용 중인 장비의 순수 능력치만 적용\r\n#k#L0#미션을 수행한다.#l\r\n#L1#미션을 수행하지 않는다.#l", ScriptMessageFlag.Self);
                                        } else {
                                            v2 = self.askMenu("#e<제네시스 무기>#n\r\n검은 마법사의 힘이 담긴 #b제네시스 무기#k의 비밀을 풀기 위한 임무를 수행 할 수 있다. 어떻게 할까?\r\n\r\n#e#r<임무 수행 조건>#n#k\r\n#b -혼자서 격파\r\n -봉인된 제네시스 무기와 보조무기만 장착\r\n -최종 데미지 50% 감소\r\n -착용 중인 장비의 순수 능력치만 적용\r\n#k#L0#미션을 수행한다.#l\r\n#L1#미션을 수행하지 않는다.#l", ScriptMessageFlag.Self);
                                        }
                                        if (v2 == 0) {
                                        	if (!getPlayer().haveItem(4036460)) {
                                        		self.say("#b#i4036460# #z4036460# 1개#k가 필요하다. 검은 마법사를 처치하여 획득할 수 있다.", ScriptMessageFlag.Self);
                                        		return;
                                        	}
                                            if (!checkBMQuestEquip()) {
                                                return;
                                            }
                                            if (getPlayer().getParty().getPartyMemberList().size() > 1) {
                                                self.say("해당 퀘스트는 혼자 진행해야 한다.", ScriptMessageFlag.Self);
                                                return;
                                            }
                                        }
                                    }
                                }

                                String overLap = checkEventNumber(getPlayer(), QuestExConstants.Magnus.getQuestID(), DBConfig.isGanglim);
                                if (v0 == 0) { //하드매그
                                    overLap = checkEventNumber(getPlayer(), QuestExConstants.HardMagnus.getQuestID(), DBConfig.isGanglim);
                                }
                                //getPlayer().dropMessage(5, (overLap == null ? "Null" : overLap));
                                if (overLap == null) {
                                    if (v0 == 0) { //하드매그너스
                                        String lastDate = checkEventLastDate(getPlayer(), QuestExConstants.HardMagnus.getQuestID());
                                        if (lastDate == null || DBConfig.isGanglim) { // 강림은 30분 재입장 삭제
                                            if (em.getProperty("Hstatus0").equals("0")) {
                                                canEnter = true;
                                            }
                                            if (canEnter) {
                                                em.setProperty("Hstatus0", "1");
                                                EventInstanceManager eim = em.readyInstance();
                                                eim.setProperty("map", 401060100);
                                                eim.setProperty("mode", "hard");
                                                getClient().getChannelServer().getMapFactory().getMap(401060100).resetFully(false);
                                                updateLastDate(getPlayer(), QuestExConstants.HardMagnus.getQuestID());
                                                if (DBConfig.isGanglim) { 
                                                    updateQuestEx(getPlayer(), QuestExConstants.HardMagnus.getQuestID());
                                                }
                                                if (v2 == 0) {
                                                    getPlayer().applyBMCurse1(3);
                                                }
                                                if (!DBConfig.isGanglim && !single) {
                                                	for (MapleCharacter partyMember : getPlayer().getPartyMembers()) {
                                                		if (partyMember.getMapId() == getPlayer().getMapId()) {
                                                			partyMember.setMultiMode(true);
                                                			partyMember.applyBMCurseJinMulti();
                                                		}
                                                	}
                                                }
                                                eim.registerParty(target.getParty(), getPlayer().getMap());
                                            } else {
                                                self.sayOk("현재 모든맵이 가득차 이용하실 수 없습니다. 다른 채널을 이용해주세요.");
                                            }
                                        } else {
                                            self.say("파티원 중 #b#e" + lastDate + " #n#k뒤 재 입장 가능합니다.");//본메 : 30분 이내에 입장한 파티원이 있습니다. 이지 및 노멀 모드를 통합하여 입장 후 30분 이내에 재입장이 불가능합니다.
                                        }
                                    } else if (v0 == 1) { //노말매그너스
                                        if (em.getProperty("Nstatus0").equals("0")) {
                                            canEnter = true;
                                        }
                                        if (canEnter) {
                                            em.setProperty("Nstatus0", "1");
                                            EventInstanceManager eim = em.readyInstance();
                                            eim.setProperty("map", 401060200);
                                            eim.setProperty("mode", "normal");
                                            getClient().getChannelServer().getMapFactory().getMap(401060200).resetFully(false);
                                            updateLastDate(getPlayer(), QuestExConstants.Magnus.getQuestID());
                                            if (DBConfig.isGanglim) { 
                                                updateQuestEx(getPlayer(), QuestExConstants.Magnus.getQuestID());
                                            }
                                            if (!DBConfig.isGanglim && !single) {
                                            	for (MapleCharacter partyMember : getPlayer().getPartyMembers()) {
                                            		if (partyMember.getMapId() == getPlayer().getMapId()) {
                                            			partyMember.setMultiMode(true);
                                            			partyMember.applyBMCurseJinMulti();
                                            		}
                                            	}
                                            }
                                            eim.registerParty(target.getParty(), getPlayer().getMap());
                                        } else {
                                            self.sayOk("현재 모든맵이 가득차 이용하실 수 없습니다. 다른 채널을 이용해주세요.");
                                        }
                                    }
                                } else {
                                    String text_ = "파티원 중#b#e" + overLap + "가#n#k 오늘 이미 입장 하여 더 이상 도전할 수 없습니다.";
                                    if (!DBConfig.isGanglim) {
                                        text_ += "\r\n(하드매그너스의 경우 매주 목요일 마다 리셋 됩니다.)";
                                    }
                                    self.say(text_);
                                }
                            } else {
                                self.say("현재 연습모드는 준비중입니다.");
                            }
                        } else {
                            self.say("파티원 모두 같은맵에 있으셔야합니다.");
                        }
                    }
                }
            }
        }
    }


    int[] bmWeapons = GameConstants.bmWeapons;
    public boolean checkBMQuestEquip() {
        MapleInventory inv = getPlayer().getInventory(MapleInventoryType.EQUIPPED);
        MapleItemInformationProvider ii = MapleItemInformationProvider.getInstance();
        List<Integer> blockedList = new ArrayList<>();
        for (int next = 0; next > -3999; --next) {
            Item item = inv.getItem((short) next);
            if (item == null) {
                continue;
            }
            if (!ii.isCash(item.getItemId())) {
                if (next == -11 || next == -10 || next <= -1600 && next >= -1700 || next == -117 || next == -122 || next == -131) {
                    if (next == -11) {
                        boolean find = false;
                        for (int i = 0; i < bmWeapons.length; ++i) {
                            int weapon = bmWeapons[i];
                            if (item.getItemId() == weapon) {
                                find = true;
                                break;
                            }
                        }
                        if (!find) {
                            if (!(item.getItemId() >= 1572000 && item.getItemId() <= 1572010)) {
                                blockedList.add(item.getItemId());
                            }
                        }
                    }
                } else {
                    blockedList.add(item.getItemId());
                }
            }
        }
        if (!blockedList.isEmpty()) {
            String v0 = "#r무기#k와 #b보조무기#k만 착용하고 도전해야 한다.\r\n\r\n#r<착용 해제해야 하는 아이템>#k\r\n";
            for (int i = 0; i < blockedList.size(); ++i) {
                int bid = blockedList.get(i);
                v0 += "#i" + bid + "# #z" + bid + "#\r\n";
            }
            self.say(v0, ScriptMessageFlag.Self);
            return false;
        }
        return true;
    }


    public void magnus_boss() {
    	if (!DBConfig.isGanglim) {
    		enter_magnusDoor();
    		return;
    	}
        initNPC(MapleLifeFactory.getNPC(3001020));
        EventManager em = getEventManager("Magnus");
        if (em == null) {
            self.say("현재는 매그너스 레이드를 이용하실 수 없습니다.");
        } else {
            if (target.getParty() == null) {
                self.say("1인 이상의 파티에 속해야만 입장할 수 있습니다.");
            } else {
                if (target.getParty().getLeader().getId() != target.getId()) {
                    self.say("파티장을 통해 진행해 주십시오.");
                } else {
                    if (target.getMapId() == 401060399) { //이지매그 입장맵
                        if (DBConfig.isGanglim) {
                            self.say("현재는 매그너스 모의전을 이용하실 수 없습니다.");
                        }
                        if (self.askYesNo("매그너스 퇴치를 위해 폭군의 왕좌로 이동 하시겠습니까??\r\n#b<< 매그너스 모의전은 1일에 1회 클리어 가능합니다. >>\r\n<<115 레벨 이상 유저 간의 파티로 입장하실 수 있습니다.>>") == 1) {
                            //401060200 ~ 401060209
                            if (target.getParty().isPartySameMap()) {
                                boolean canEnter = false;
                                String overLap = checkEventNumber(getPlayer(), QuestExConstants.Magnus.getQuestID());
                                if (overLap == null) {
                                    if (em.getProperty("status0").equals("0")) {
                                        canEnter = true;
                                    }
                                    if (canEnter) {
                                        em.setProperty("status0", "1");
                                        EventInstanceManager eim = em.readyInstance();
                                        eim.setProperty("map", 401060300);
                                        eim.setProperty("mode", "easy");
                                        getClient().getChannelServer().getMapFactory().getMap(401060300).resetFully(false);
                                        updateLastDate(getPlayer(), QuestExConstants.Magnus.getQuestID()); //이지매그와 노말매그는 시간을 공유함
                                        eim.registerParty(target.getParty(), getPlayer().getMap());
                                    } else {
                                        self.sayOk("이미 해당채널에서 매그너스 레이드가 진행중입니다.");
                                    }
                                } else {
                                    self.say("파티원 중#b#e" + overLap + "가#n#k 오늘 이미 입장 하여 더 이상 도전할 수 없습니다.");
                                }
                            } else {
                                self.say("파티원 모두 같은맵에 있으셔야합니다.");
                            }
                        }
                    } else {
                        String text = "매그너스 퇴치를 위해 폭군의 왕좌로 이동 하시겠습니까??#b\r\n";
                        text += "#L0#폭군의 왕좌(하드)로 이동 한다.(레벨 175이상)";
                        if (DBConfig.isGanglim) {
                            text += " #r[" + getPlayer().getOneInfoQuestInteger(QuestExConstants.HardMagnus.getQuestID(), "eNum") + "/" + (getPlayer().getBossTier() + 1) + "]#b";

                            getPlayer().getPartyMembers().forEach(chr -> chr.dropMessage(5, "[하드 매그너스] 오늘 해당 보스를 "+chr.getOneInfoQuestInteger(QuestExConstants.HardMagnus.getQuestID(), "eNum")+"번 입장 하셨습니다. 총 "+(chr.getBossTier() + 1)+"번 입장 하실 수있습니다."));
                        }
                        text += "\r\n#L1#폭군의 왕좌(노멀)로 이동 한다.(레벨 155이상)";
                        if (DBConfig.isGanglim) {
                            text += " #r[" + getPlayer().getOneInfoQuestInteger(QuestExConstants.Magnus.getQuestID(), "eNum") + "/" + (getPlayer().getBossTier() + 1) + "]#b";
                            getPlayer().getPartyMembers().forEach(chr -> chr.dropMessage(5, "[노말 매그너스] 오늘 해당 보스를 "+chr.getOneInfoQuestInteger(QuestExConstants.Magnus.getQuestID(), "eNum")+"번 입장 하셨습니다. 총 "+(chr.getBossTier() + 1)+"번 입장 하실 수있습니다."));
                        }
                        text +="\r\n#L3#폭군의 왕좌(하드) 연습 모드로 이동 한다.(레벨 175이상)#l\r\n#L2#이동하지 않는다.#l";

                        int v0 = self.askMenu(text);
                        if (target.getParty().isPartySameMap()) {
                            boolean canEnter = false;
                            if (v0 != 3) {
                                int v2 = -1;
                                if (v0 == 0) {
                                    if (getPlayer().getQuestStatus(2000021) == 1) {
                                        if (GameConstants.isZero(getPlayer().getJob())) {
                                            v2 = self.askMenu("#e<제네시스 무기>#n\r\n검은 마법사의 힘이 담긴 #b제네시스 무기#k의 비밀을 풀기 위한 임무를 수행 할 수 있다. 어떻게 할까?\r\n\r\n#e#r<임무 수행 조건>#n#k\r\n#b -혼자서 격파\r\n -최종 데미지 50% 감소\r\n -착용 중인 장비의 순수 능력치만 적용\r\n#k#L0#미션을 수행한다.#l\r\n#L1#미션을 수행하지 않는다.#l", ScriptMessageFlag.Self);
                                        } else {
                                            v2 = self.askMenu("#e<제네시스 무기>#n\r\n검은 마법사의 힘이 담긴 #b제네시스 무기#k의 비밀을 풀기 위한 임무를 수행 할 수 있다. 어떻게 할까?\r\n\r\n#e#r<임무 수행 조건>#n#k\r\n#b -혼자서 격파\r\n -봉인된 제네시스 무기와 보조무기만 장착\r\n -최종 데미지 50% 감소\r\n -착용 중인 장비의 순수 능력치만 적용\r\n#k#L0#미션을 수행한다.#l\r\n#L1#미션을 수행하지 않는다.#l", ScriptMessageFlag.Self);
                                        }
                                        if (v2 == 0) {
                                            if (!checkBMQuestEquip()) {
                                                return;
                                            }
                                            if (getPlayer().getParty().getPartyMemberList().size() > 1) {
                                                self.say("해당 퀘스트는 혼자 진행해야 한다.", ScriptMessageFlag.Self);
                                                return;
                                            }
                                        }
                                    }
                                }

                                String overLap = checkEventNumber(getPlayer(), QuestExConstants.Magnus.getQuestID(), DBConfig.isGanglim);
                                if (v0 == 0) { //하드매그
                                    overLap = checkEventNumber(getPlayer(), QuestExConstants.HardMagnus.getQuestID(), DBConfig.isGanglim);
                                }
                                if (overLap == null) {
                                    if (v0 == 0) { //하드매그너스
                                        String lastDate = checkEventLastDate(getPlayer(), QuestExConstants.HardMagnus.getQuestID());
                                        if (lastDate == null || DBConfig.isGanglim) { // 강림은 30분 재입장 삭제
                                            if (em.getProperty("Hstatus0").equals("0")) {
                                                canEnter = true;
                                            }
                                            if (canEnter) {
                                                em.setProperty("Hstatus0", "1");
                                                EventInstanceManager eim = em.readyInstance();
                                                eim.setProperty("map", 401060100);
                                                eim.setProperty("mode", "hard");
                                                getClient().getChannelServer().getMapFactory().getMap(401060100).resetFully(false);
                                                updateLastDate(getPlayer(), QuestExConstants.HardMagnus.getQuestID());
                                                if (DBConfig.isGanglim) {
                                                    updateQuestEx(getPlayer(), QuestExConstants.HardMagnus.getQuestID());
                                                }
                                                if (v2 == 0) {
                                                    getPlayer().applyBMCurse1(3);
                                                }
                                                eim.registerParty(target.getParty(), getPlayer().getMap());
                                            } else {
                                                self.sayOk("현재 모든맵이 가득차 이용하실 수 없습니다. 다른 채널을 이용해주세요.");
                                            }
                                        } else {
                                            self.say("파티원 중 #b#e" + lastDate + " #n#k뒤 재 입장 가능합니다.");//본메 : 30분 이내에 입장한 파티원이 있습니다. 이지 및 노멀 모드를 통합하여 입장 후 30분 이내에 재입장이 불가능합니다.
                                        }
                                    } else if (v0 == 1) { //노말매그너스
                                        if (em.getProperty("Nstatus0").equals("0")) {
                                            canEnter = true;
                                        }
                                        if (canEnter) {
                                            em.setProperty("Nstatus0", "1");
                                            EventInstanceManager eim = em.readyInstance();
                                            eim.setProperty("map", 401060200);
                                            eim.setProperty("mode", "normal");
                                            getClient().getChannelServer().getMapFactory().getMap(401060200).resetFully(false);
                                            updateLastDate(getPlayer(), QuestExConstants.Magnus.getQuestID());
                                            if (DBConfig.isGanglim) {
                                                updateQuestEx(getPlayer(), QuestExConstants.Magnus.getQuestID());
                                            }
                                            eim.registerParty(target.getParty(), getPlayer().getMap());
                                        } else {
                                            self.sayOk("현재 모든맵이 가득차 이용하실 수 없습니다. 다른 채널을 이용해주세요.");
                                        }
                                    }
                                } else {
                                    String text_ = "파티원 중#b#e" + overLap + "가#n#k 오늘 이미 입장 하여 더 이상 도전할 수 없습니다.";
                                    if (!DBConfig.isGanglim) {
                                        text_ += "\r\n(하드매그너스의 경우 매주 목요일 마다 리셋 됩니다.)";
                                    }
                                    self.say(text_);
                                }
                            } else {
                                self.say("현재 연습모드는 준비중입니다.");
                            }
                        } else {
                            self.say("파티원 모두 같은맵에 있으셔야합니다.");
                        }
                    }
                }
            }
        }
    }

    public void magnus_summon() { //하드매그너스 소환
        EventInstanceManager eim = getEventInstance();
        if (eim != null) {
            if (eim.getProperty("summonMOB") == null) {
                eim.setProperty("summonMOB", "1");
                Field field = getPlayer().getMap();
                if (DBConfig.isGanglim) {
                	field.spawnMonster(MapleLifeFactory.getMonster(8880000), new Point(1860, -1450), 32);
                }
                else {
                	if (getPlayer().getPartyMembers().size() == 1)  {
                		field.spawnMonster(MapleLifeFactory.getMonster(8880000), new Point(1860, -1450), 32);
                    }
                	else {
                		final MapleMonster magnus = MapleLifeFactory.getMonster(8880000);
                		magnus.setPosition(new Point(1860, -1450));
                		final long hp = magnus.getMobMaxHp();
                        ChangeableStats cs = new ChangeableStats(magnus.getStats());
                        cs.hp = hp * 3L;
                        if (cs.hp < 0) {
                        	cs.hp = Long.MAX_VALUE;
                        }
                        magnus.getStats().setHp(cs.hp);
                        magnus.getStats().setMaxHp(cs.hp);
                        magnus.setOverrideStats(cs);

                        field.spawnMonster(magnus, 32);
                	}
                }
            }
        }
    }

    public void magnus_summon_N() { //노말매그너스 소환
        EventInstanceManager eim = getEventInstance();
        if (eim != null) {
            if (eim.getProperty("summonMOB") == null) {
                eim.setProperty("summonMOB", "1");
                Field field = getPlayer().getMap();
                if (DBConfig.isGanglim) {
                	field.spawnMonster(MapleLifeFactory.getMonster(8880002), new Point(1860, -1450), 32);
                } else {
                	if (getPlayer().getPartyMembers().size() == 1)  {
                		field.spawnMonster(MapleLifeFactory.getMonster(8880002), new Point(1860, -1450), 32);
                    }
                	else {
                		final MapleMonster magnus = MapleLifeFactory.getMonster(8880002);
                		magnus.setPosition(new Point(1860, -1450));
                		final long hp = magnus.getMobMaxHp();
                        ChangeableStats cs = new ChangeableStats(magnus.getStats());
                        cs.hp = hp * 3L;;
                        if (cs.hp < 0) {
                        	cs.hp = Long.MAX_VALUE;
                        }
                        magnus.getStats().setHp(cs.hp);
                        magnus.getStats().setMaxHp(cs.hp);
                        magnus.setOverrideStats(cs);

                        field.spawnMonster(magnus, 32);
                	}
                }
            }
        }
    }

    public void magnus_summon_E() { //이지매그너스 소환
        EventInstanceManager eim = getEventInstance();
        if (eim != null) {
            if (eim.getProperty("summonMOB") == null) {
                eim.setProperty("summonMOB", "1");
                Field field = getPlayer().getMap();
                field.spawnMonster(MapleLifeFactory.getMonster(8880010), new Point(1860, -1450), 32);
            }
        }
    }

    public void out_magnusDoor() {
        initNPC(MapleLifeFactory.getNPC(3001020));
        if (self.askYesNo("전투를 마치고 이동 합니다.") == 1) {
            getPlayer().setRegisterTransferFieldTime(0);
            getPlayer().setRegisterTransferField(0);
            List<Integer> normalMap = new ArrayList(Arrays.asList(401060200, 401060201, 401060202, 401060203, 401060204, 401060205, 401060206, 401060207, 401060208, 401060209));
            if (normalMap.contains(target.getMapId())) {
                registerTransferField(401060399); //이지매그
            } else {
                registerTransferField(401060000);
            }
            if (getPlayer().getEventInstance() != null) {
                getPlayer().getEventInstance().unregisterPlayer(getPlayer());
                getPlayer().setEventInstance(null);
            }
        }
    }

    public void magnus_out() {
        if (self.askYesNo("전투를 마치고 이동 합니다.") == 1) {
            getPlayer().setRegisterTransferFieldTime(0);
            getPlayer().setRegisterTransferField(0);
            List<Integer> normalMap = Arrays.asList(401060200, 401060201, 401060202, 401060203, 401060204, 401060205, 401060206, 401060207, 401060208, 401060209);
            if (!DBConfig.isGanglim && normalMap.contains(target.getMapId())) {
                registerTransferField(401060399); //이지매그
            } else {
                registerTransferField(401060000);
            }
            if (getPlayer().getEventInstance() != null) {
                getPlayer().getEventInstance().unregisterPlayer(getPlayer());
                getPlayer().setEventInstance(null);
            }
        }
    }


    /*
        FieldSet fieldSet = fieldSet("EasyMagnusEnter");
        if (target.getMapId() != 401060399) {
            fieldSet = fieldSet("MagnusEnter");
        }
        if (fieldSet == null) {
            self.sayOk("지금은 매그너스 레이드를 이용하실 수 없습니다.");
            return;
        }
        boolean enterField = false;
        if (target.getMapId() == 401060399) { //이지매그입장맵
            if (self.askYesNo("매그너스 퇴치를 위해 폭군의 왕좌로 이동 하시겠습니까??\r\n#b<< 매그너스 모의전은 1일에 1회 클리어 가능합니다. >>\r\n<<115 레벨 이상 유저 간의 파티로 입장하실 수 있습니다.>>") == 1) {
                enterField = true;
            }
        } else { //노말, 하드매그
             //TODO
        }
        if (enterField) {
            int enter = fieldSet.enter(target.getId());
            if (enter == -1) self.say("알 수 없는 이유로 입장할 수 없습니다. 잠시 후에 다시 시도해 주십시오.");
            else if (enter == 1) self.say("파티를 맺어야만 도전할 수 있습니다.");
            else if (enter == 2) self.say("파티장을 통해 진행해 주십시오.");
            else if (enter == 3) self.say("최소 " + fieldSet.minMember + "인 이상의 파티가 퀘스트를 시작할 수 있습니다.");
            else if (enter == 4) self.say("파티원의 레벨은 최소 " + fieldSet.minLv + " 이상이어야 합니다.");
            else if (enter == 5) self.say("파티원이 모두 모여 있어야 시작할 수 있습니다.");
            else if (enter == 6) self.say("이미 다른 원정대가 안으로 들어가 퀘스트 클리어에 도전하고 있는 중입니다.");
            else if (enter == 7) { //30분 대기시간이 발생한경우
                self.say("30분 이내에 입장한 파티원이 있습니다. 입장 후 30분 이내에 재입장이 불가능합니다.");
            } else if (enter < -1) {
                MapleCharacter user = getClient().getChannelServer().getPlayerStorage().getCharacterById(enter * -1);
                String name = "";
                if (user != null) {
                    name = user.getName();
                }
                if (target.getMapId() != 401060399) {
                    self.sayOk("최근 일주일 이내 <보스:매그너스> 하드 모드를 클리어한 파티원이 있습니다. <보스:매그너스> 하드 모드는 일주일에 1회만 클리어 가능합니다.\r\n#r#e<클리어 기록은 매주 목요일에 일괄 초기화 됩니다.>");
                } else {
                    self.say("파티원 중 #b#e" + name + "#k#n 님이 오늘 매그너스에 입장하셔서 들어갈 수 없습니다.");
                }
            }
        }
        */
    //TODO mag_GateWayOut(이지매그퇴장), BPReturn_Magnus2(노말매그,하드매그퇴장)
}
